{"ast":null,"code":"function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nfunction $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {\n  if (date.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.calendar, date.era, date.year, date.month, date.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.calendar, date.year, date.month, date.day);\n}\n\nfunction $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {\n  if (date.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\n\nconst $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\n\nfunction $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {\n  year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\n\nfunction $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nfunction $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {\n  return era === 'BC' ? 1 - year : year;\n}\n\nfunction $3b62074eb05584b2$export$4475b7e617eb123c(year) {\n  let era = 'AD';\n\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst $3b62074eb05584b2$var$daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\nclass $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let jd0 = jd;\n    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = $2b4dce13dd5a17fa$export$842a2cf37af977e1(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, month, day);\n  }\n\n  toJulianDay(date) {\n    return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  getMonthsInYear(date) {\n    return 12;\n  }\n\n  getDaysInYear(date) {\n    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  getYearsInEra(date) {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  isInverseEra(date) {\n    return date.era === 'BC';\n  }\n\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n\n  constructor() {\n    this.identifier = 'gregory';\n  }\n\n}\n\nconst $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n\nfunction $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\nfunction $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar); // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\nfunction $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {\n  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.era === b.era && a.year === b.year;\n}\n\nfunction $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\nfunction $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {\n  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);\n  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\nfunction $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {\n  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);\n  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\nfunction $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {\n  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));\n}\n\nfunction $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {\n  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n\n  let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  return dayOfWeek;\n}\n\nfunction $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(Date.now(), timeZone);\n}\n\nfunction $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {\n  return $11d87f3f76e88657$export$93522d1a439f3617($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));\n}\n\nfunction $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nfunction $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {\n  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);\n}\n\nfunction $14e0f24ef4ac5c92$var$timeToMs(a) {\n  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\n\nfunction $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(a, timeZone);\n  let tomorrow = a.add({\n    days: 1\n  });\n  let tomorrowMs = $11d87f3f76e88657$export$5107c82f94518f5c(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet $14e0f24ef4ac5c92$var$localTimeZone = null;\n\nfunction $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {\n  // TODO: invalidate this somehow?\n  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  return $14e0f24ef4ac5c92$var$localTimeZone;\n}\n\nfunction $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({\n    days: date.day - 1\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {\n  return date.add({\n    days: date.calendar.getDaysInMonth(date) - date.day\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {\n  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({\n    months: date.month - 1\n  }));\n}\n\nfunction $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {\n  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({\n    months: date.calendar.getMonthsInYear(date) - date.month\n  }));\n}\n\nfunction $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {\n  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n  return 1;\n}\n\nfunction $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {\n  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n  return 1;\n}\n\nfunction $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {\n  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);\n  return date.subtract({\n    days: dayOfWeek\n  });\n}\n\nfunction $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {\n  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({\n    days: 6\n  });\n}\n\nconst $14e0f24ef4ac5c92$var$cachedRegions = new Map();\n\nfunction $14e0f24ef4ac5c92$var$getRegion(locale) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);\n\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);\n    }\n\n    return region;\n  } // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n\n\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction $14e0f24ef4ac5c92$var$getWeekStart(locale) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale);\n  return $2fe286d2fb449abb$export$7a5acbd77d414bd9[region] || 0;\n}\n\nfunction $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\n\nfunction $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {\n  if (a && b) return a.compare(b) <= 0 ? a : b;\n  return a || b;\n}\n\nfunction $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {\n  if (a && b) return a.compare(b) >= 0 ? a : b;\n  return a || b;\n}\n\nconst $14e0f24ef4ac5c92$var$WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\nfunction $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {\n  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) dayOfWeek += 7;\n  let region = $14e0f24ef4ac5c92$var$getRegion(locale); // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n\n  let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\nfunction $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {\n  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);\n}\n\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n  let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(date.era, date.year);\n  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') return 0; // Fast path: for local timezone, use native Date.\n\n  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2()) return new Date(ms).getTimezoneOffset() * -60000;\n  let {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second\n  } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);\n  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst $11d87f3f76e88657$var$formattersByTimeZone = new Map();\n\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone: timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts = {};\n\n  for (let part of parts) if (part.type !== 'literal') namedParts[part.type] = part.value;\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst $11d87f3f76e88657$var$DAYMILLIS = 86400000;\n\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));\n}\n\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\n\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'compatible';\n  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date); // Fast path: if the time zone is UTC, use native Date.\n\n  if (timeZone === 'UTC') return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime); // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n\n  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2() && disambiguation === 'compatible') {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new $3b62074eb05584b2$export$80ee6245ec4f29ec()); // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n\n    let date = new Date();\n    let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case 'compatible':\n    case 'earlier':\n      return valid[0];\n\n    case 'later':\n      return valid[valid.length - 1];\n\n    case 'reject':\n      throw new RangeError('Multiple possible absolute times found');\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'compatible';\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\n\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n  return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\n\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\n\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  let hour = 0,\n      minute = 0,\n      second = 0,\n      millisecond = 0;\n  if ('timeZone' in date) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = date);else if ('hour' in date && !time) return date;\n  if (time) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = time);\n  return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\n\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new $35ea8db9cb2ccb90$export$680ea196effce5f(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  return copy;\n}\n\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\n\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\n\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\n\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\n\nconst $735220c2d4774dd3$var$ONE_HOUR = 3600000;\n\nfunction $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {\n  let mutableDate = date.copy();\n  let days = 'hour' in date ? $735220c2d4774dd3$var$addTimeFields(date, duration) : 0;\n  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  mutableDate.month += duration.months || 0;\n  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);\n  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n  $735220c2d4774dd3$var$balanceDay(mutableDate);\n  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate); // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n\n  if (mutableDate.year > maxYear) {\n    var _calendar, ref;\n\n    let isInverseEra = (ref = (_calendar = mutableDate.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction $735220c2d4774dd3$var$addYears(date, years) {\n  var _calendar, ref;\n\n  if ((ref = (_calendar = date.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, date)) years = -years;\n  date.year += years;\n}\n\nfunction $735220c2d4774dd3$var$balanceYearMonth(date) {\n  while (date.month < 1) {\n    $735220c2d4774dd3$var$addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    $735220c2d4774dd3$var$addYears(date, 1);\n  }\n}\n\nfunction $735220c2d4774dd3$var$balanceDay(date) {\n  while (date.day < 1) {\n    date.month--;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    $735220c2d4774dd3$var$balanceYearMonth(date);\n  }\n}\n\nfunction $735220c2d4774dd3$var$constrainMonthDay(date) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nfunction $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {\n  if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  $735220c2d4774dd3$var$constrainMonthDay(date);\n}\n\nfunction $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {\n  let inverseDuration = {};\n\n  for (let key in duration) if (typeof duration[key] === 'number') inverseDuration[key] = -duration[key];\n\n  return inverseDuration;\n}\n\nfunction $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {\n  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {\n  let mutableDate = date.copy();\n  if (fields.era != null) mutableDate.era = fields.era;\n  if (fields.year != null) mutableDate.year = fields.year;\n  if (fields.month != null) mutableDate.month = fields.month;\n  if (fields.day != null) mutableDate.day = fields.day;\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);\n  return mutableDate;\n}\n\nfunction $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {\n  let mutableValue = value.copy();\n  if (fields.hour != null) mutableValue.hour = fields.hour;\n  if (fields.minute != null) mutableValue.minute = fields.minute;\n  if (fields.second != null) mutableValue.second = fields.second;\n  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);\n  return mutableValue;\n}\n\nfunction $735220c2d4774dd3$var$balanceTime(time) {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);\n  time.minute += Math.floor(time.second / 60);\n  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);\n  let days = Math.floor(time.hour / 24);\n  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);\n  return days;\n}\n\nfunction $735220c2d4774dd3$export$7555de1e070510cb(time) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction $735220c2d4774dd3$var$nonNegativeMod(a, b) {\n  let result = a % b;\n  if (result < 0) result += b;\n  return result;\n}\n\nfunction $735220c2d4774dd3$var$addTimeFields(time, duration) {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return $735220c2d4774dd3$var$balanceTime(time);\n}\n\nfunction $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {\n  let res = time.copy();\n  $735220c2d4774dd3$var$addTimeFields(res, duration);\n  return res;\n}\n\nfunction $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {\n  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {\n  let mutable = value.copy();\n\n  switch (field) {\n    case 'era':\n      {\n        let eras = value.calendar.getEras();\n        let eraIndex = eras.indexOf(value.era);\n        if (eraIndex < 0) throw new Error('Invalid era: ' + value.era);\n        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n        mutable.era = eras[eraIndex]; // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n\n        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n        break;\n      }\n\n    case 'year':\n      var _calendar, ref;\n\n      if ((ref = (_calendar = mutable.calendar).isInverseEra) === null || ref === void 0 ? void 0 : ref.call(_calendar, mutable)) amount = -amount; // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n\n      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n      if (mutable.year === -Infinity) mutable.year = 1;\n      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n      break;\n\n    case 'month':\n      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case 'day':\n      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);\n  return mutable;\n}\n\nfunction $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {\n  let mutable = value.copy();\n\n  switch (field) {\n    case 'hour':\n      {\n        let hours = value.hour;\n        let min = 0;\n        let max = 23;\n\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = hours >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        }\n\n        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n        break;\n      }\n\n    case 'minute':\n      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case 'second':\n      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    case 'millisecond':\n      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n      break;\n\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction $735220c2d4774dd3$var$cycleValue(value, amount, min, max) {\n  let round = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (round) {\n    value += Math.sign(amount);\n    if (value < min) value = max;\n    let div = Math.abs(amount);\n    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;\n    if (value > max) value = min;\n  } else {\n    value += amount;\n    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);\n  }\n\n  return value;\n}\n\nfunction $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {\n  let ms;\n\n  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {\n    let res = $735220c2d4774dd3$export$e16d8520af44a096($11d87f3f76e88657$export$b21e0b124e224484(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    }); // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n\n    ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);\n  } else // Otherwise, preserve the offset of the original date.\n    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset; // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n\n\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60000;\n  ms += (duration.hours || 0) * 3600000;\n  let res = $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone);\n  return $11d87f3f76e88657$export$b4a036af3fc0b032(res, dateTime.calendar);\n}\n\nfunction $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {\n  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));\n}\n\nfunction $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour':\n      {\n        let min = 0;\n        let max = 23;\n\n        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n          let isPM = dateTime.hour >= 12;\n          min = isPM ? 12 : 0;\n          max = isPM ? 23 : 11;\n        } // The minimum and maximum hour may be affected by daylight saving time.\n        // For example, it might jump forward at midnight, and skip 1am.\n        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n        // the possible absolute times for the min and max, and find the maximum range\n        // that is within the current day.\n\n\n        let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);\n        let minDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: min\n        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n        let minAbsolute = [$11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'earlier'), $11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'later')].filter(ms => $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === minDate.day)[0];\n        let maxDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {\n          hour: max\n        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n        let maxAbsolute = [$11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'earlier'), $11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'later')].filter(ms => $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === maxDate.day).pop(); // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n        // This is done in hours from the Unix epoch so that cycleValue works correctly,\n        // and then converted back to milliseconds.\n\n        let ms1 = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;\n        let hours = Math.floor(ms1 / $735220c2d4774dd3$var$ONE_HOUR);\n        let remainder = ms1 % $735220c2d4774dd3$var$ONE_HOUR;\n        ms1 = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder; // Now compute the new timezone offset, and convert the absolute time back to local time.\n\n        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms1, dateTime.timeZone), dateTime.calendar);\n      }\n\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      {\n        let res = $735220c2d4774dd3$export$d52ced6badfb9a4c($11d87f3f76e88657$export$b21e0b124e224484(dateTime), field, amount, options);\n        let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);\n        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);\n      }\n\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nfunction $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);\n  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields); // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n\n  if (res.compare(plainDateTime) === 0) return dateTime;\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone, disambiguation);\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);\n}\n\nconst $fae977aafc393c5c$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst $fae977aafc393c5c$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\n\nfunction $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {\n  let m = value.match($fae977aafc393c5c$var$TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 time string: ' + value);\n  return new $35ea8db9cb2ccb90$export$680ea196effce5f($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\n\nfunction $fae977aafc393c5c$export$6b862160d295c8e(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$99faa760c7908e4f($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\n\nfunction $fae977aafc393c5c$export$588937bcd60ade55(value) {\n  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$ca871e8dbb80966f($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date;\n}\n\nfunction $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {\n  let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n  let ms;\n\n  if (m[8]) {\n    var ref;\n    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;\n    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset; // Validate offset against parsed date.\n\n    let absolutes = $11d87f3f76e88657$export$136f38efe7caf549(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);\n  } else // Convert to absolute and back to fix invalid times due to DST.\n    ms = $11d87f3f76e88657$export$5107c82f94518f5c($11d87f3f76e88657$export$b21e0b124e224484(plainDateTime), date.timeZone, disambiguation);\n\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, date.timeZone);\n}\n\nfunction $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {\n  let m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);\n  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);\n  let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  var ref;\n  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n}\n\nfunction $fae977aafc393c5c$export$8e384432362ed0f0(value) {\n  return $fae977aafc393c5c$export$5adfdab05168c219(value, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());\n}\n\nfunction $fae977aafc393c5c$var$parseNumber(value, min, max) {\n  let val = Number(value);\n  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  return val;\n}\n\nfunction $fae977aafc393c5c$export$f59dee82248f5ad4(time) {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nfunction $fae977aafc393c5c$export$60dfd74aa96791bd(date) {\n  let gregorianDate = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nfunction $fae977aafc393c5c$export$4223de14708adc63(date) {\n  // @ts-ignore\n  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;\n}\n\nfunction $fae977aafc393c5c$var$offsetToString(offset) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / 3600000);\n  let offsetMinutes = offset % 3600000 / 60000;\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nfunction $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {\n  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;\n}\n\nfunction $35ea8db9cb2ccb90$var$shiftArgs(args) {\n  let calendar = typeof args[0] === 'object' ? args.shift() : new $3b62074eb05584b2$export$80ee6245ec4f29ec();\n  let era;\n  if (typeof args[0] === 'string') era = args.shift();else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n  return [calendar, era, year, month, day];\n}\n\nclass $35ea8db9cb2ccb90$export$99faa760c7908e4f {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n  }\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n\n\n  add(duration) {\n    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);\n  }\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return $735220c2d4774dd3$export$adaa4cf7ef1b65be(this, fields);\n  }\n  /**\n  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n\n\n  toDate(timeZone) {\n    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return $fae977aafc393c5c$export$60dfd74aa96791bd(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    return $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);\n  }\n\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n    // If that behavior is desired, use the AnyCalendarDate interface instead.\n    _type.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n\n}\n\nvar _type = new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$680ea196effce5f {\n  /** Returns a copy of this time. */\n  copy() {\n    return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `Time` with the given duration added to it. */\n\n\n  add(duration) {\n    return $735220c2d4774dd3$export$7ed87b6bc2506470(this, duration);\n  }\n  /** Returns a new `Time` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return $735220c2d4774dd3$export$fe34d3a381cd7501(this, duration);\n  }\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return $735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields);\n  }\n  /**\n  * Returns a new `Time` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);\n  }\n  /** Converts the time to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return $fae977aafc393c5c$export$f59dee82248f5ad4(this);\n  }\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n\n\n  compare(b) {\n    return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, b);\n  }\n\n  constructor() {\n    let hour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let minute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let second = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let millisecond = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type1.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    $735220c2d4774dd3$export$7555de1e070510cb(this);\n  }\n\n}\n\nvar _type1 = new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$ca871e8dbb80966f {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n\n\n  add(duration) {\n    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);\n  }\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields) {\n    return $735220c2d4774dd3$export$adaa4cf7ef1b65be($735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields), fields);\n  }\n  /**\n  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);\n\n      default:\n        return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);\n    }\n  }\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n\n\n  toDate(timeZone, disambiguation) {\n    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone, disambiguation);\n  }\n  /** Converts the date to an ISO 8601 formatted string. */\n\n\n  toString() {\n    return $fae977aafc393c5c$export$4223de14708adc63(this);\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    let res = $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);\n    if (res === 0) return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, $11d87f3f76e88657$export$b21e0b124e224484(b));\n    return res;\n  }\n\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type2.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n\n}\n\nvar _type2 = new WeakMap();\n\nclass $35ea8db9cb2ccb90$export$d3b7288e7994edea {\n  /** Returns a copy of this date. */\n  copy() {\n    if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n\n\n  add(duration) {\n    return $735220c2d4774dd3$export$96b1d28349274637(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n\n\n  subtract(duration) {\n    return $735220c2d4774dd3$export$6814caac34ca03c7(this, duration);\n  }\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n\n\n  set(fields, disambiguation) {\n    return $735220c2d4774dd3$export$31b5430eb18be4f8(this, fields, disambiguation);\n  }\n  /**\n  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n  * When the resulting value reaches the limits of the field, it wraps around.\n  */\n\n\n  cycle(field, amount, options) {\n    return $735220c2d4774dd3$export$9a297d111fc86b79(this, field, amount, options);\n  }\n  /** Converts the date to a native JavaScript Date object. */\n\n\n  toDate() {\n    return $11d87f3f76e88657$export$83aac07b4c37b25(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n\n\n  toString() {\n    return $fae977aafc393c5c$export$bf79f1ebf4b18792(this);\n  }\n  /** Converts the date to an ISO 8601 formatted string in UTC. */\n\n\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n\n\n  compare(b) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - $11d87f3f76e88657$export$84c95a83c799e074(b, this.timeZone).toDate().getTime();\n  }\n\n  constructor() {\n    // This prevents TypeScript from allowing other types with the same fields to match.\n    _type3.set(this, {\n      writable: true,\n      value: void 0\n    });\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);\n  }\n\n}\n\nvar _type3 = new WeakMap();\n\nconst $62225008020f0a13$var$ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst $62225008020f0a13$var$ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst $62225008020f0a13$var$ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst $62225008020f0a13$var$ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction $62225008020f0a13$var$findEraFromGregorianDate(date) {\n  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(_ref => {\n    let [year, month, day] = _ref;\n    if (date.year < year) return true;\n    if (date.year === year && date.month < month) return true;\n    if (date.year === year && date.month === month && date.day < day) return true;\n    return false;\n  });\n  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;\n  if (idx === 0) return 0;\n  return idx - 1;\n}\n\nfunction $62225008020f0a13$var$toGregorian(date) {\n  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) throw new Error('Unknown era: ' + date.era);\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.year + eraAddend, date.month, date.day);\n}\n\nclass $62225008020f0a13$export$b746ab2b60cdffbf extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));\n  }\n\n  balanceDate(date) {\n    let gregorianDate = $62225008020f0a13$var$toGregorian(date);\n    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);\n\n    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {\n      date.era = $62225008020f0a13$var$ERA_NAMES[era];\n      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];\n    } // Constrain in case we went before the first supported era.\n\n\n    this.constrainDate(date);\n  }\n\n  constrainDate(date) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let end = $62225008020f0a13$var$ERA_END_DATES[idx];\n\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end; // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n\n      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n        if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n      }\n\n      if (date.year === 1) {\n        let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];\n        date.month = Math.max(startMonth, date.month);\n        if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n      }\n    }\n  }\n\n  getEras() {\n    return $62225008020f0a13$var$ERA_NAMES;\n  }\n\n  getYearsInEra(date) {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];\n    if (next == null) return 9999;\n    let cur = $62225008020f0a13$var$ERA_START_DATES[era];\n    let years = next[0] - cur[0];\n    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n    return years;\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date) {\n    let start = $62225008020f0a13$var$getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'japanese';\n  }\n\n}\n\nfunction $62225008020f0a13$var$getMinimums(date) {\n  if (date.year === 1) {\n    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);\n    return $62225008020f0a13$var$ERA_START_DATES[idx];\n  }\n}\n\nconst $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;\n\nclass $8d73d47422ca7302$export$42d20a78301dee44 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(gregorianDate.era, gregorianDate.year);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));\n  }\n\n  balanceDate() {}\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'buddhist';\n  }\n\n}\n\nfunction $8d73d47422ca7302$var$toGregorian(date) {\n  let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, date.month, date.day);\n}\n\nconst $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;\n\nfunction $5f31bd6f0c8940b2$var$gregorianYear(date) {\n  return date.era === 'minguo' ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n}\n\nfunction $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {\n  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;\n  if (y > 0) return ['minguo', y];else return ['before_minguo', 1 - y];\n}\n\nclass $5f31bd6f0c8940b2$export$65e01080afcb0799 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(date.era, date.year);\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date) {\n    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date) {\n    let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date) {\n    return date.era === 'before_minguo';\n  }\n\n  getDaysInMonth(date) {\n    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier // Republic of China\n    = 'roc';\n  }\n\n}\n\nfunction $5f31bd6f0c8940b2$var$toGregorian(date) {\n  let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c($5f31bd6f0c8940b2$var$gregorianYear(date));\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(era, year, date.month, date.day);\n}\n\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction $f3ed2e4472ae7e25$var$isLeapYear(year) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(y0, 2820) + 474;\n  return $2b4dce13dd5a17fa$export$842a2cf37af977e1((y1 + 38) * 31, 128) < 31;\n}\n\nfunction $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\n\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n  fromJulianDay(jd) {\n    let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) year--;\n    let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);\n  }\n\n  toJulianDay(date) {\n    return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear() {\n    return 12;\n  }\n\n  getDaysInMonth(date) {\n    if (date.month <= 6) return 31;\n    if (date.month <= 11) return 30;\n    return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  constructor() {\n    this.identifier = 'persian';\n  }\n\n} // Starts in 78 AD,\n\n\nconst $82c358003bdda0a8$var$INDIAN_ERA_START = 78; // The Indian year starts 80 days later than the Gregorian year.\n\nconst $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;\n\nclass $82c358003bdda0a8$export$39f31c639fa15726 extends $3b62074eb05584b2$export$80ee6245ec4f29ec {\n  fromJulianDay(jd) {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd); // Year in Saka era\n\n    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START; // Day number in Gregorian year (starting from 0)\n\n    let yDay = jd - $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, 1, 1);\n    let leapMonth;\n\n    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--; // Days in leapMonth this year, previous Gregorian year\n\n      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + 155 + 90 + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 31 : 30;\n      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;\n    }\n\n    let indianMonth;\n    let indianDay;\n\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n\n      if (mDay < 155) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = mDay % 31 + 1;\n      } else {\n        mDay -= 155;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = mDay % 30 + 1;\n      }\n    }\n\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date) {\n    let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;\n    let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);\n    let leapMonth;\n    let jd;\n\n    if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) {\n      leapMonth = 31;\n      jd = $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 22);\n    }\n\n    if (date.month === 1) return jd + date.day - 1;\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n    if (date.month >= 8) jd += (date.month - 7) * 30;\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date) {\n    if (date.month === 1 && $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;\n    if (date.month >= 2 && date.month <= 6) return 31;\n    return 30;\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  balanceDate() {}\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'indian';\n  }\n\n}\n\nconst $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\n\nconst $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\n\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;\nconst $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;\nconst $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;\n\nfunction $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {\n  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\n\nfunction $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(calendar, year, month, day);\n}\n\nfunction $f2f3e0e3a817edbd$var$isLeapYear(year) {\n  return (14 + 11 * year) % 30 < 11;\n}\n\nclass $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;\n    return length;\n  }\n\n  getMonthsInYear() {\n    return 12;\n  }\n\n  getDaysInYear(date) {\n    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n\n  constructor() {\n    this.identifier = 'islamic-civil';\n  }\n\n}\n\nclass $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date) {\n    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'islamic-tbla';\n  }\n\n} // Generated by scripts/generate-umalqura.js\n\n\nconst $f2f3e0e3a817edbd$var$UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;\nlet $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;\n\nfunction $f2f3e0e3a817edbd$var$umalquraYearStart(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {\n  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;\n  let mask = 1 << 11 - (month - 1);\n  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {\n  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);\n\n  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n\n  return day;\n}\n\nfunction $f2f3e0e3a817edbd$var$umalquraYearLength(year) {\n  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];\n}\n\nclass $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {\n  fromJulianDay(jd) {\n    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;\n    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);\n    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {\n      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n\n      while (d > 0) {\n        y++;\n        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;\n        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);\n\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          m = 1;\n\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);\n          }\n\n          break;\n        }\n      }\n\n      return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);\n    }\n  }\n\n  toJulianDay(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date) {\n    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);\n  }\n\n  constructor() {\n    super();\n    this.identifier = 'islamic-umalqura';\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n\n    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {\n      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);\n      let yearStart = 0;\n\n      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {\n        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;\n\n        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);\n      }\n    }\n  }\n\n}\n\nconst $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997; // Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\n\nconst $7c5f6fbf42389787$var$HOUR_PARTS = 1080;\nconst $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS; // An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\n\nconst $7c5f6fbf42389787$var$MONTH_DAYS = 29;\nconst $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;\nconst $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;\n\nfunction $7c5f6fbf42389787$var$isLeapYear(year) {\n  return $2b4dce13dd5a17fa$export$842a2cf37af977e1(year * 7 + 1, 19) < 7;\n} // Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\n\n\nfunction $7c5f6fbf42389787$var$hebrewDelay1(year) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n  if ($2b4dce13dd5a17fa$export$842a2cf37af977e1(3 * (day + 1), 7) < 3) day += 1;\n  return day;\n} // Check for delay in start of new year due to length of adjacent years\n\n\nfunction $7c5f6fbf42389787$var$hebrewDelay2(year) {\n  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);\n  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);\n  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);\n  if (next - present === 356) return 2;\n  if (present - last === 382) return 1;\n  return 0;\n}\n\nfunction $7c5f6fbf42389787$var$startOfYear(year) {\n  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInYear(year) {\n  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);\n}\n\nfunction $7c5f6fbf42389787$var$getYearType(year) {\n  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);\n  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n\n  switch (yearLength) {\n    case 353:\n      return 0;\n    // deficient\n\n    case 354:\n      return 1;\n    // normal\n\n    case 355:\n      return 2;\n    // complete\n  }\n}\n\nfunction $7c5f6fbf42389787$var$getDaysInMonth(year, month) {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++; // First of all, dispose of fixed-length 29 day months\n\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n  let yearType = $7c5f6fbf42389787$var$getYearType(year); // If it's Heshvan, days depend on length of year\n\n  if (month === 2) return yearType === 2 ? 30 : 29; // Similarly, Kislev varies with the length of year\n\n  if (month === 3) return yearType === 0 ? 29 : 30; // Adar I only exists in leap years\n\n  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;\n  return 30;\n}\n\nclass $7c5f6fbf42389787$export$ca405048b8fb5af {\n  fromJulianDay(jd) {\n    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;\n    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)\n\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n\n    let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year\n\n    let dayOfYear = Math.floor(d - ys); // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n\n    while (dayOfYear < 1) {\n      year--;\n      ys = $7c5f6fbf42389787$var$startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    } // Now figure out which month we're in, and the date within that month\n\n\n    let month = 1;\n    let monthStart = 0;\n\n    while (monthStart < dayOfYear) {\n      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);\n    let day = dayOfYear - monthStart;\n    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);\n  }\n\n  toJulianDay(date) {\n    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);\n\n    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);\n\n    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date) {\n    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date) {\n    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date) {\n    return $7c5f6fbf42389787$var$getDaysInYear(date.year);\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date, previousDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n    }\n  }\n\n  constructor() {\n    this.identifier = 'hebrew';\n  }\n\n}\n\nconst $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;\nconst $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665; // The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\n\nconst $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;\n\nfunction $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {\n  return epoch // difference from Julian epoch to 1,1,1\n  + 365 * year // number of days from years\n  + Math.floor(year / 4) // extra day of leap year\n  + 30 * (month - 1) // number of days from months (1 based)\n  + day - 1 // number of days for present month (1 based)\n  ;\n}\n\nfunction $b956b2d7a6cf451f$var$julianDayToCE(calendar, epoch, jd) {\n  let year = Math.floor(4 * (jd - epoch) / 1461);\n  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);\n  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(calendar, year, month, day);\n}\n\nfunction $b956b2d7a6cf451f$var$getLeapDay(year) {\n  return Math.floor(year % 4 / 3);\n}\n\nfunction $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) // not intercalary month\n    return 30;else // intercalary month 5 days + possible leap day\n    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;\n}\n\nclass $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    if (date.year > 0) date.era = 'AM';else {\n      date.era = 'AA';\n      date.year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    }\n    return date;\n  }\n\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n\n  getMonthsInYear() {\n    return 13;\n  }\n\n  getDaysInYear(date) {\n    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);\n  }\n\n  getYearsInEra() {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n\n  constructor() {\n    this.identifier = 'ethiopic';\n  }\n\n}\n\nclass $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);\n    date.era = 'AA';\n    date.year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;\n    return date;\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier // also known as 'ethiopic-amete-alem' in ICU\n    = 'ethioaa';\n  }\n\n}\n\nclass $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {\n  fromJulianDay(jd) {\n    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);\n\n    if (date.year <= 0) {\n      date.era = 'BCE';\n      date.year = 1 - date.year;\n    } else date.era = 'CE';\n\n    return date;\n  }\n\n  toJulianDay(date) {\n    let year = date.year;\n    if (date.era === 'BCE') year = 1 - year;\n    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date) {\n    let year = date.year;\n    if (date.era === 'BCE') year = 1 - year;\n    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date) {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n\n  constructor() {\n    super(...arguments);\n    this.identifier = 'coptic';\n  }\n\n}\n\nfunction $64244302c3013299$export$dd0bbc9b26defe37(name) {\n  switch (name) {\n    case 'buddhist':\n      return new $8d73d47422ca7302$export$42d20a78301dee44();\n\n    case 'ethiopic':\n      return new $b956b2d7a6cf451f$export$26ba6eab5e20cd7d();\n\n    case 'ethioaa':\n      return new $b956b2d7a6cf451f$export$d72e0c37005a4914();\n\n    case 'coptic':\n      return new $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1();\n\n    case 'hebrew':\n      return new $7c5f6fbf42389787$export$ca405048b8fb5af();\n\n    case 'indian':\n      return new $82c358003bdda0a8$export$39f31c639fa15726();\n\n    case 'islamic-civil':\n      return new $f2f3e0e3a817edbd$export$2066795aadd37bfc();\n\n    case 'islamic-tbla':\n      return new $f2f3e0e3a817edbd$export$37f0887f2f9d22f7();\n\n    case 'islamic-umalqura':\n      return new $f2f3e0e3a817edbd$export$5baab4758c231076();\n\n    case 'japanese':\n      return new $62225008020f0a13$export$b746ab2b60cdffbf();\n\n    case 'persian':\n      return new $f3ed2e4472ae7e25$export$37fccdbfd14c5939();\n\n    case 'roc':\n      return new $5f31bd6f0c8940b2$export$65e01080afcb0799();\n\n    case 'gregory':\n    default:\n      return new $3b62074eb05584b2$export$80ee6245ec4f29ec();\n  }\n}\n\nvar $484f90c8d1b5efb9$exports = {};\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet $fb18d541ea1ad717$var$formatterCache = new Map();\n\nclass $fb18d541ea1ad717$export$ad991b66133851cf {\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value) {\n    return this.formatter.format(value);\n  }\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n\n\n  formatToParts(value) {\n    return this.formatter.formatToParts(value);\n  }\n  /** Formats a date range as a string. */\n\n\n  formatRange(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    if (end < start) throw new RangeError('End date must be >= start date'); // Very basic fallback for old browsers.\n\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n  /** Formats a date range as an array of parts. */\n\n\n  formatRangeToParts(start, end) {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    if (end < start) throw new RangeError('End date must be >= start date');\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [...startParts.map(p => ({ ...p,\n      source: 'startRange'\n    })), {\n      type: 'literal',\n      value: ' – ',\n      source: 'shared'\n    }, ...endParts.map(p => ({ ...p,\n      source: 'endRange'\n    }))];\n  }\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n\n\n  resolvedOptions() {\n    let resolvedOptions = this.formatter.resolvedOptions();\n\n    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    return resolvedOptions;\n  }\n\n  constructor(locale) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n} // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\n\n\nconst $fb18d541ea1ad717$var$hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {}\n};\n\nfunction $fb18d541ea1ad717$var$getCachedDateFormatter(locale) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {\n    options = { ...options\n    };\n    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;\n\nfunction $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {\n  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n    hour: 'numeric',\n    hour12: false\n  }).format(new Date(2020, 2, 3, 0)) === '24';\n  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;\n}\n\nlet $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;\n\nfunction $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {\n  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {\n    hour: 'numeric',\n    hour12: false\n  }).resolvedOptions().hourCycle === 'h12';\n  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;\n}\n\nfunction $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {\n  if (!options.timeStyle && !options.hour) return undefined; // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, { ...options,\n    timeZone: undefined // use local timezone\n\n  });\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n  if (min === 0 && max === 23) return 'h23';\n  if (min === 24 && max === 23) return 'h24';\n  if (min === 0 && max === 11) return 'h11';\n  if (min === 12 && max === 11) return 'h12';\n  throw new Error('Unexpected hour cycle result');\n}\n\nexport { $35ea8db9cb2ccb90$export$99faa760c7908e4f as CalendarDate, $35ea8db9cb2ccb90$export$ca871e8dbb80966f as CalendarDateTime, $35ea8db9cb2ccb90$export$680ea196effce5f as Time, $35ea8db9cb2ccb90$export$d3b7288e7994edea as ZonedDateTime, $3b62074eb05584b2$export$80ee6245ec4f29ec as GregorianCalendar, $62225008020f0a13$export$b746ab2b60cdffbf as JapaneseCalendar, $8d73d47422ca7302$export$42d20a78301dee44 as BuddhistCalendar, $5f31bd6f0c8940b2$export$65e01080afcb0799 as TaiwanCalendar, $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar, $82c358003bdda0a8$export$39f31c639fa15726 as IndianCalendar, $f2f3e0e3a817edbd$export$2066795aadd37bfc as IslamicCivilCalendar, $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 as IslamicTabularCalendar, $f2f3e0e3a817edbd$export$5baab4758c231076 as IslamicUmalquraCalendar, $7c5f6fbf42389787$export$ca405048b8fb5af as HebrewCalendar, $b956b2d7a6cf451f$export$26ba6eab5e20cd7d as EthiopicCalendar, $b956b2d7a6cf451f$export$d72e0c37005a4914 as EthiopicAmeteAlemCalendar, $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 as CopticCalendar, $64244302c3013299$export$dd0bbc9b26defe37 as createCalendar, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone, $14e0f24ef4ac5c92$export$ea39ec197993aef0 as isSameDay, $14e0f24ef4ac5c92$export$a18c89cbd24170ff as isSameMonth, $14e0f24ef4ac5c92$export$5841f9eb9773f25f as isSameYear, $14e0f24ef4ac5c92$export$91b62ebf2ba703ee as isEqualDay, $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2 as isEqualMonth, $14e0f24ef4ac5c92$export$ea840f5a6dda8147 as isEqualYear, $14e0f24ef4ac5c92$export$629b0a497aa65267 as isToday, $14e0f24ef4ac5c92$export$2061056d06d7cdf7 as getDayOfWeek, $14e0f24ef4ac5c92$export$461939dd4422153 as now, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3 as today, $14e0f24ef4ac5c92$export$126c91c941de7e as getHoursInDay, $14e0f24ef4ac5c92$export$aa8b41735afcabd2 as getLocalTimeZone, $14e0f24ef4ac5c92$export$a5a3b454ada2268e as startOfMonth, $14e0f24ef4ac5c92$export$42c81a444fbfb5d4 as startOfWeek, $14e0f24ef4ac5c92$export$f91e89d3d0406102 as startOfYear, $14e0f24ef4ac5c92$export$a2258d9c4118825c as endOfMonth, $14e0f24ef4ac5c92$export$ef8b6d9133084f4e as endOfWeek, $14e0f24ef4ac5c92$export$8b7aa55c66d5569e as endOfYear, $14e0f24ef4ac5c92$export$5412ac11713b72ad as getMinimumMonthInYear, $14e0f24ef4ac5c92$export$b2f4953d301981d5 as getMinimumDayInMonth, $14e0f24ef4ac5c92$export$ccc1b2479e7dd654 as getWeeksInMonth, $14e0f24ef4ac5c92$export$5c333a116e949cdd as minDate, $14e0f24ef4ac5c92$export$a75f2bff57811055 as maxDate, $14e0f24ef4ac5c92$export$618d60ea299da42 as isWeekend, $14e0f24ef4ac5c92$export$ee9d87258e1d19ed as isWeekday, $fae977aafc393c5c$export$6b862160d295c8e as parseDate, $fae977aafc393c5c$export$588937bcd60ade55 as parseDateTime, $fae977aafc393c5c$export$c9698ec7f05a07e1 as parseTime, $fae977aafc393c5c$export$5adfdab05168c219 as parseAbsolute, $fae977aafc393c5c$export$8e384432362ed0f0 as parseAbsoluteToLocal, $fae977aafc393c5c$export$fd7893f06e92a6a4 as parseZonedDateTime, $fb18d541ea1ad717$export$ad991b66133851cf as DateFormatter };","map":{"version":3,"mappings":"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","names":["$2b4dce13dd5a17fa$export$842a2cf37af977e1","amount","numerator","Math","floor","$2b4dce13dd5a17fa$export$784d13d8ee351f07","date","era","$35ea8db9cb2ccb90$export$99faa760c7908e4f","calendar","year","month","day","$2b4dce13dd5a17fa$export$27fa0172ae2644b3","$35ea8db9cb2ccb90$export$ca871e8dbb80966f","hour","minute","second","millisecond","$3b62074eb05584b2$var$EPOCH","$3b62074eb05584b2$export$f297eb839006d339","$3b62074eb05584b2$export$c36e0ecb2d4fa69d","y1","monthOffset","$3b62074eb05584b2$export$553d7fa8e3805fc0","$3b62074eb05584b2$export$4475b7e617eb123c","$3b62074eb05584b2$var$daysInMonth","standard","leapyear","$3b62074eb05584b2$export$80ee6245ec4f29ec","fromJulianDay","jd","jd0","depoch","quadricent","dqc","cent","dcent","quad","dquad","yindex","extendedYear","yearDay","leapAdj","toJulianDay","getDaysInMonth","getMonthsInYear","getDaysInYear","getYearsInEra","getEras","isInverseEra","balanceDate","identifier","$2fe286d2fb449abb$export$7a5acbd77d414bd9","AD","AE","AF","AI","AL","AM","AN","AT","AX","AZ","BA","BE","BG","BH","BM","BN","BY","CH","CL","CM","CR","CY","CZ","DE","DJ","DK","DZ","EC","EE","EG","ES","FI","FJ","FO","FR","GB","GE","GF","GP","GR","HR","HU","IE","IQ","IR","IS","IT","JO","KG","KW","KZ","LB","LI","LK","LT","LU","LV","LY","MC","MD","ME","MK","MN","MQ","MV","MY","NL","NO","NZ","OM","PL","QA","RE","RO","RS","RU","SD","SE","SI","SK","SM","SY","TJ","TM","TR","UA","UY","UZ","VA","VN","XK","$14e0f24ef4ac5c92$export$ea39ec197993aef0","a","b","$11d87f3f76e88657$export$b4a036af3fc0b032","$14e0f24ef4ac5c92$export$a18c89cbd24170ff","$14e0f24ef4ac5c92$export$a5a3b454ada2268e","$14e0f24ef4ac5c92$export$5841f9eb9773f25f","$14e0f24ef4ac5c92$export$f91e89d3d0406102","$14e0f24ef4ac5c92$export$91b62ebf2ba703ee","$14e0f24ef4ac5c92$export$5a8da0c44a3afdf2","$14e0f24ef4ac5c92$export$ea840f5a6dda8147","$14e0f24ef4ac5c92$export$629b0a497aa65267","timeZone","$14e0f24ef4ac5c92$export$d0bdf45af03a6ea3","$14e0f24ef4ac5c92$export$2061056d06d7cdf7","locale","julian","dayOfWeek","ceil","$14e0f24ef4ac5c92$var$getWeekStart","$14e0f24ef4ac5c92$export$461939dd4422153","$11d87f3f76e88657$export$1b96692a1ba042ac","Date","now","$11d87f3f76e88657$export$93522d1a439f3617","$14e0f24ef4ac5c92$export$68781ddf31c0090f","$14e0f24ef4ac5c92$export$c19a80a9721b80f6","$14e0f24ef4ac5c92$var$timeToMs","$14e0f24ef4ac5c92$export$126c91c941de7e","ms","$11d87f3f76e88657$export$5107c82f94518f5c","tomorrow","add","days","tomorrowMs","$14e0f24ef4ac5c92$var$localTimeZone","$14e0f24ef4ac5c92$export$aa8b41735afcabd2","Intl","DateTimeFormat","resolvedOptions","subtract","$14e0f24ef4ac5c92$export$a2258d9c4118825c","months","$14e0f24ef4ac5c92$export$8b7aa55c66d5569e","$14e0f24ef4ac5c92$export$5412ac11713b72ad","getMinimumMonthInYear","$14e0f24ef4ac5c92$export$b2f4953d301981d5","getMinimumDayInMonth","$14e0f24ef4ac5c92$export$42c81a444fbfb5d4","$14e0f24ef4ac5c92$export$ef8b6d9133084f4e","$14e0f24ef4ac5c92$var$cachedRegions","Map","$14e0f24ef4ac5c92$var$getRegion","Locale","region","get","maximize","set","part","split","$14e0f24ef4ac5c92$export$ccc1b2479e7dd654","$14e0f24ef4ac5c92$export$5c333a116e949cdd","compare","$14e0f24ef4ac5c92$export$a75f2bff57811055","$14e0f24ef4ac5c92$var$WEEKEND_DATA","IL","SA","YE","$14e0f24ef4ac5c92$export$618d60ea299da42","start","end","$14e0f24ef4ac5c92$export$ee9d87258e1d19ed","$11d87f3f76e88657$export$bd4fb2bc8bb06fb","$11d87f3f76e88657$var$epochFromParts","setUTCHours","setUTCFullYear","getTime","$11d87f3f76e88657$export$59c99f3515d3493f","getTimezoneOffset","$11d87f3f76e88657$var$getTimeZoneParts","utc","$11d87f3f76e88657$var$formattersByTimeZone","formatter","hour12","parts","formatToParts","namedParts","type","value","$11d87f3f76e88657$var$DAYMILLIS","$11d87f3f76e88657$export$136f38efe7caf549","earlier","later","$11d87f3f76e88657$var$getValidWallTimes","found","filter","absolute","$11d87f3f76e88657$var$isValidWallTime","disambiguation","dateTime","$11d87f3f76e88657$export$b21e0b124e224484","setFullYear","setHours","offsetBefore","offsetAfter","valid","length","RangeError","min","max","$11d87f3f76e88657$export$e67a095c620b86fe","offset","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$35ea8db9cb2ccb90$export$d3b7288e7994edea","$11d87f3f76e88657$export$e57ff100d91bd4b9","$11d87f3f76e88657$export$d7f92bcd3596b086","$11d87f3f76e88657$export$6f4d78149f3f53ac","$11d87f3f76e88657$export$4d0393e732857be5","time","$11d87f3f76e88657$export$d33f79e3ffc3dc83","$35ea8db9cb2ccb90$export$680ea196effce5f","calendarDate","copy","$11d87f3f76e88657$export$84c95a83c799e074","$11d87f3f76e88657$export$538b00033cc11c75","$11d87f3f76e88657$export$83aac07b4c37b25","$11d87f3f76e88657$export$d9b67bc93c097491","$735220c2d4774dd3$var$ONE_HOUR","$735220c2d4774dd3$export$e16d8520af44a096","duration","mutableDate","$735220c2d4774dd3$var$addTimeFields","$735220c2d4774dd3$var$addYears","years","balanceYearMonth","$735220c2d4774dd3$var$balanceYearMonth","$735220c2d4774dd3$var$constrainMonthDay","weeks","$735220c2d4774dd3$var$balanceDay","maxYear","_calendar","ref","call","maxMonth","monthsInYear","$735220c2d4774dd3$export$c4e2ecac49351ef2","constrainDate","$735220c2d4774dd3$export$3e2544e88a25bff8","inverseDuration","key","$735220c2d4774dd3$export$4e2d2ead65e5f7e3","$735220c2d4774dd3$export$adaa4cf7ef1b65be","fields","$735220c2d4774dd3$export$e5d5e1c1822b6e56","mutableValue","$735220c2d4774dd3$export$7555de1e070510cb","$735220c2d4774dd3$var$balanceTime","$735220c2d4774dd3$var$nonNegativeMod","result","hours","minutes","seconds","milliseconds","$735220c2d4774dd3$export$7ed87b6bc2506470","res","$735220c2d4774dd3$export$fe34d3a381cd7501","$735220c2d4774dd3$export$d52ced6badfb9a4c","field","options","mutable","eras","eraIndex","indexOf","Error","$735220c2d4774dd3$var$cycleValue","round","Infinity","$735220c2d4774dd3$export$dd02b3e0007dfe28","hourCycle","isPM","sign","div","abs","$735220c2d4774dd3$export$96b1d28349274637","$735220c2d4774dd3$export$6814caac34ca03c7","$735220c2d4774dd3$export$9a297d111fc86b79","plainDateTime","minDate","minAbsolute","maxDate","maxAbsolute","pop","ms1","remainder","$735220c2d4774dd3$export$31b5430eb18be4f8","$fae977aafc393c5c$var$TIME_RE","$fae977aafc393c5c$var$DATE_RE","$fae977aafc393c5c$var$DATE_TIME_RE","$fae977aafc393c5c$var$ZONED_DATE_TIME_RE","$fae977aafc393c5c$var$ABSOLUTE_RE","$fae977aafc393c5c$export$c9698ec7f05a07e1","m","match","$fae977aafc393c5c$var$parseNumber","$fae977aafc393c5c$export$6b862160d295c8e","$fae977aafc393c5c$export$588937bcd60ade55","$fae977aafc393c5c$export$fd7893f06e92a6a4","absolutes","includes","$fae977aafc393c5c$var$offsetToString","$fae977aafc393c5c$export$4223de14708adc63","$fae977aafc393c5c$export$5adfdab05168c219","$fae977aafc393c5c$export$8e384432362ed0f0","val","Number","$fae977aafc393c5c$export$f59dee82248f5ad4","String","padStart","slice","$fae977aafc393c5c$export$60dfd74aa96791bd","gregorianDate","offsetHours","offsetMinutes","$fae977aafc393c5c$export$bf79f1ebf4b18792","$35ea8db9cb2ccb90$var$shiftArgs","args","shift","cycle","toDate","toString","_type","_type1","_type2","toAbsoluteString","toISOString","_type3","$62225008020f0a13$var$ERA_START_DATES","$62225008020f0a13$var$ERA_END_DATES","$62225008020f0a13$var$ERA_ADDENDS","$62225008020f0a13$var$ERA_NAMES","$62225008020f0a13$var$findEraFromGregorianDate","idx","findIndex","$62225008020f0a13$var$toGregorian","eraAddend","$62225008020f0a13$export$b746ab2b60cdffbf","endYear","endMonth","endDay","startMonth","startDay","next","cur","$62225008020f0a13$var$getMinimums","$8d73d47422ca7302$var$BUDDHIST_ERA_START","$8d73d47422ca7302$export$42d20a78301dee44","$8d73d47422ca7302$var$toGregorian","$5f31bd6f0c8940b2$var$TAIWAN_ERA_START","$5f31bd6f0c8940b2$var$gregorianYear","$5f31bd6f0c8940b2$var$gregorianToTaiwan","y","$5f31bd6f0c8940b2$export$65e01080afcb0799","$5f31bd6f0c8940b2$var$toGregorian","$f3ed2e4472ae7e25$var$PERSIAN_EPOCH","$f3ed2e4472ae7e25$var$isLeapYear","y0","$f3ed2e4472ae7e25$var$persianToJulianDay","$f3ed2e4472ae7e25$export$37fccdbfd14c5939","d0","n2820","d1","y2820","yDay","$82c358003bdda0a8$var$INDIAN_ERA_START","$82c358003bdda0a8$var$INDIAN_YEAR_START","$82c358003bdda0a8$export$39f31c639fa15726","indianYear","leapMonth","indianMonth","indianDay","mDay","$f2f3e0e3a817edbd$var$CIVIL_EPOC","$f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_END","$f2f3e0e3a817edbd$var$UMALQURA_START_DAYS","$f2f3e0e3a817edbd$var$islamicToJulianDay","epoch","$f2f3e0e3a817edbd$var$julianDayToIslamic","$f2f3e0e3a817edbd$var$isLeapYear","$f2f3e0e3a817edbd$export$2066795aadd37bfc","$f2f3e0e3a817edbd$export$37f0887f2f9d22f7","$f2f3e0e3a817edbd$var$UMALQURA_DATA","$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH","$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE","$f2f3e0e3a817edbd$var$umalquraYearStart","$f2f3e0e3a817edbd$var$umalquraMonthLength","mask","$f2f3e0e3a817edbd$var$umalquraMonthStart","i","$f2f3e0e3a817edbd$var$umalquraYearLength","$f2f3e0e3a817edbd$export$5baab4758c231076","startDays","endDays","d","yearLength","monthLength","Uint16Array","Uint8Array","from","atob","c","charCodeAt","buffer","Uint32Array","yearStart","$7c5f6fbf42389787$var$HEBREW_EPOCH","$7c5f6fbf42389787$var$HOUR_PARTS","$7c5f6fbf42389787$var$DAY_PARTS","$7c5f6fbf42389787$var$MONTH_DAYS","$7c5f6fbf42389787$var$MONTH_FRACT","$7c5f6fbf42389787$var$MONTH_PARTS","$7c5f6fbf42389787$var$isLeapYear","$7c5f6fbf42389787$var$hebrewDelay1","$7c5f6fbf42389787$var$hebrewDelay2","last","present","$7c5f6fbf42389787$var$startOfYear","$7c5f6fbf42389787$var$getDaysInYear","$7c5f6fbf42389787$var$getYearType","$7c5f6fbf42389787$var$getDaysInMonth","yearType","$7c5f6fbf42389787$export$ca405048b8fb5af","ys","dayOfYear","monthStart","previousDate","$b956b2d7a6cf451f$var$ETHIOPIC_EPOCH","$b956b2d7a6cf451f$var$COPTIC_EPOCH","$b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA","$b956b2d7a6cf451f$var$ceToJulianDay","$b956b2d7a6cf451f$var$julianDayToCE","$b956b2d7a6cf451f$var$getLeapDay","$b956b2d7a6cf451f$var$getDaysInMonth","$b956b2d7a6cf451f$export$26ba6eab5e20cd7d","$b956b2d7a6cf451f$export$d72e0c37005a4914","$b956b2d7a6cf451f$export$fe6243cbe1a4b7c1","$64244302c3013299$export$dd0bbc9b26defe37","name","$fb18d541ea1ad717$var$formatterCache","$fb18d541ea1ad717$export$ad991b66133851cf","format","formatRange","formatRangeToParts","startParts","endParts","map","p","source","$fb18d541ea1ad717$var$hasBuggyResolvedHourCycle","resolvedHourCycle","$fb18d541ea1ad717$var$getResolvedHourCycle","$fb18d541ea1ad717$var$getCachedDateFormatter","$fb18d541ea1ad717$var$hour12Preferences","true","ja","false","$fb18d541ea1ad717$var$hasBuggyHour12Behavior","pref","defaultHourCycle","cacheKey","Object","entries","sort","join","has","numberFormatter","$fb18d541ea1ad717$var$_hasBuggyHour12Behavior","$fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle","timeStyle","undefined","replace","parseInt","find"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\utils.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\GregorianCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\weekStartData.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\queries.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\conversion.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\manipulation.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\string.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\CalendarDate.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\JapaneseCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\BuddhistCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\TaiwanCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\PersianCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\IndianCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\IslamicCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\HebrewCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\EthiopicCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\createCalendar.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\DateFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, CalendarDateTime} from './CalendarDate';\n\nexport type Mutable<T> = {\n  -readonly[P in keyof T]: T[P]\n};\n\nexport function mod(amount: number, numerator: number): number {\n  return amount - numerator * Math.floor(amount / numerator);\n}\n\nexport function copy(date: CalendarDate): Mutable<CalendarDate> {\n  if (date.era) {\n    return new CalendarDate(date.calendar, date.era, date.year, date.month, date.day);\n  } else {\n    return new CalendarDate(date.calendar, date.year, date.month, date.day);\n  }\n}\n\nexport function copyDateTime(date: CalendarDateTime): Mutable<CalendarDateTime> {\n  if (date.era) {\n    return new CalendarDateTime(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n  } else {\n    return new CalendarDateTime(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst EPOCH = 1721426; // 001/01/03 Julian C.E.\nexport function gregorianToJulianDay(era: string, year: number, month: number, day: number): number {\n  year = getExtendedYear(era, year);\n\n  let y1 = year - 1;\n  let monthOffset = -2;\n  if (month <= 2) {\n    monthOffset = 0;\n  } else if (isLeapYear(year)) {\n    monthOffset = -1;\n  }\n\n  return (\n    EPOCH -\n    1 +\n    365 * y1 +\n    Math.floor(y1 / 4) -\n    Math.floor(y1 / 100) +\n    Math.floor(y1 / 400) +\n    Math.floor((367 * month - 362) / 12 + monthOffset + day)\n  );\n}\n\nexport function isLeapYear(year: number): boolean {\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\nexport function getExtendedYear(era: string, year: number): number {\n  return era === 'BC' ? 1 - year : year;\n}\n\nexport function fromExtendedYear(year: number): [string, number] {\n  let era = 'AD';\n  if (year <= 0) {\n    era = 'BC';\n    year = 1 - year;\n  }\n\n  return [era, year];\n}\n\nconst daysInMonth = {\n  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n};\n\n/**\n * The Gregorian calendar is the most commonly used calendar system in the world. It supports two eras: BC, and AD.\n * Years always contain 12 months, and 365 or 366 days depending on whether it is a leap year.\n */\nexport class GregorianCalendar implements Calendar {\n  identifier = 'gregory';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let jd0 = jd;\n    let depoch = jd0 - EPOCH;\n    let quadricent = Math.floor(depoch / 146097);\n    let dqc = mod(depoch, 146097);\n    let cent = Math.floor(dqc / 36524);\n    let dcent = mod(dqc, 36524);\n    let quad = Math.floor(dcent / 1461);\n    let dquad = mod(dcent, 1461);\n    let yindex = Math.floor(dquad / 365);\n\n    let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n    let [era, year] = fromExtendedYear(extendedYear);\n    let yearDay = jd0 - gregorianToJulianDay(era, year, 1, 1);\n    let leapAdj = 2;\n    if (jd0 < gregorianToJulianDay(era, year, 3, 1)) {\n      leapAdj = 0;\n    } else if (isLeapYear(year)) {\n      leapAdj = 1;\n    }\n    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n    let day = jd0 - gregorianToJulianDay(era, year, month, 1) + 1;\n\n    return new CalendarDate(era, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return gregorianToJulianDay(date.era, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return daysInMonth[isLeapYear(date.year) ? 'leapyear' : 'standard'][date.month - 1];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 366 : 365;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getYearsInEra(date: AnyCalendarDate): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['BC', 'AD'];\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BC';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BC' ? 'AD' : 'BC';\n      date.year = 1 - date.year;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nexport const weekStartData = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AT: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BY: 1,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  HR: 1,\n  HU: 1,\n  IE: 1,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JO: 6,\n  KG: 1,\n  KW: 6,\n  KZ: 1,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MK: 1,\n  MN: 1,\n  MQ: 1,\n  MV: 5,\n  MY: 1,\n  NL: 1,\n  NO: 1,\n  NZ: 1,\n  OM: 6,\n  PL: 1,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SD: 6,\n  SE: 1,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SY: 6,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  UA: 1,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VN: 1,\n  XK: 1\n};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime} from './types';\nimport {CalendarDate, CalendarDateTime, ZonedDateTime} from './CalendarDate';\nimport {fromAbsolute, toAbsolute, toCalendar, toCalendarDate} from './conversion';\nimport {weekStartData} from './weekStartData';\n\ntype DateValue = CalendarDate | CalendarDateTime | ZonedDateTime;\n\n/** Returns whether the given dates occur on the same day, regardless of the time or calendar system. */\nexport function isSameDay(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, using the calendar system of the first date. */\nexport function isSameMonth(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, using the calendar system of the first date. */\nexport function isSameYear(a: DateValue, b: DateValue): boolean {\n  b = toCalendar(b, a.calendar);\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the given dates occur on the same day, and are of the same calendar system. */\nexport function isEqualDay(a: DateValue, b: DateValue): boolean {\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\n\n/** Returns whether the given dates occur in the same month, and are of the same calendar system. */\nexport function isEqualMonth(a: DateValue, b: DateValue): boolean {\n  a = startOfMonth(a);\n  b = startOfMonth(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\n\n/** Returns whether the given dates occur in the same year, and are of the same calendar system. */\nexport function isEqualYear(a: DateValue, b: DateValue): boolean {\n  a = startOfYear(a);\n  b = startOfYear(b);\n  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\n\n/** Returns whether the date is today in the given time zone. */\nexport function isToday(date: DateValue, timeZone: string): boolean {\n  return isSameDay(date, today(timeZone));\n}\n\n/**\n * Returns the day of week for the given date and locale. Days are numbered from zero to six,\n * where zero is the first day of the week in the given locale. For example, in the United States,\n * the first day of the week is Sunday, but in France it is Monday.\n */\nexport function getDayOfWeek(date: DateValue, locale: string): number {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1 - getWeekStart(locale)) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  return dayOfWeek;\n}\n\n/** Returns the current time in the given time zone. */\nexport function now(timeZone: string): ZonedDateTime {\n  return fromAbsolute(Date.now(), timeZone);\n}\n\n/** Returns today's date in the given time zone. */\nexport function today(timeZone: string): CalendarDate {\n  return toCalendarDate(now(timeZone));\n}\n\nexport function compareDate(a: AnyCalendarDate, b: AnyCalendarDate): number {\n  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\n\nexport function compareTime(a: AnyTime, b: AnyTime): number {\n  return timeToMs(a) - timeToMs(b);\n}\n\nfunction timeToMs(a: AnyTime): number {\n  return a.hour * 60 * 60 * 1000 + a.minute * 60 * 1000 + a.second * 1000 + a.millisecond;\n}\n\n/**\n * Returns the number of hours in the given date and time zone.\n * Usually this is 24, but it could be 23 or 25 if the date is on a daylight saving transition.\n */\nexport function getHoursInDay(a: CalendarDate, timeZone: string): number {\n  let ms = toAbsolute(a, timeZone);\n  let tomorrow = a.add({days: 1});\n  let tomorrowMs = toAbsolute(tomorrow, timeZone);\n  return (tomorrowMs - ms) / 3600000;\n}\n\nlet localTimeZone = null;\n\n/** Returns the time zone identifier for the current user. */\nexport function getLocalTimeZone(): string {\n  // TODO: invalidate this somehow?\n  if (localTimeZone == null) {\n    localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n  }\n\n  return localTimeZone;\n}\n\n/** Returns the first date of the month for the given date. */\nexport function startOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function startOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function startOfMonth(date: CalendarDate): CalendarDate;\nexport function startOfMonth(date: DateValue): DateValue;\nexport function startOfMonth(date: DateValue): DateValue {\n  // Use `subtract` instead of `set` so we don't get constrained in an era.\n  return date.subtract({days: date.day - 1});\n}\n\n/** Returns the last date of the month for the given date. */\nexport function endOfMonth(date: ZonedDateTime): ZonedDateTime;\nexport function endOfMonth(date: CalendarDateTime): CalendarDateTime;\nexport function endOfMonth(date: CalendarDate): CalendarDate;\nexport function endOfMonth(date: DateValue): DateValue;\nexport function endOfMonth(date: DateValue): DateValue {\n  return date.add({days: date.calendar.getDaysInMonth(date) - date.day});\n}\n\n/** Returns the first day of the year for the given date. */\nexport function startOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function startOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function startOfYear(date: CalendarDate): CalendarDate;\nexport function startOfYear(date: DateValue): DateValue;\nexport function startOfYear(date: DateValue): DateValue {\n  return startOfMonth(date.subtract({months: date.month - 1}));\n}\n\n/** Returns the last day of the year for the given date. */\nexport function endOfYear(date: ZonedDateTime): ZonedDateTime;\nexport function endOfYear(date: CalendarDateTime): CalendarDateTime;\nexport function endOfYear(date: CalendarDate): CalendarDate;\nexport function endOfYear(date: DateValue): DateValue;\nexport function endOfYear(date: DateValue): DateValue {\n  return endOfMonth(date.add({months: date.calendar.getMonthsInYear(date) - date.month}));\n}\n\nexport function getMinimumMonthInYear(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumMonthInYear) {\n    return date.calendar.getMinimumMonthInYear(date);\n  }\n\n  return 1;\n}\n\nexport function getMinimumDayInMonth(date: AnyCalendarDate) {\n  if (date.calendar.getMinimumDayInMonth) {\n    return date.calendar.getMinimumDayInMonth(date);\n  }\n\n  return 1;\n}\n\n/** Returns the first date of the week for the given date and locale. */\nexport function startOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function startOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function startOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function startOfWeek(date: DateValue, locale: string): DateValue;\nexport function startOfWeek(date: DateValue, locale: string): DateValue {\n  let dayOfWeek = getDayOfWeek(date, locale);\n  return date.subtract({days: dayOfWeek});\n}\n\n/** Returns the last date of the week for the given date and locale. */\nexport function endOfWeek(date: ZonedDateTime, locale: string): ZonedDateTime;\nexport function endOfWeek(date: CalendarDateTime, locale: string): CalendarDateTime;\nexport function endOfWeek(date: CalendarDate, locale: string): CalendarDate;\nexport function endOfWeek(date: DateValue, locale: string): DateValue {\n  return startOfWeek(date, locale).add({days: 6});\n}\n\nconst cachedRegions = new Map<string, string>();\n\nfunction getRegion(locale: string) {\n  // If the Intl.Locale API is available, use it to get the region for the locale.\n  // @ts-ignore\n  if (Intl.Locale) {\n    // Constructing an Intl.Locale is expensive, so cache the result.\n    let region = cachedRegions.get(locale);\n    if (!region) {\n      // @ts-ignore\n      region = new Intl.Locale(locale).maximize().region;\n      cachedRegions.set(locale, region);\n    }\n    return region;\n  }\n\n  // If not, just try splitting the string.\n  // If the second part of the locale string is 'u',\n  // then this is a unicode extension, so ignore it.\n  // Otherwise, it should be the region.\n  let part = locale.split('-')[1];\n  return part === 'u' ? null : part;\n}\n\nfunction getWeekStart(locale: string) {\n  // TODO: use Intl.Locale for this once browsers support the weekInfo property\n  // https://github.com/tc39/proposal-intl-locale-info\n  let region = getRegion(locale);\n  return weekStartData[region] || 0;\n}\n\n/** Returns the number of weeks in the given month and locale. */\nexport function getWeeksInMonth(date: DateValue, locale: string): number {\n  let days = date.calendar.getDaysInMonth(date);\n  return Math.ceil((getDayOfWeek(startOfMonth(date), locale) + days) / 7);\n}\n\n/** Returns the lesser of the two provider dates. */\nexport function minDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) <= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\n/** Returns the greater of the two provider dates. */\nexport function maxDate<A extends DateValue, B extends DateValue>(a: A, b: B): A | B {\n  if (a && b) {\n    return a.compare(b) >= 0 ? a : b;\n  }\n\n  return a || b;\n}\n\nconst WEEKEND_DATA = {\n  AF: [4, 5],\n  AE: [5, 6],\n  BH: [5, 6],\n  DZ: [5, 6],\n  EG: [5, 6],\n  IL: [5, 6],\n  IQ: [5, 6],\n  IR: [5, 5],\n  JO: [5, 6],\n  KW: [5, 6],\n  LY: [5, 6],\n  OM: [5, 6],\n  QA: [5, 6],\n  SA: [5, 6],\n  SD: [5, 6],\n  SY: [5, 6],\n  YE: [5, 6]\n};\n\n/** Returns whether the given date is on a weekend in the given locale. */\nexport function isWeekend(date: DateValue, locale: string): boolean {\n  let julian = date.calendar.toJulianDay(date);\n\n  // If julian is negative, then julian % 7 will be negative, so we adjust\n  // accordingly.  Julian day 0 is Monday.\n  let dayOfWeek = Math.ceil(julian + 1) % 7;\n  if (dayOfWeek < 0) {\n    dayOfWeek += 7;\n  }\n\n  let region = getRegion(locale);\n  // Use Intl.Locale for this once weekInfo is supported.\n  // https://github.com/tc39/proposal-intl-locale-info\n  let [start, end] = WEEKEND_DATA[region] || [6, 0];\n  return dayOfWeek === start || dayOfWeek === end;\n}\n\n/** Returns whether the given date is on a weekday in the given locale. */\nexport function isWeekday(date: DateValue, locale: string): boolean {\n  return !isWeekend(date, locale);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {getExtendedYear, GregorianCalendar} from './calendars/GregorianCalendar';\nimport {getLocalTimeZone} from './queries';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  let year = getExtendedYear(date.era, date.year);\n  return epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') {\n    return 0;\n  }\n\n  // Fast path: for local timezone, use native Date.\n  if (timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') {\n    return epochFromDate(dateTime);\n  }\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = getExtendedYear(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyCalendarDate, AnyTime, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, toAbsolute, toCalendar, toCalendarDateTime} from './conversion';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst ONE_HOUR = 3600000;\n\nexport function add(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function add(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime;\nexport function add(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n  let days = 'hour' in date ? addTimeFields(date, duration) : 0;\n\n  addYears(mutableDate, duration.years || 0);\n  if (mutableDate.calendar.balanceYearMonth) {\n    mutableDate.calendar.balanceYearMonth(mutableDate, date);\n  }\n\n  mutableDate.month += duration.months || 0;\n\n  balanceYearMonth(mutableDate);\n  constrainMonthDay(mutableDate);\n\n  mutableDate.day += (duration.weeks || 0) * 7;\n  mutableDate.day += duration.days || 0;\n  mutableDate.day += days;\n\n  balanceDay(mutableDate);\n\n  if (mutableDate.calendar.balanceDate) {\n    mutableDate.calendar.balanceDate(mutableDate);\n  }\n\n  // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n  // The behavior here is slightly different than when constraining in the `set` function in that\n  // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n  // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n  if (mutableDate.year < 1) {\n    mutableDate.year = 1;\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n  if (mutableDate.year > maxYear) {\n    let isInverseEra = mutableDate.calendar.isInverseEra?.(mutableDate);\n    mutableDate.year = maxYear;\n    mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n    mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  if (mutableDate.month < 1) {\n    mutableDate.month = 1;\n    mutableDate.day = 1;\n  }\n\n  let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n  if (mutableDate.month > maxMonth) {\n    mutableDate.month = maxMonth;\n    mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n  }\n\n  mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n  return mutableDate;\n}\n\nfunction addYears(date: Mutable<AnyCalendarDate>, years: number) {\n  if (date.calendar.isInverseEra?.(date)) {\n    years = -years;\n  }\n\n  date.year += years;\n}\n\nfunction balanceYearMonth(date: Mutable<AnyCalendarDate>) {\n  while (date.month < 1) {\n    addYears(date, -1);\n    date.month += date.calendar.getMonthsInYear(date);\n  }\n\n  let monthsInYear = 0;\n  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {\n    date.month -= monthsInYear;\n    addYears(date, 1);\n  }\n}\n\nfunction balanceDay(date: Mutable<AnyCalendarDate>) {\n  while (date.day < 1) {\n    date.month--;\n    balanceYearMonth(date);\n    date.day += date.calendar.getDaysInMonth(date);\n  }\n\n  while (date.day > date.calendar.getDaysInMonth(date)) {\n    date.day -= date.calendar.getDaysInMonth(date);\n    date.month++;\n    balanceYearMonth(date);\n  }\n}\n\nfunction constrainMonthDay(date: Mutable<AnyCalendarDate>) {\n  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\n\nexport function constrain(date: Mutable<AnyCalendarDate>) {\n  if (date.calendar.constrainDate) {\n    date.calendar.constrainDate(date);\n  }\n\n  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n  constrainMonthDay(date);\n}\n\nexport function invertDuration(duration: DateTimeDuration): DateTimeDuration {\n  let inverseDuration = {};\n  for (let key in duration) {\n    if (typeof duration[key] === 'number') {\n      inverseDuration[key] = -duration[key];\n    }\n  }\n\n  return inverseDuration;\n}\n\nexport function subtract(date: CalendarDateTime, duration: DateTimeDuration): CalendarDateTime;\nexport function subtract(date: CalendarDate, duration: DateDuration): CalendarDate;\nexport function subtract(date: CalendarDate | CalendarDateTime, duration: DateTimeDuration): CalendarDate | CalendarDateTime {\n  return add(date, invertDuration(duration));\n}\n\nexport function set(date: CalendarDateTime, fields: DateFields): CalendarDateTime;\nexport function set(date: CalendarDate, fields: DateFields): CalendarDate;\nexport function set(date: CalendarDate | CalendarDateTime, fields: DateFields) {\n  let mutableDate: Mutable<AnyCalendarDate> = date.copy();\n\n  if (fields.era != null) {\n    mutableDate.era = fields.era;\n  }\n\n  if (fields.year != null) {\n    mutableDate.year = fields.year;\n  }\n\n  if (fields.month != null) {\n    mutableDate.month = fields.month;\n  }\n\n  if (fields.day != null) {\n    mutableDate.day = fields.day;\n  }\n\n  constrain(mutableDate);\n  return mutableDate;\n}\n\nexport function setTime(value: CalendarDateTime, fields: TimeFields): CalendarDateTime;\nexport function setTime(value: Time, fields: TimeFields): Time;\nexport function setTime(value: Time | CalendarDateTime, fields: TimeFields) {\n  let mutableValue: Mutable<Time | CalendarDateTime> = value.copy();\n\n  if (fields.hour != null) {\n    mutableValue.hour = fields.hour;\n  }\n\n  if (fields.minute != null) {\n    mutableValue.minute = fields.minute;\n  }\n\n  if (fields.second != null) {\n    mutableValue.second = fields.second;\n  }\n\n  if (fields.millisecond != null) {\n    mutableValue.millisecond = fields.millisecond;\n  }\n\n  constrainTime(mutableValue);\n  return mutableValue;\n}\n\nfunction balanceTime(time: Mutable<AnyTime>): number {\n  time.second += Math.floor(time.millisecond / 1000);\n  time.millisecond = nonNegativeMod(time.millisecond, 1000);\n\n  time.minute += Math.floor(time.second / 60);\n  time.second = nonNegativeMod(time.second, 60);\n\n  time.hour += Math.floor(time.minute / 60);\n  time.minute = nonNegativeMod(time.minute, 60);\n\n  let days = Math.floor(time.hour / 24);\n  time.hour = nonNegativeMod(time.hour, 24);\n\n  return days;\n}\n\nexport function constrainTime(time: Mutable<AnyTime>) {\n  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n  time.second = Math.max(0, Math.min(time.second, 59));\n  time.minute = Math.max(0, Math.min(time.minute, 59));\n  time.hour = Math.max(0, Math.min(time.hour, 23));\n}\n\nfunction nonNegativeMod(a: number, b: number) {\n  let result = a % b;\n  if (result < 0) {\n    result += b;\n  }\n  return result;\n}\n\nfunction addTimeFields(time: Mutable<AnyTime>, duration: TimeDuration): number {\n  time.hour += duration.hours || 0;\n  time.minute += duration.minutes || 0;\n  time.second += duration.seconds || 0;\n  time.millisecond += duration.milliseconds || 0;\n  return balanceTime(time);\n}\n\nexport function addTime(time: Time, duration: TimeDuration): Time {\n  let res = time.copy();\n  addTimeFields(res, duration);\n  return res;\n}\n\nexport function subtractTime(time: Time, duration: TimeDuration): Time {\n  return addTime(time, invertDuration(duration));\n}\n\nexport function cycleDate(value: CalendarDateTime, field: DateField, amount: number, options?: CycleOptions): CalendarDateTime;\nexport function cycleDate(value: CalendarDate, field: DateField, amount: number, options?: CycleOptions): CalendarDate;\nexport function cycleDate(value: CalendarDate | CalendarDateTime, field: DateField, amount: number, options?: CycleOptions) {\n  let mutable: Mutable<CalendarDate | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'era': {\n      let eras = value.calendar.getEras();\n      let eraIndex = eras.indexOf(value.era);\n      if (eraIndex < 0) {\n        throw new Error('Invalid era: ' + value.era);\n      }\n      eraIndex = cycleValue(eraIndex, amount, 0, eras.length - 1, options?.round);\n      mutable.era = eras[eraIndex];\n\n      // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n      constrain(mutable);\n      break;\n    }\n    case 'year': {\n      if (mutable.calendar.isInverseEra?.(mutable)) {\n        amount = -amount;\n      }\n\n      // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n      mutable.year = cycleValue(value.year, amount, -Infinity, 9999, options?.round);\n      if (mutable.year === -Infinity) {\n        mutable.year = 1;\n      }\n\n      if (mutable.calendar.balanceYearMonth) {\n        mutable.calendar.balanceYearMonth(mutable, value);\n      }\n      break;\n    }\n    case 'month':\n      mutable.month = cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options?.round);\n      break;\n    case 'day':\n      mutable.day = cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  if (value.calendar.balanceDate) {\n    value.calendar.balanceDate(mutable);\n  }\n\n  constrain(mutable);\n  return mutable;\n}\n\nexport function cycleTime(value: CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime;\nexport function cycleTime(value: Time, field: TimeField, amount: number, options?: CycleTimeOptions): Time;\nexport function cycleTime(value: Time | CalendarDateTime, field: TimeField, amount: number, options?: CycleTimeOptions) {\n  let mutable: Mutable<Time | CalendarDateTime> = value.copy();\n\n  switch (field) {\n    case 'hour': {\n      let hours = value.hour;\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = hours >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n      mutable.hour = cycleValue(hours, amount, min, max, options?.round);\n      break;\n    }\n    case 'minute':\n      mutable.minute = cycleValue(value.minute, amount, 0, 59, options?.round);\n      break;\n    case 'second':\n      mutable.second = cycleValue(value.second, amount, 0, 59, options?.round);\n      break;\n    case 'millisecond':\n      mutable.millisecond = cycleValue(value.millisecond, amount, 0, 999, options?.round);\n      break;\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n\n  return mutable;\n}\n\nfunction cycleValue(value: number, amount: number, min: number, max: number, round = false) {\n  if (round) {\n    value += Math.sign(amount);\n\n    if (value < min) {\n      value = max;\n    }\n\n    let div = Math.abs(amount);\n    if (amount > 0) {\n      value = Math.ceil(value / div) * div;\n    } else {\n      value = Math.floor(value / div) * div;\n    }\n\n    if (value > max) {\n      value = min;\n    }\n  } else {\n    value += amount;\n    if (value < min) {\n      value = max - (min - value - 1);\n    } else if (value > max) {\n      value = min + (value - max - 1);\n    }\n  }\n\n  return value;\n}\n\nexport function addZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  let ms: number;\n  if ((duration.years != null && duration.years !== 0) || (duration.months != null && duration.months !== 0) || (duration.days != null && duration.days !== 0)) {\n    let res = add(toCalendarDateTime(dateTime), {\n      years: duration.years,\n      months: duration.months,\n      days: duration.days\n    });\n\n    // Changing the date may change the timezone offset, so we need to recompute\n    // using the 'compatible' disambiguation.\n    ms = toAbsolute(res, dateTime.timeZone);\n  } else {\n    // Otherwise, preserve the offset of the original date.\n    ms = epochFromDate(dateTime) - dateTime.offset;\n  }\n\n  // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n  // For example, adding one hour during a DST transition may result in the hour field staying the same or\n  // skipping an hour. This results in the offset field changing value instead of the specified field.\n  ms += duration.milliseconds || 0;\n  ms += (duration.seconds || 0) * 1000;\n  ms += (duration.minutes || 0) * 60 * 1000;\n  ms += (duration.hours || 0) * 60 * 60 * 1000;\n\n  let res = fromAbsolute(ms, dateTime.timeZone);\n  return toCalendar(res, dateTime.calendar);\n}\n\nexport function subtractZoned(dateTime: ZonedDateTime, duration: DateTimeDuration): ZonedDateTime {\n  return addZoned(dateTime, invertDuration(duration));\n}\n\nexport function cycleZoned(dateTime: ZonedDateTime, field: DateField | TimeField, amount: number, options?: CycleTimeOptions): ZonedDateTime {\n  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n  switch (field) {\n    case 'hour': {\n      let min = 0;\n      let max = 23;\n      if (options?.hourCycle === 12) {\n        let isPM = dateTime.hour >= 12;\n        min = isPM ? 12 : 0;\n        max = isPM ? 23 : 11;\n      }\n\n      // The minimum and maximum hour may be affected by daylight saving time.\n      // For example, it might jump forward at midnight, and skip 1am.\n      // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n      // the possible absolute times for the min and max, and find the maximum range\n      // that is within the current day.\n      let plainDateTime = toCalendarDateTime(dateTime);\n      let minDate = toCalendar(setTime(plainDateTime, {hour: min}), new GregorianCalendar());\n      let minAbsolute = [toAbsolute(minDate, dateTime.timeZone, 'earlier'), toAbsolute(minDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === minDate.day)[0];\n\n      let maxDate = toCalendar(setTime(plainDateTime, {hour: max}), new GregorianCalendar());\n      let maxAbsolute = [toAbsolute(maxDate, dateTime.timeZone, 'earlier'), toAbsolute(maxDate, dateTime.timeZone, 'later')]\n        .filter(ms => fromAbsolute(ms, dateTime.timeZone).day === maxDate.day).pop();\n\n      // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n      // This is done in hours from the Unix epoch so that cycleValue works correctly,\n      // and then converted back to milliseconds.\n      let ms = epochFromDate(dateTime) - dateTime.offset;\n      let hours = Math.floor(ms / ONE_HOUR);\n      let remainder = ms % ONE_HOUR;\n      ms = cycleValue(\n        hours,\n        amount,\n        Math.floor(minAbsolute / ONE_HOUR),\n        Math.floor(maxAbsolute / ONE_HOUR),\n        options?.round\n      ) * ONE_HOUR + remainder;\n\n      // Now compute the new timezone offset, and convert the absolute time back to local time.\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    case 'minute':\n    case 'second':\n    case 'millisecond':\n      // @ts-ignore\n      return cycleTime(dateTime, field, amount, options);\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day': {\n      let res = cycleDate(toCalendarDateTime(dateTime), field, amount, options);\n      let ms = toAbsolute(res, dateTime.timeZone);\n      return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n    }\n    default:\n      throw new Error('Unsupported field ' + field);\n  }\n}\n\nexport function setZoned(dateTime: ZonedDateTime, fields: DateFields & TimeFields, disambiguation?: Disambiguation): ZonedDateTime {\n  // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n  let plainDateTime = toCalendarDateTime(dateTime);\n  let res = setTime(set(plainDateTime, fields), fields);\n\n  // If the resulting plain date time values are equal, return the original time.\n  // We don't want to change the offset when setting the time to the same value.\n  if (res.compare(plainDateTime) === 0) {\n    return dateTime;\n  }\n\n  let ms = toAbsolute(res, dateTime.timeZone, disambiguation);\n  return toCalendar(fromAbsolute(ms, dateTime.timeZone), dateTime.calendar);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AnyDateTime, Disambiguation} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {epochFromDate, fromAbsolute, possibleAbsolutes, toAbsolute, toCalendar, toCalendarDateTime, toTimeZone} from './conversion';\nimport {getLocalTimeZone} from './queries';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {Mutable} from './utils';\n\nconst TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::(\\d{2}))?)?\\[(.*?)\\]$/;\nconst ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::(\\d{2}))?)|Z)$/;\n\n/** Parses an ISO 8601 time string. */\nexport function parseTime(value: string): Time {\n  let m = value.match(TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 time string: ' + value);\n  }\n\n  return new Time(\n    parseNumber(m[1], 0, 23),\n    m[2] ? parseNumber(m[2], 0, 59) : 0,\n    m[3] ? parseNumber(m[3], 0, 59) : 0,\n    m[4] ? parseNumber(m[4], 0, Infinity) * 1000 : 0\n  );\n}\n\n/** Parses an ISO 8601 date string, with no time components. */\nexport function parseDate(value: string): CalendarDate {\n  let m = value.match(DATE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date string: ' + value);\n  }\n\n  let date: Mutable<CalendarDate> = new CalendarDate(\n    parseNumber(m[1], 0, 9999),\n    parseNumber(m[2], 1, 12),\n    1\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDate;\n}\n\n/** Parses an ISO 8601 date and time string, with no time zone. */\nexport function parseDateTime(value: string): CalendarDateTime {\n  let m = value.match(DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<CalendarDateTime> = new CalendarDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n  return date as CalendarDateTime;\n}\n\n/**\n * Parses an ISO 8601 date and time string with a time zone extension and optional UTC offset\n * (e.g. \"2021-11-07T00:45[America/Los_Angeles]\" or \"2021-11-07T00:45-07:00[America/Los_Angeles]\").\n * Ambiguous times due to daylight saving time transitions are resolved according to the `disambiguation`\n * parameter.\n */\nexport function parseZonedDateTime(value: string, disambiguation?: Disambiguation): ZonedDateTime {\n  let m = value.match(ZONED_DATE_TIME_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    m[10],\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  let plainDateTime = toCalendarDateTime(date as ZonedDateTime);\n\n  let ms: number;\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n    ms = epochFromDate(date as ZonedDateTime) - date.offset;\n\n    // Validate offset against parsed date.\n    let absolutes = possibleAbsolutes(plainDateTime, date.timeZone);\n    if (!absolutes.includes(ms)) {\n      throw new Error(`Offset ${offsetToString(date.offset)} is invalid for ${dateTimeToString(date)} in ${date.timeZone}`);\n    }\n  } else {\n    // Convert to absolute and back to fix invalid times due to DST.\n    ms = toAbsolute(toCalendarDateTime(plainDateTime), date.timeZone, disambiguation);\n  }\n\n  return fromAbsolute(ms, date.timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the provided time zone.\n */\nexport function parseAbsolute(value: string, timeZone: string): ZonedDateTime {\n  let m = value.match(ABSOLUTE_RE);\n  if (!m) {\n    throw new Error('Invalid ISO 8601 date time string: ' + value);\n  }\n\n  let date: Mutable<ZonedDateTime> = new ZonedDateTime(\n    parseNumber(m[1], 1, 9999),\n    parseNumber(m[2], 1, 12),\n    1,\n    timeZone,\n    0,\n    m[4] ? parseNumber(m[4], 0, 23) : 0,\n    m[5] ? parseNumber(m[5], 0, 59) : 0,\n    m[6] ? parseNumber(m[6], 0, 59) : 0,\n    m[7] ? parseNumber(m[7], 0, Infinity) * 1000 : 0\n  );\n\n  date.day = parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n\n  if (m[8]) {\n    date.offset = parseNumber(m[8], -23, 23) * 60 * 60 * 1000 + parseNumber(m[9] ?? '0', 0, 59) * 60 * 1000;\n  }\n\n  return toTimeZone(date as ZonedDateTime, timeZone);\n}\n\n/**\n * Parses an ISO 8601 date and time string with a UTC offset (e.g. \"2021-11-07T07:45:00Z\"\n * or \"2021-11-07T07:45:00-07:00\"). The result is converted to the user's local time zone.\n */\nexport function parseAbsoluteToLocal(value: string): ZonedDateTime {\n  return parseAbsolute(value, getLocalTimeZone());\n}\n\nfunction parseNumber(value: string, min: number, max: number) {\n  let val = Number(value);\n  if (val < min || val > max) {\n    throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n  }\n\n  return val;\n}\n\nexport function timeToString(time: Time): string {\n  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;\n}\n\nexport function dateToString(date: CalendarDate): string {\n  let gregorianDate = toCalendar(date, new GregorianCalendar());\n  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;\n}\n\nexport function dateTimeToString(date: AnyDateTime): string {\n  // @ts-ignore\n  return `${dateToString(date)}T${timeToString(date)}`;\n}\n\nfunction offsetToString(offset: number) {\n  let sign = Math.sign(offset) < 0 ? '-' : '+';\n  offset = Math.abs(offset);\n  let offsetHours = Math.floor(offset / (60 * 60 * 1000));\n  let offsetMinutes = (offset % (60 * 60 * 1000)) / (60 * 1000);\n  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;\n}\n\nexport function zonedDateTimeToString(date: ZonedDateTime): string {\n  return `${dateTimeToString(date)}${offsetToString(date.offset)}[${date.timeZone}]`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {add, addTime, addZoned, constrain, constrainTime, cycleDate, cycleTime, cycleZoned, set, setTime, setZoned, subtract, subtractTime, subtractZoned} from './manipulation';\nimport {AnyCalendarDate, AnyTime, Calendar, CycleOptions, CycleTimeOptions, DateDuration, DateField, DateFields, DateTimeDuration, Disambiguation, TimeDuration, TimeField, TimeFields} from './types';\nimport {compareDate, compareTime} from './queries';\nimport {dateTimeToString, dateToString, timeToString, zonedDateTimeToString} from './string';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {toCalendarDateTime, toDate, toZoned, zonedToDate} from './conversion';\n\nfunction shiftArgs(args: any[]) {\n  let calendar: Calendar = typeof args[0] === 'object'\n    ? args.shift()\n    : new GregorianCalendar();\n\n  let era: string;\n  if (typeof args[0] === 'string') {\n    era = args.shift();\n  } else {\n    let eras = calendar.getEras();\n    era = eras[eras.length - 1];\n  }\n\n  let year = args.shift();\n  let month = args.shift();\n  let day = args.shift();\n\n  return [calendar, era, year, month, day];\n}\n\n/** A CalendarDate represents a date without any time components in a specific calendar system. */\nexport class CalendarDate {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n  // If that behavior is desired, use the AnyCalendarDate interface instead.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n\n  constructor(year: number, month: number, day: number);\n  constructor(era: string, year: number, month: number, day: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDate {\n    if (this.era) {\n      return new CalendarDate(this.calendar, this.era, this.year, this.month, this.day);\n    } else {\n      return new CalendarDate(this.calendar, this.year, this.month, this.day);\n    }\n  }\n\n  /** Returns a new `CalendarDate` with the given duration added to it. */\n  add(duration: DateDuration): CalendarDate {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given duration subtracted from it. */\n  subtract(duration: DateDuration): CalendarDate {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields): CalendarDate {\n    return set(this, fields);\n  }\n\n  /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField, amount: number, options?: CycleOptions): CalendarDate {\n    return cycleDate(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */\n  toDate(timeZone: string): Date {\n    return toDate(this, timeZone);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: AnyCalendarDate): number {\n    return compareDate(this, b);\n  }\n}\n\n/** A Time represents a clock time without any date components. */\nexport class Time {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The hour, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(\n    hour: number = 0,\n    minute: number = 0,\n    second: number = 0,\n    millisecond: number = 0\n  ) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond;\n    constrainTime(this);\n  }\n\n  /** Returns a copy of this time. */\n  copy(): Time {\n    return new Time(this.hour, this.minute, this.second, this.millisecond);\n  }\n\n  /** Returns a new `Time` with the given duration added to it. */\n  add(duration: TimeDuration) {\n    return addTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given duration subtracted from it. */\n  subtract(duration: TimeDuration) {\n    return subtractTime(this, duration);\n  }\n\n  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: TimeFields) {\n    return setTime(this, fields);\n  }\n\n  /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleTime(this, field, amount, options);\n  }\n\n  /** Converts the time to an ISO 8601 formatted string. */\n  toString() {\n    return timeToString(this);\n  }\n\n  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */\n  compare(b: AnyTime) {\n    return compareTime(this, b);\n  }\n}\n\n/** A CalendarDateTime represents a date and time without a time zone, in a specific calendar system. */\nexport class CalendarDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n\n  constructor(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): CalendarDateTime {\n    if (this.era) {\n      return new CalendarDateTime(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new CalendarDateTime(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration): CalendarDateTime {\n    return add(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration): CalendarDateTime {\n    return subtract(this, duration);\n  }\n\n  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields): CalendarDateTime {\n    return set(setTime(this, fields), fields);\n  }\n\n  /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions): CalendarDateTime {\n    switch (field) {\n      case 'era':\n      case 'year':\n      case 'month':\n      case 'day':\n        return cycleDate(this, field, amount, options);\n      default:\n        return cycleTime(this, field, amount, options);\n    }\n  }\n\n  /** Converts the date to a native JavaScript Date object in the given time zone. */\n  toDate(timeZone: string, disambiguation?: Disambiguation): Date {\n    return toDate(this, timeZone, disambiguation);\n  }\n\n  /** Converts the date to an ISO 8601 formatted string. */\n  toString(): string {\n    return dateTimeToString(this);\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime): number {\n    let res = compareDate(this, b);\n    if (res === 0) {\n      return compareTime(this, toCalendarDateTime(b));\n    }\n\n    return res;\n  }\n}\n\n/** A ZonedDateTime represents a date and time in a specific time zone and calendar system. */\nexport class ZonedDateTime {\n  // This prevents TypeScript from allowing other types with the same fields to match.\n  #type;\n  /** The calendar system associated with this date, e.g. Gregorian. */\n  public readonly calendar: Calendar;\n  /** The calendar era for this date, e.g. \"BC\" or \"AD\". */\n  public readonly era: string;\n  /** The year of this date within the era. */\n  public readonly year: number;\n  /**\n   * The month number within the year. Note that some calendar systems such as Hebrew\n   * may have a variable number of months per year. Therefore, month numbers may not\n   * always correspond to the same month names in different years.\n   */\n  public readonly month: number;\n  /** The day number within the month. */\n  public readonly day: number;\n  /** The hour in the day, numbered from 0 to 23. */\n  public readonly hour: number;\n  /** The minute in the hour. */\n  public readonly minute: number;\n  /** The second in the minute. */\n  public readonly second: number;\n  /** The millisecond in the second. */\n  public readonly millisecond: number;\n  /** The IANA time zone identifier that this date and time is represented in. */\n  public readonly timeZone: string;\n  /** The UTC offset for this time, in seconds. */\n  public readonly offset: number;\n\n  constructor(year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(calendar: Calendar, era: string, year: number, month: number, day: number, timeZone: string, offset: number, hour?: number, minute?: number, second?: number, millisecond?: number);\n  constructor(...args: any[]) {\n    let [calendar, era, year, month, day] = shiftArgs(args);\n    let timeZone = args.shift();\n    let offset = args.shift();\n    this.calendar = calendar;\n    this.era = era;\n    this.year = year;\n    this.month = month;\n    this.day = day;\n    this.timeZone = timeZone;\n    this.offset = offset;\n    this.hour = args.shift() || 0;\n    this.minute = args.shift() || 0;\n    this.second = args.shift() || 0;\n    this.millisecond = args.shift() || 0;\n\n    constrain(this);\n  }\n\n  /** Returns a copy of this date. */\n  copy(): ZonedDateTime {\n    if (this.era) {\n      return new ZonedDateTime(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    } else {\n      return new ZonedDateTime(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration added to it. */\n  add(duration: DateTimeDuration) {\n    return addZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */\n  subtract(duration: DateTimeDuration) {\n    return subtractZoned(this, duration);\n  }\n\n  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */\n  set(fields: DateFields & TimeFields, disambiguation?: Disambiguation) {\n    return setZoned(this, fields, disambiguation);\n  }\n\n  /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */\n  cycle(field: DateField | TimeField, amount: number, options?: CycleTimeOptions) {\n    return cycleZoned(this, field, amount, options);\n  }\n\n  /** Converts the date to a native JavaScript Date object. */\n  toDate() {\n    return zonedToDate(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */\n  toString() {\n    return zonedDateTimeToString(this);\n  }\n\n   /** Converts the date to an ISO 8601 formatted string in UTC. */\n  toAbsoluteString() {\n    return this.toDate().toISOString();\n  }\n\n  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */\n  compare(b: CalendarDate | CalendarDateTime | ZonedDateTime) {\n    // TODO: Is this a bad idea??\n    return this.toDate().getTime() - toZoned(b, this.timeZone).toDate().getTime();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst ERA_START_DATES = [[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]];\nconst ERA_END_DATES = [[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]];\nconst ERA_ADDENDS = [1867, 1911, 1925, 1988, 2018];\nconst ERA_NAMES = ['meiji', 'taisho', 'showa', 'heisei', 'reiwa'];\n\nfunction findEraFromGregorianDate(date: AnyCalendarDate) {\n  const idx = ERA_START_DATES.findIndex(([year, month, day]) => {\n    if (date.year < year) {\n      return true;\n    }\n\n    if (date.year === year && date.month < month) {\n      return true;\n    }\n\n    if (date.year === year && date.month === month && date.day < day) {\n      return true;\n    }\n\n    return false;\n  });\n\n  if (idx === -1) {\n    return ERA_START_DATES.length - 1;\n  }\n\n  if (idx === 0) {\n    return 0;\n  }\n\n  return idx - 1;\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let eraAddend = ERA_ADDENDS[ERA_NAMES.indexOf(date.era)];\n  if (!eraAddend) {\n    throw new Error('Unknown era: ' + date.era);\n  }\n\n  return new CalendarDate(\n    date.year + eraAddend,\n    date.month,\n    date.day\n  );\n}\n\n/**\n * The Japanese calendar is based on the Gregorian calendar, but with eras for the reign of each Japanese emperor.\n * Whenever a new emperor ascends to the throne, a new era begins and the year starts again from 1.\n * Note that eras before 1868 (Gregorian) are not currently supported by this implementation.\n */\nexport class JapaneseCalendar extends GregorianCalendar {\n  identifier = 'japanese';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let era = findEraFromGregorianDate(date);\n\n    return new CalendarDate(\n      this,\n      ERA_NAMES[era],\n      date.year - ERA_ADDENDS[era],\n      date.month,\n      date.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let gregorianDate = toGregorian(date);\n    let era = findEraFromGregorianDate(gregorianDate);\n\n    if (ERA_NAMES[era] !== date.era) {\n      date.era = ERA_NAMES[era];\n      date.year = gregorianDate.year - ERA_ADDENDS[era];\n    }\n\n    // Constrain in case we went before the first supported era.\n    this.constrainDate(date);\n  }\n\n  constrainDate(date: Mutable<AnyCalendarDate>) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    let end = ERA_END_DATES[idx];\n    if (end != null) {\n      let [endYear, endMonth, endDay] = end;\n\n      // Constrain the year to the maximum possible value in the era.\n      // Then constrain the month and day fields within that.\n      let maxYear = endYear - ERA_ADDENDS[idx];\n      date.year = Math.max(1, Math.min(maxYear, date.year));\n      if (date.year === maxYear) {\n        date.month = Math.min(endMonth, date.month);\n\n        if (date.month === endMonth) {\n          date.day = Math.min(endDay, date.day);\n        }\n      }\n\n      if (date.year === 1) {\n        let [, startMonth, startDay] = ERA_START_DATES[idx];\n        date.month = Math.max(startMonth, date.month);\n\n        if (date.month === startMonth) {\n          date.day = Math.max(startDay, date.day);\n        }\n      }\n    }\n  }\n\n  getEras() {\n    return ERA_NAMES;\n  }\n\n  getYearsInEra(date: AnyCalendarDate): number {\n    // Get the number of years in the era, taking into account the date's month and day fields.\n    let era = ERA_NAMES.indexOf(date.era);\n    let next = ERA_START_DATES[era + 1];\n    if (next == null) {\n      return 9999;\n    }\n\n    let cur = ERA_START_DATES[era];\n    let years = next[0] - cur[0];\n\n    if (date.month < next[1] || (date.month === next[1] && date.day < next[2])) {\n      years++;\n    }\n\n    return years;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  getMinimumMonthInYear(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start ? start[1] : 1;\n  }\n\n  getMinimumDayInMonth(date: AnyCalendarDate): number {\n    let start = getMinimums(date);\n    return start && date.month === start[1] ? start[2] : 1;\n  }\n}\n\nfunction getMinimums(date: AnyCalendarDate) {\n  if (date.year === 1) {\n    let idx = ERA_NAMES.indexOf(date.era);\n    return ERA_START_DATES[idx];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\n\nconst BUDDHIST_ERA_START = -543;\n\n/**\n * The Buddhist calendar is the same as the Gregorian calendar, but counts years\n * starting from the birth of Buddha in 543 BC (Gregorian). It supports only one\n * era, identified as 'BE'.\n */\nexport class BuddhistCalendar extends GregorianCalendar {\n  identifier = 'buddhist';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let gregorianDate = super.fromJulianDay(jd);\n    let year = getExtendedYear(gregorianDate.era, gregorianDate.year);\n    return new CalendarDate(\n      this,\n      year - BUDDHIST_ERA_START,\n      gregorianDate.month,\n      gregorianDate.day\n    );\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['BE'];\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n\n  balanceDate() {}\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(date.year + BUDDHIST_ERA_START);\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, getExtendedYear, GregorianCalendar} from './GregorianCalendar';\nimport {Mutable} from '../utils';\n\nconst TAIWAN_ERA_START = 1911;\n\nfunction gregorianYear(date: AnyCalendarDate) {\n  return date.era === 'minguo'\n    ? date.year + TAIWAN_ERA_START\n    : 1 - date.year + TAIWAN_ERA_START;\n}\n\nfunction gregorianToTaiwan(year: number): [string, number] {\n  let y = year - TAIWAN_ERA_START;\n  if (y > 0) {\n    return ['minguo', y];\n  } else {\n    return ['before_minguo', 1 - y];\n  }\n}\n\n/**\n * The Taiwanese calendar is the same as the Gregorian calendar, but years\n * are numbered starting from 1912 (Gregorian). Two eras are supported:\n * 'before_minguo' and 'minguo'.\n */\nexport class TaiwanCalendar extends GregorianCalendar {\n  identifier = 'roc'; // Republic of China\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = super.fromJulianDay(jd);\n    let extendedYear = getExtendedYear(date.era, date.year);\n    let [era, year] = gregorianToTaiwan(extendedYear);\n    return new CalendarDate(this, era, year, date.month, date.day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return super.toJulianDay(toGregorian(date));\n  }\n\n  getEras() {\n    return ['before_minguo', 'minguo'];\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    let [era, year] = gregorianToTaiwan(gregorianYear(date));\n    date.era = era;\n    date.year = year;\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'before_minguo';\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return super.getDaysInMonth(toGregorian(date));\n  }\n}\n\nfunction toGregorian(date: AnyCalendarDate) {\n  let [era, year] = fromExtendedYear(gregorianYear(date));\n  return new CalendarDate(\n    era,\n    year,\n    date.month,\n    date.day\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\n\nfunction isLeapYear(year: number): boolean {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n\n  return mod((y1 + 38) * 31, 128) < 31;\n}\n\nfunction persianToJulianDay(year: number, month: number, day: number): number {\n  let y0 = year > 0 ? year - 474 : year - 473;\n  let y1 = mod(y0, 2820) + 474;\n  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n\n  return (\n    PERSIAN_EPOCH -\n    1 +\n    1029983 * Math.floor(y0 / 2820) +\n    365 * (y1 - 1) +\n    Math.floor((31 * y1 - 5) / 128) +\n    offset +\n    day\n  );\n}\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d0 = jd - persianToJulianDay(475, 1, 1);\n    let n2820 = Math.floor(d0 / 1029983);\n    let d1 = mod(d0, 1029983);\n    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n    let year = 474 + 2820 * n2820 + y2820;\n    if (year <= 0) {\n      year--;\n    }\n\n    let yDay = jd - persianToJulianDay(year, 1, 1) + 1;\n    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n    let day = jd - persianToJulianDay(year, month, 1) + 1;\n\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    return persianToJulianDay(date.year, date.month, date.day);\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    return isLeapYear(date.year) ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {fromExtendedYear, GregorianCalendar, gregorianToJulianDay, isLeapYear} from './GregorianCalendar';\n\n// Starts in 78 AD,\nconst INDIAN_ERA_START = 78;\n\n// The Indian year starts 80 days later than the Gregorian year.\nconst INDIAN_YEAR_START = 80;\n\n/**\n * The Indian National Calendar is similar to the Gregorian calendar, but with\n * years numbered since the Saka era in 78 AD (Gregorian). There are 12 months\n * in each year, with either 30 or 31 days. Only one era identifier is supported: 'saka'.\n */\nexport class IndianCalendar extends GregorianCalendar {\n  identifier = 'indian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    // Gregorian date for Julian day\n    let date = super.fromJulianDay(jd);\n\n    // Year in Saka era\n    let indianYear = date.year - INDIAN_ERA_START;\n\n    // Day number in Gregorian year (starting from 0)\n    let yDay = jd - gregorianToJulianDay(date.era, date.year, 1, 1);\n\n    let leapMonth: number;\n    if (yDay < INDIAN_YEAR_START) {\n      //  Day is at the end of the preceding Saka year\n      indianYear--;\n\n      // Days in leapMonth this year, previous Gregorian year\n      leapMonth = isLeapYear(date.year - 1) ? 31 : 30;\n      yDay += leapMonth + (31 * 5) + (30 * 3) + 10;\n    } else {\n      // Days in leapMonth this year\n      leapMonth = isLeapYear(date.year) ? 31 : 30;\n      yDay -= INDIAN_YEAR_START;\n    }\n\n    let indianMonth: number;\n    let indianDay: number;\n    if (yDay < leapMonth) {\n      indianMonth = 1;\n      indianDay = yDay + 1;\n    } else {\n      let mDay = yDay - leapMonth;\n      if (mDay < (31 * 5)) {\n        indianMonth = Math.floor(mDay / 31) + 2;\n        indianDay = (mDay % 31) + 1;\n      } else {\n        mDay -= 31 * 5;\n        indianMonth = Math.floor(mDay / 30) + 7;\n        indianDay = (mDay % 30) + 1;\n      }\n    }\n\n    return new CalendarDate(this, indianYear, indianMonth, indianDay);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let extendedYear = date.year + INDIAN_ERA_START;\n    let [era, year] = fromExtendedYear(extendedYear);\n\n    let leapMonth: number;\n    let jd: number;\n    if (isLeapYear(year)) {\n      leapMonth = 31;\n      jd = gregorianToJulianDay(era, year, 3, 21);\n    } else {\n      leapMonth = 30;\n      jd = gregorianToJulianDay(era, year, 3, 22);\n    }\n\n    if (date.month === 1) {\n      return jd + date.day - 1;\n    }\n\n    jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n\n    if (date.month >= 8) {\n      jd += (date.month - 7) * 30;\n    }\n\n    jd += date.day - 1;\n    return jd;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month === 1 && isLeapYear(date.year + INDIAN_ERA_START)) {\n      return 31;\n    }\n\n    if (date.month >= 2 && date.month <= 6) {\n      return 31;\n    }\n\n    return 30;\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['saka'];\n  }\n\n  balanceDate() {}\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\n\nconst CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst UMALQURA_YEAR_START = 1300;\nconst UMALQURA_YEAR_END = 1600;\nconst UMALQURA_START_DAYS = 460322;\n\nfunction islamicToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return day +\n    Math.ceil(29.5 * (month - 1)) +\n    (year - 1) * 354 +\n    Math.floor((3 + 11 * year) / 30) +\n    epoch - 1;\n}\n\nfunction julianDayToIslamic(calendar: Calendar, epoch: number, jd: number) {\n  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n  let month = Math.min(12, Math.ceil((jd - (29 + islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n  let day = jd - islamicToJulianDay(epoch, year, month, 1) + 1;\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction isLeapYear(year: number): boolean {\n  return (14 + 11 * year) % 30 < 11;\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The civil variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Friday, July 16 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicCivilCalendar implements Calendar {\n  identifier = 'islamic-civil';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, CIVIL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(CIVIL_EPOC, date.year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let length = 29 + date.month % 2;\n    if (date.month === 12 && isLeapYear(date.year)) {\n      length++;\n    }\n\n    return length;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 355 : 354;\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AH'];\n  }\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The tabular variant uses simple arithmetic rules rather than astronomical calculations to approximate\n * the traditional calendar, which is based on sighting of the crescent moon. It uses Thursday, July 15 622 CE (Julian) as the epoch.\n * Each year has 12 months, with either 354 or 355 days depending on whether it is a leap year.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicTabularCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-tbla';\n\n  fromJulianDay(jd: number): CalendarDate {\n    return julianDayToIslamic(this, ASTRONOMICAL_EPOC, jd);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    return islamicToJulianDay(ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n  }\n}\n\n// Generated by scripts/generate-umalqura.js\nconst UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';\nlet UMALQURA_MONTHLENGTH: Uint16Array;\nlet UMALQURA_YEAR_START_TABLE: Uint32Array;\n\nfunction umalquraYearStart(year: number): number {\n  return UMALQURA_START_DAYS + UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\nfunction umalquraMonthLength(year: number, month: number): number {\n  let idx = (year - UMALQURA_YEAR_START);\n  let mask = (0x01 << (11 - (month - 1)));\n  if ((UMALQURA_MONTHLENGTH[idx] & mask) === 0) {\n    return 29;\n  } else {\n    return 30;\n  }\n}\n\nfunction umalquraMonthStart(year: number, month: number): number {\n  let day = umalquraYearStart(year);\n  for (let i = 1; i < month; i++) {\n    day += umalquraMonthLength(year, i);\n  }\n  return day;\n}\n\nfunction umalquraYearLength(year: number): number {\n  return UMALQURA_YEAR_START_TABLE[year + 1 - UMALQURA_YEAR_START] - UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START];\n}\n\n/**\n * The Islamic calendar, also known as the \"Hijri\" calendar, is used throughout much of the Arab world.\n * The Umalqura variant is primarily used in Saudi Arabia. It is a lunar calendar, based on astronomical\n * calculations that predict the sighting of a crescent moon. Month and year lengths vary between years\n * depending on these calculations.\n * Learn more about the available Islamic calendars [here](https://cldr.unicode.org/development/development-process/design-proposals/islamic-calendar-types).\n */\nexport class IslamicUmalquraCalendar extends IslamicCivilCalendar {\n  identifier = 'islamic-umalqura';\n\n  constructor() {\n    super();\n    if (!UMALQURA_MONTHLENGTH) {\n      UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob(UMALQURA_DATA), c => c.charCodeAt(0)).buffer);\n    }\n\n    if (!UMALQURA_YEAR_START_TABLE) {\n      UMALQURA_YEAR_START_TABLE = new Uint32Array(UMALQURA_YEAR_END - UMALQURA_YEAR_START + 1);\n\n      let yearStart = 0;\n      for (let year = UMALQURA_YEAR_START; year <= UMALQURA_YEAR_END; year++) {\n        UMALQURA_YEAR_START_TABLE[year - UMALQURA_YEAR_START] = yearStart;\n        for (let i = 1; i <= 12; i++) {\n          yearStart += umalquraMonthLength(year, i);\n        }\n      }\n    }\n  }\n\n  fromJulianDay(jd: number): CalendarDate {\n    let days = jd - CIVIL_EPOC;\n    let startDays = umalquraYearStart(UMALQURA_YEAR_START);\n    let endDays = umalquraYearStart(UMALQURA_YEAR_END);\n    if (days < startDays || days > endDays) {\n      return super.fromJulianDay(jd);\n    } else {\n      let y = UMALQURA_YEAR_START - 1;\n      let m = 1;\n      let d = 1;\n      while (d > 0) {\n        y++;\n        d = days - umalquraYearStart(y) + 1;\n        let yearLength = umalquraYearLength(y);\n        if (d === yearLength) {\n          m = 12;\n          break;\n        } else if (d < yearLength) {\n          let monthLength = umalquraMonthLength(y, m);\n          m = 1;\n          while (d > monthLength) {\n            d -= monthLength;\n            m++;\n            monthLength = umalquraMonthLength(y, m);\n          }\n          break;\n        }\n      }\n\n      return new CalendarDate(this, y, m, (days - umalquraMonthStart(y, m) + 1));\n    }\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.toJulianDay(date);\n    }\n\n    return CIVIL_EPOC + umalquraMonthStart(date.year, date.month) + (date.day - 1);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInMonth(date);\n    }\n\n    return umalquraMonthLength(date.year, date.month);\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    if (date.year < UMALQURA_YEAR_START || date.year > UMALQURA_YEAR_END) {\n      return super.getDaysInYear(date);\n    }\n\n    return umalquraYearLength(date.year);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod, Mutable} from '../utils';\n\nconst HEBREW_EPOCH = 347997;\n\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst HOUR_PARTS = 1080;\nconst DAY_PARTS  = 24 * HOUR_PARTS;\n\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst MONTH_DAYS = 29;\nconst MONTH_FRACT = 12 * HOUR_PARTS + 793;\nconst MONTH_PARTS = MONTH_DAYS * DAY_PARTS + MONTH_FRACT;\n\nfunction isLeapYear(year: number) {\n  return mod(year * 7 + 1, 19) < 7;\n}\n\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction hebrewDelay1(year: number) {\n  let months = Math.floor((235 * year - 234) / 19);\n  let parts = 12084 + 13753 * months;\n  let day = months * 29 + Math.floor(parts / 25920);\n\n  if (mod(3 * (day + 1), 7) < 3) {\n    day += 1;\n  }\n\n  return day;\n}\n\n// Check for delay in start of new year due to length of adjacent years\nfunction hebrewDelay2(year: number) {\n  let last = hebrewDelay1(year - 1);\n  let present = hebrewDelay1(year);\n  let next = hebrewDelay1(year + 1);\n\n  if (next - present === 356) {\n    return 2;\n  }\n\n  if (present - last === 382) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction startOfYear(year: number) {\n  return hebrewDelay1(year) + hebrewDelay2(year);\n}\n\nfunction getDaysInYear(year: number) {\n  return startOfYear(year + 1) - startOfYear(year);\n}\n\nfunction getYearType(year: number) {\n  let yearLength = getDaysInYear(year);\n\n  if (yearLength > 380) {\n    yearLength -= 30; // Subtract length of leap month.\n  }\n\n  switch (yearLength) {\n    case 353:\n      return 0; // deficient\n    case 354:\n      return 1; // normal\n    case 355:\n      return 2; // complete\n  }\n}\n\nfunction getDaysInMonth(year: number, month: number): number {\n  // Normalize month numbers from 1 - 13, even on non-leap years\n  if (month >= 6 && !isLeapYear(year)) {\n    month++;\n  }\n\n  // First of all, dispose of fixed-length 29 day months\n  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) {\n    return 29;\n  }\n\n  let yearType = getYearType(year);\n\n  // If it's Heshvan, days depend on length of year\n  if (month === 2) {\n    return yearType === 2 ? 30 : 29;\n  }\n\n  // Similarly, Kislev varies with the length of year\n  if (month === 3) {\n    return yearType === 0 ? 29 : 30;\n  }\n\n  // Adar I only exists in leap years\n  if (month === 6) {\n    return isLeapYear(year) ? 30 : 0;\n  }\n\n  return 30;\n}\n\n/**\n * The Hebrew calendar is used in Israel and around the world by the Jewish faith.\n * Years include either 12 or 13 months depending on whether it is a leap year.\n * In leap years, an extra month is inserted at month 6.\n */\nexport class HebrewCalendar implements Calendar {\n  identifier = 'hebrew';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let d = jd - HEBREW_EPOCH;\n    let m = (d * DAY_PARTS) / MONTH_PARTS;           // Months (approx)\n    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n    let ys = startOfYear(year);                      // 1st day of year\n    let dayOfYear = Math.floor(d - ys);\n\n    // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n    while (dayOfYear < 1) {\n      year--;\n      ys = startOfYear(year);\n      dayOfYear = Math.floor(d - ys);\n    }\n\n    // Now figure out which month we're in, and the date within that month\n    let month = 1;\n    let monthStart = 0;\n    while (monthStart < dayOfYear) {\n      monthStart += getDaysInMonth(year, month);\n      month++;\n    }\n\n    month--;\n    monthStart -= getDaysInMonth(year, month);\n\n    let day = dayOfYear - monthStart;\n    return new CalendarDate(this, year, month, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let jd = startOfYear(date.year);\n    for (let month = 1; month < date.month; month++) {\n      jd += getDaysInMonth(date.year, month);\n    }\n\n    return jd + date.day + HEBREW_EPOCH;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    return getDaysInMonth(date.year, date.month);\n  }\n\n  getMonthsInYear(date: AnyCalendarDate): number {\n    return isLeapYear(date.year) ? 13 : 12;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return getDaysInYear(date.year);\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AM'];\n  }\n\n  balanceYearMonth(date: Mutable<AnyCalendarDate>, previousDate: AnyCalendarDate) {\n    // Keep date in the same month when switching between leap years and non leap years\n    if (previousDate.year !== date.year) {\n      if (isLeapYear(previousDate.year) && !isLeapYear(date.year) && previousDate.month > 6) {\n        date.month--;\n      } else if (!isLeapYear(previousDate.year) && isLeapYear(date.year) && previousDate.month > 6) {\n        date.month++;\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {Mutable} from '../utils';\n\nconst ETHIOPIC_EPOCH = 1723856;\nconst COPTIC_EPOCH = 1824665;\n\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst AMETE_MIHRET_DELTA = 5500;\n\nfunction ceToJulianDay(epoch: number, year: number, month: number, day: number): number {\n  return (\n    epoch                   // difference from Julian epoch to 1,1,1\n    + 365 * year            // number of days from years\n    + Math.floor(year / 4)  // extra day of leap year\n    + 30 * (month - 1)      // number of days from months (1 based)\n    + day - 1               // number of days for present month (1 based)\n  );\n}\n\nfunction julianDayToCE(calendar: Calendar, epoch: number, jd: number): Mutable<CalendarDate> {\n  let year = Math.floor((4 * (jd - epoch)) / 1461);\n  let month = 1 + Math.floor((jd - ceToJulianDay(epoch, year, 1, 1)) / 30);\n  let day = jd + 1 - ceToJulianDay(epoch, year, month, 1);\n\n  return new CalendarDate(calendar, year, month, day);\n}\n\nfunction getLeapDay(year: number) {\n  return Math.floor((year % 4) / 3);\n}\n\nfunction getDaysInMonth(year: number, month: number) {\n  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n  // an intercalary month at the end of the year of 5 or 6 days, depending whether\n  // the year is a leap year or not. The Leap Year follows the same rules as the\n  // Julian Calendar so that the extra month always has six days in the year before\n  // a Julian Leap Year.\n  if (month % 13 !== 0) {\n    // not intercalary month\n    return 30;\n  } else {\n    // intercalary month 5 days + possible leap day\n    return getLeapDay(year) + 5;\n  }\n}\n\n/**\n * The Ethiopic calendar system is the official calendar used in Ethiopia.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'AA' and 'AM'.\n */\nexport class EthiopicCalendar implements Calendar {\n  identifier = 'ethiopic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = julianDayToCE(this, ETHIOPIC_EPOCH, jd);\n    if (date.year > 0) {\n      date.era = 'AM';\n    } else {\n      date.era = 'AA';\n      date.year += AMETE_MIHRET_DELTA;\n    }\n\n    return date as CalendarDate;\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return ceToJulianDay(ETHIOPIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'AA') {\n      year -= AMETE_MIHRET_DELTA;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  getMonthsInYear(): number {\n    return 13;\n  }\n\n  getDaysInYear(date: AnyCalendarDate): number {\n    return 365 + getLeapDay(date.year);\n  }\n\n  getYearsInEra(): number {\n    return 9999;\n  }\n\n  getEras() {\n    return ['AA', 'AM'];\n  }\n}\n\n/**\n * The Ethiopic (Amete Alem) calendar is the same as the modern Ethiopic calendar,\n * except years were measured from a different epoch. Only one era is supported: 'AA'.\n */\nexport class EthiopicAmeteAlemCalendar extends EthiopicCalendar {\n  identifier = 'ethioaa'; // also known as 'ethiopic-amete-alem' in ICU\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = julianDayToCE(this, ETHIOPIC_EPOCH, jd);\n    date.era = 'AA';\n    date.year += AMETE_MIHRET_DELTA;\n    return date as CalendarDate;\n  }\n\n  getEras() {\n    return ['AA'];\n  }\n}\n\n/**\n * The Coptic calendar is similar to the Ethiopic calendar.\n * It includes 12 months of 30 days each, plus 5 or 6 intercalary days depending\n * on whether it is a leap year. Two eras are supported: 'BCE' and 'CE'.\n */\nexport class CopticCalendar extends EthiopicCalendar {\n  identifier = 'coptic';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let date = julianDayToCE(this, COPTIC_EPOCH, jd);\n    if (date.year <= 0) {\n      date.era = 'BCE';\n      date.year = 1 - date.year;\n    } else {\n      date.era = 'CE';\n    }\n\n    return date as CalendarDate;\n  }\n\n  toJulianDay(date: AnyCalendarDate) {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return ceToJulianDay(COPTIC_EPOCH, year, date.month, date.day);\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    let year = date.year;\n    if (date.era === 'BCE') {\n      year = 1 - year;\n    }\n\n    return getDaysInMonth(year, date.month);\n  }\n\n  isInverseEra(date: AnyCalendarDate): boolean {\n    return date.era === 'BCE';\n  }\n\n  balanceDate(date: Mutable<AnyCalendarDate>) {\n    if (date.year <= 0) {\n      date.era = date.era === 'BCE' ? 'CE' : 'BCE';\n      date.year = 1 - date.year;\n    }\n  }\n\n  getEras() {\n    return ['BCE', 'CE'];\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BuddhistCalendar} from './calendars/BuddhistCalendar';\nimport {Calendar} from './types';\nimport {CopticCalendar, EthiopicAmeteAlemCalendar, EthiopicCalendar} from './calendars/EthiopicCalendar';\nimport {GregorianCalendar} from './calendars/GregorianCalendar';\nimport {HebrewCalendar} from './calendars/HebrewCalendar';\nimport {IndianCalendar} from './calendars/IndianCalendar';\nimport {IslamicCivilCalendar, IslamicTabularCalendar, IslamicUmalquraCalendar} from './calendars/IslamicCalendar';\nimport {JapaneseCalendar} from './calendars/JapaneseCalendar';\nimport {PersianCalendar} from './calendars/PersianCalendar';\nimport {TaiwanCalendar} from './calendars/TaiwanCalendar';\n\n/** Creates a `Calendar` instance from a Unicode calendar identifier string. */\nexport function createCalendar(name: string): Calendar {\n  switch (name) {\n    case 'buddhist':\n      return new BuddhistCalendar();\n    case 'ethiopic':\n      return new EthiopicCalendar();\n    case 'ethioaa':\n      return new EthiopicAmeteAlemCalendar();\n    case 'coptic':\n      return new CopticCalendar();\n    case 'hebrew':\n      return new HebrewCalendar();\n    case 'indian':\n      return new IndianCalendar();\n    case 'islamic-civil':\n      return new IslamicCivilCalendar();\n    case 'islamic-tbla':\n      return new IslamicTabularCalendar();\n    case 'islamic-umalqura':\n      return new IslamicUmalquraCalendar();\n    case 'japanese':\n      return new JapaneseCalendar();\n    case 'persian':\n      return new PersianCalendar();\n    case 'roc':\n      return new TaiwanCalendar();\n    case 'gregory':\n    default:\n      return new GregorianCalendar();\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nlet formatterCache = new Map<string, Intl.DateTimeFormat>();\n\ninterface ResolvedDateTimeFormatOptions extends Intl.ResolvedDateTimeFormatOptions {\n  hourCycle?: Intl.DateTimeFormatOptions['hourCycle']\n}\n\ninterface DateRangeFormatPart extends Intl.DateTimeFormatPart {\n  source: 'startRange' | 'endRange' | 'shared'\n}\n\n/** A wrapper around Intl.DateTimeFormat that fixes various browser bugs, and polyfills new features. */\nexport class DateFormatter implements Intl.DateTimeFormat {\n  private formatter: Intl.DateTimeFormat;\n  private options: Intl.DateTimeFormatOptions;\n  private resolvedHourCycle: Intl.DateTimeFormatOptions['hourCycle'];\n\n  constructor(locale: string, options: Intl.DateTimeFormatOptions = {}) {\n    this.formatter = getCachedDateFormatter(locale, options);\n    this.options = options;\n  }\n\n  /** Formats a date as a string according to the locale and format options passed to the constructor. */\n  format(value: Date): string {\n    return this.formatter.format(value);\n  }\n\n  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */\n  formatToParts(value: Date): Intl.DateTimeFormatPart[] {\n    return this.formatter.formatToParts(value);\n  }\n\n  /** Formats a date range as a string. */\n  formatRange(start: Date, end: Date): string {\n    // @ts-ignore\n    if (typeof this.formatter.formatRange === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRange(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    // Very basic fallback for old browsers.\n    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;\n  }\n\n  /** Formats a date range as an array of parts. */\n  formatRangeToParts(start: Date, end: Date): DateRangeFormatPart[] {\n    // @ts-ignore\n    if (typeof this.formatter.formatRangeToParts === 'function') {\n      // @ts-ignore\n      return this.formatter.formatRangeToParts(start, end);\n    }\n\n    if (end < start) {\n      throw new RangeError('End date must be >= start date');\n    }\n\n    let startParts = this.formatter.formatToParts(start);\n    let endParts = this.formatter.formatToParts(end);\n    return [\n      ...startParts.map(p => ({...p, source: 'startRange'} as DateRangeFormatPart)),\n      {type: 'literal', value: ' – ', source: 'shared'},\n      ...endParts.map(p => ({...p, source: 'endRange'} as DateRangeFormatPart))\n    ];\n  }\n\n  /** Returns the resolved formatting options based on the values passed to the constructor. */\n  resolvedOptions(): ResolvedDateTimeFormatOptions {\n    let resolvedOptions = this.formatter.resolvedOptions() as ResolvedDateTimeFormatOptions;\n    if (hasBuggyResolvedHourCycle()) {\n      if (!this.resolvedHourCycle) {\n        this.resolvedHourCycle = getResolvedHourCycle(resolvedOptions.locale, this.options);\n      }\n      resolvedOptions.hourCycle = this.resolvedHourCycle;\n      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';\n    }\n\n    return resolvedOptions;\n  }\n}\n\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst hour12Preferences = {\n  true: {\n    // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n    ja: 'h11'\n  },\n  false: {\n    // All locales use h23 for 24 hour time. None use h24.\n  }\n};\n\nfunction getCachedDateFormatter(locale: string, options: Intl.DateTimeFormatOptions = {}): Intl.DateTimeFormat {\n  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n  if (typeof options.hour12 === 'boolean' && hasBuggyHour12Behavior()) {\n    options = {...options};\n    let pref = hour12Preferences[String(options.hour12)][locale.split('-')[0]];\n    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';\n    options.hourCycle = pref ?? defaultHourCycle;\n    delete options.hour12;\n  }\n\n  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');\n  if (formatterCache.has(cacheKey)) {\n    return formatterCache.get(cacheKey);\n  }\n\n  let numberFormatter = new Intl.DateTimeFormat(locale, options);\n  formatterCache.set(cacheKey, numberFormatter);\n  return numberFormatter;\n}\n\nlet _hasBuggyHour12Behavior: boolean = null;\nfunction hasBuggyHour12Behavior() {\n  if (_hasBuggyHour12Behavior == null) {\n    _hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === '24';\n  }\n\n  return _hasBuggyHour12Behavior;\n}\n\nlet _hasBuggyResolvedHourCycle: boolean = null;\nfunction hasBuggyResolvedHourCycle() {\n  if (_hasBuggyResolvedHourCycle == null) {\n    _hasBuggyResolvedHourCycle = (new Intl.DateTimeFormat('fr', {\n      hour: 'numeric',\n      hour12: false\n    }).resolvedOptions() as ResolvedDateTimeFormatOptions).hourCycle === 'h12';\n  }\n\n  return _hasBuggyResolvedHourCycle;\n}\n\nfunction getResolvedHourCycle(locale: string, options: Intl.DateTimeFormatOptions) {\n  if (!options.timeStyle && !options.hour) {\n    return undefined;\n  }\n\n  // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n  // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');\n  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';\n  let formatter = getCachedDateFormatter(locale, {\n    ...options,\n    timeZone: undefined // use local timezone\n  });\n\n  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);\n  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);\n\n  if (min === 0 && max === 23) {\n    return 'h23';\n  }\n\n  if (min === 24 && max === 23) {\n    return 'h24';\n  }\n\n  if (min === 0 && max === 11) {\n    return 'h11';\n  }\n\n  if (min === 12 && max === 11) {\n    return 'h12';\n  }\n\n  throw new Error('Unexpected hour cycle result');\n}\n"]},"metadata":{},"sourceType":"module"}