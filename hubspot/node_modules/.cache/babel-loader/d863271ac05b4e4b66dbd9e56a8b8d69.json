{"ast":null,"code":"import { useControlledState as $bOkae$useControlledState } from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $3017fa7ffdddec74$exports = {};\n$parcel$export($3017fa7ffdddec74$exports, \"useToggleState\", () => $3017fa7ffdddec74$export$8042c6c013fd5226);\n\nfunction $3017fa7ffdddec74$export$8042c6c013fd5226() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    isReadOnly: isReadOnly\n  } = props; // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n\n  let [isSelected, setSelected] = $bOkae$useControlledState(props.isSelected, props.defaultSelected || false, props.onChange);\n\n  function updateSelected(value) {\n    if (!isReadOnly) setSelected(value);\n  }\n\n  function toggleState() {\n    if (!isReadOnly) setSelected(!isSelected);\n  }\n\n  return {\n    isSelected: isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n\nexport { $3017fa7ffdddec74$export$8042c6c013fd5226 as useToggleState };","map":{"version":3,"mappings":";;;;;;;;;;;;;;SA6BgBA,4CAAqD;EAAA,IAAtCC,KAAsC,uEAAjB,EAAiB;EACnE,IAAI;IAACC;EAAD,IAAeD,KAAnB,CADmE,CAGnE;EACA;;EACA,IAAG,CAAEE,UAAF,EAAcC,WAAd,IAA6BC,yBAAkB,CAACJ,KAAK,CAACE,UAAP,EAAmBF,KAAK,CAACK,eAAN,IAAyB,KAA5C,EAAmDL,KAAK,CAACM,QAAzD,CAAlD;;WAESC,eAAeC,OAAO;IAC7B,IAAE,CAAGP,UAAL,EACEE,WAAW,CAACK,KAAD,CAAX;EAEH;;WAEQC,cAAc;IACrB,IAAE,CAAGR,UAAL,EACEE,WAAW,EAAED,UAAF,CAAX;EAEH;;EAED,OAAO;gBACLA,UADK;IAELC,WAAW,EAAEI,cAFR;IAGLG,MAAM,EAAED;EAHH,CAAP;AAKD","names":["$3017fa7ffdddec74$export$8042c6c013fd5226","props","isReadOnly","isSelected","setSelected","$bOkae$useControlledState","defaultSelected","onChange","updateSelected","value","toggleState","toggle"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\toggle\\dist\\packages\\@react-stately\\toggle\\src\\useToggleState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ToggleProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface ToggleState {\n  /** Whether the toggle is selected. */\n  readonly isSelected: boolean,\n\n  /** Updates selection state. */\n  setSelected(isSelected: boolean): void,\n\n  /** Toggle the selection state. */\n  toggle(): void\n}\n\n/**\n * Provides state management for toggle components like checkboxes and switches.\n */\nexport function useToggleState(props: ToggleProps = {}): ToggleState {\n  let {isReadOnly} = props;\n\n  // have to provide an empty function so useControlledState doesn't throw a fit\n  // can't use useControlledState's prop calling because we need the event object from the change\n  let [isSelected, setSelected] = useControlledState(props.isSelected, props.defaultSelected || false, props.onChange);\n\n  function updateSelected(value) {\n    if (!isReadOnly) {\n      setSelected(value);\n    }\n  }\n\n  function toggleState() {\n    if (!isReadOnly) {\n      setSelected(!isSelected);\n    }\n  }\n\n  return {\n    isSelected,\n    setSelected: updateSelected,\n    toggle: toggleState\n  };\n}\n"]},"metadata":{},"sourceType":"module"}