{"ast":null,"code":"import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\n\nfunction usePanGesture(_a) {\n  var onPan = _a.onPan,\n      onPanStart = _a.onPanStart,\n      onPanEnd = _a.onPanEnd,\n      onPanSessionStart = _a.onPanSessionStart,\n      visualElement = _a.visualElement;\n  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n  var panSession = useRef(null);\n  var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function (event, info) {\n      panSession.current = null;\n      onPanEnd && onPanEnd(event, info);\n    }\n  };\n  useEffect(function () {\n    if (panSession.current !== null) {\n      panSession.current.updateHandlers(handlers);\n    }\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, {\n      transformPagePoint: transformPagePoint\n    });\n  }\n\n  usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n  useUnmountEffect(function () {\n    return panSession.current && panSession.current.end();\n  });\n}\n\nexport { usePanGesture };","map":{"version":3,"names":["useRef","useContext","useEffect","MotionConfigContext","useUnmountEffect","usePointerEvent","PanSession","usePanGesture","_a","onPan","onPanStart","onPanEnd","onPanSessionStart","visualElement","hasPanEvents","panSession","transformPagePoint","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"sources":["C:/Users/Tejaswini Mahale/Desktop/boorish-earthquake-4077/hubspot/node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs"],"sourcesContent":["import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture(_a) {\n    var onPan = _a.onPan, onPanStart = _a.onPanStart, onPanEnd = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement = _a.visualElement;\n    var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    var panSession = useRef(null);\n    var transformPagePoint = useContext(MotionConfigContext).transformPagePoint;\n    var handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: function (event, info) {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(function () {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint: transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(function () { return panSession.current && panSession.current.end(); });\n}\n\nexport { usePanGesture };\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,EAAvB,EAA2B;EACvB,IAAIC,KAAK,GAAGD,EAAE,CAACC,KAAf;EAAA,IAAsBC,UAAU,GAAGF,EAAE,CAACE,UAAtC;EAAA,IAAkDC,QAAQ,GAAGH,EAAE,CAACG,QAAhE;EAAA,IAA0EC,iBAAiB,GAAGJ,EAAE,CAACI,iBAAjG;EAAA,IAAoHC,aAAa,GAAGL,EAAE,CAACK,aAAvI;EACA,IAAIC,YAAY,GAAGL,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAtD;EACA,IAAIG,UAAU,GAAGf,MAAM,CAAC,IAAD,CAAvB;EACA,IAAIgB,kBAAkB,GAAGf,UAAU,CAACE,mBAAD,CAAV,CAAgCa,kBAAzD;EACA,IAAIC,QAAQ,GAAG;IACXC,cAAc,EAAEN,iBADL;IAEXO,OAAO,EAAET,UAFE;IAGXU,MAAM,EAAEX,KAHG;IAIXY,KAAK,EAAE,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;MAC1BR,UAAU,CAACS,OAAX,GAAqB,IAArB;MACAb,QAAQ,IAAIA,QAAQ,CAACW,KAAD,EAAQC,IAAR,CAApB;IACH;EAPU,CAAf;EASArB,SAAS,CAAC,YAAY;IAClB,IAAIa,UAAU,CAACS,OAAX,KAAuB,IAA3B,EAAiC;MAC7BT,UAAU,CAACS,OAAX,CAAmBC,cAAnB,CAAkCR,QAAlC;IACH;EACJ,CAJQ,CAAT;;EAKA,SAASS,aAAT,CAAuBJ,KAAvB,EAA8B;IAC1BP,UAAU,CAACS,OAAX,GAAqB,IAAIlB,UAAJ,CAAegB,KAAf,EAAsBL,QAAtB,EAAgC;MACjDD,kBAAkB,EAAEA;IAD6B,CAAhC,CAArB;EAGH;;EACDX,eAAe,CAACQ,aAAD,EAAgB,aAAhB,EAA+BC,YAAY,IAAIY,aAA/C,CAAf;EACAtB,gBAAgB,CAAC,YAAY;IAAE,OAAOW,UAAU,CAACS,OAAX,IAAsBT,UAAU,CAACS,OAAX,CAAmBG,GAAnB,EAA7B;EAAwD,CAAvE,CAAhB;AACH;;AAED,SAASpB,aAAT"},"metadata":{},"sourceType":"module"}