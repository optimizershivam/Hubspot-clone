{"ast":null,"code":"import { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection } from \"@react-stately/collections\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\nimport $1BfjW$react, { useMemo as $1BfjW$useMemo } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $4a0dd036d492cee4$exports = {};\n$parcel$export($4a0dd036d492cee4$exports, \"useTableState\", () => $4a0dd036d492cee4$export$907bcc6c48325fd6);\nconst $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2); // const RESIZE_BUFFER_COLUMN_KEY = 'resize-buffer-column' + Math.random().toString(36).slice(2);\n\nfunction $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {\n  let columns = [];\n  let seen = new Map();\n\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent = keyMap.get(parentKey); // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n\n      if (seen.has(parent)) {\n        parent.colspan++;\n        let {\n          column: column,\n          index: index\n        } = seen.get(parent);\n        if (index > col.length) break;\n\n        for (let i = index; i < col.length; i++) column.splice(i, 0, null); // Adjust shifted indices\n\n\n        for (let i1 = col.length; i1 < column.length; i1++) if (column[i1] && seen.has(column[i1])) seen.get(column[i1]).index = i1;\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {\n          column: col,\n          index: col.length - 1\n        });\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []); // Convert columns into rows.\n\n  let colIndex = 0;\n\n  for (let column1 of columns) {\n    let i = maxLength - 1;\n\n    for (let item of column1) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n\n        if (rowLength < colIndex) {\n          let placeholder = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  } // Add placeholders at the end of each row that is shorter than the maximum\n\n\n  let i = 0;\n\n  for (let row1 of headerRows) {\n    let rowLength = row1.reduce((p, c) => p + c.colspan, 0);\n\n    if (rowLength < columnNodes.length) {\n      let placeholder = {\n        type: 'placeholder',\n        key: 'placeholder-' + row1[row1.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row1[row1.length - 1].key\n      };\n      row1.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\n\nvar tmp = Symbol.iterator;\n\nclass $788781baa30117fa$export$596e1b2e2cf93690 extends $1BfjW$GridCollection {\n  *[tmp]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    var ref;\n    return (ref = [...this.body.childNodes][0]) === null || ref === void 0 ? void 0 : ref.key;\n  }\n\n  getLastKey() {\n    var ref;\n    let rows = [...this.body.childNodes];\n    return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n  }\n\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  constructor(nodes, prev, opts) {\n    let rowHeaderColumnKeys = new Set();\n    let body;\n    let columns = []; // Add cell for selection checkboxes if needed.\n\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      let rowHeaderColumn = {\n        type: 'column',\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n\n    let visit = node => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n\n        case 'column':\n          columnKeyMap.set(node.key, node);\n\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n\n          break;\n\n        case 'item':\n          rows.push(node);\n          return;\n        // do not go into childNodes\n      }\n\n      for (let child of node.childNodes) visit(child);\n    };\n\n    for (let node1 of nodes) visit(node1); // if (Array.from(nodes).some(node => node.props?.allowsResizing)) {\n    //   /*\n    //   If the table content width > table width, a horizontal scroll bar is present.\n    //   If a user tries to resize a column, making it smaller while they are scrolled to the\n    //   end of the content horizontally, it shrinks the total table content width, causing\n    //   things to snap around and breaks the resize behavior.\n    //   To fix this, we add a resize buffer column (aka \"spooky column\") to the end of the table.\n    //   The width of this column defaults to 0. If you try and shrink a column and the width of the\n    //   table contents > table width, then the \"spooky column\" will grow to take up the difference\n    //   so that the total table content width remains constant while you are resizing. Once you\n    //   finish resizing, the \"spooky column\" snaps back to 0.\n    //   */\n    //   let resizeBufferColumn: GridNode<T> = {\n    //     type: 'column',\n    //     key: RESIZE_BUFFER_COLUMN_KEY,\n    //     value: null,\n    //     textValue: '',\n    //     level: 0,\n    //     index: columns.length,\n    //     hasChildNodes: false,\n    //     rendered: null,\n    //     childNodes: [],\n    //     props: {\n    //       isResizeBuffer: true,\n    //       defaultWidth: 0\n    //     }\n    //   };\n    //   columns.push(resizeBufferColumn);\n    // }\n\n\n    let headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows; // Default row header column to the first one.\n\n    if (this.rowHeaderColumnKeys.size === 0) this.rowHeaderColumnKeys.add(this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);\n  }\n\n}\n\nconst $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\n\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  let {\n    selectionMode = 'none'\n  } = props;\n  let context = $1BfjW$useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode: selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n  let collection = $1BfjW$useCollection(props, (nodes, prev) => new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context), context);\n  let {\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = $1BfjW$useGridState({ ...props,\n    collection: collection\n  }); // const tableColumnResizeState = useTableColumnResizeState({columns: collection.columns, getDefaultWidth: props.getDefaultWidth, onColumnResize: props.onColumnResize, onColumnResizeEnd: props.onColumnResizeEnd});\n\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n\n    sort(columnKey, direction) {\n      var ref;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n\n  };\n}\n\nvar $312ae3b56a94a86e$exports = {};\n$parcel$export($312ae3b56a94a86e$exports, \"TableHeader\", () => $312ae3b56a94a86e$export$f850895b287ef28e);\n\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    columns: columns\n  } = props;\n\n  if (typeof children === 'function') {\n    if (!columns) throw new Error('props.children was a function but props.columns is missing');\n\n    for (let column of columns) yield {\n      type: 'column',\n      value: column,\n      renderer: children\n    };\n  } else {\n    let columns = [];\n    $1BfjW$react.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n    yield* columns;\n  }\n};\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\nvar $4ae5314bf50db1a3$exports = {};\n$parcel$export($4ae5314bf50db1a3$exports, \"TableBody\", () => $4ae5314bf50db1a3$export$76ccd210b9029917);\n\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children,\n    items: items1\n  } = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props: props,\n\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items1) throw new Error('props.children was a function but props.items is missing');\n\n        for (let item of items1) yield {\n          type: 'item',\n          value: item,\n          renderer: children\n        };\n      } else {\n        let items = [];\n        $1BfjW$react.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n        yield* items;\n      }\n    }\n\n  };\n};\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\nvar $1cd244557c2f97d5$exports = {};\n$parcel$export($1cd244557c2f97d5$exports, \"Column\", () => $1cd244557c2f97d5$export$816b5d811295e6bc);\n\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n\n$1cd244557c2f97d5$var$Column.getCollectionNode = function* getCollectionNode(props, context1) {\n  let {\n    title: title,\n    children: children,\n    childColumns: childColumns1\n  } = props;\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns1 || title && $1BfjW$react.Children.count(children) > 0,\n    rendered: rendered,\n    textValue: textValue,\n    props: props,\n\n    *childNodes() {\n      if (childColumns1) for (let child1 of childColumns1) yield {\n        type: 'column',\n        value: child1\n      };else if (title) {\n        let childColumns = [];\n        $1BfjW$react.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child\n          });\n        });\n        yield* childColumns;\n      }\n    },\n\n    shouldInvalidate(newContext) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n\n  };\n\n  let updateContext = context => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) if (!node.hasChildNodes) context.columns.push(node);\n  };\n\n  updateContext(context1);\n};\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\nvar $70d70eb16ea48428$exports = {};\n$parcel$export($70d70eb16ea48428$exports, \"Row\", () => $70d70eb16ea48428$export$b59bdbef9ce70de2);\n\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n\n$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    children: children,\n    textValue: textValue\n  } = props;\n  yield {\n    type: 'item',\n    props: props,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') yield {\n        type: 'cell',\n        key: 'header',\n        props: {\n          isSelectionCell: true\n        }\n      };\n      if (typeof children === 'function') for (let column of context.columns) yield {\n        type: 'cell',\n        element: children(column.key),\n        key: column.key // this is combined with the row key by CollectionBuilder\n\n      };else {\n        let cells = [];\n        $1BfjW$react.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        yield* cells;\n      }\n    },\n\n    shouldInvalidate(newContext) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n    }\n\n  };\n};\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\nvar $941d1d9a6a28982a$exports = {};\n$parcel$export($941d1d9a6a28982a$exports, \"Cell\", () => $941d1d9a6a28982a$export$f6f0c3fe4ec306ea);\n\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n\n$941d1d9a6a28982a$var$Cell.getCollectionNode = function* getCollectionNode(props) {\n  let {\n    children: children\n  } = props;\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue: textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\n\n\nlet $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\nexport { $6555104ff085bef4$re_export$Section as Section, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell };","map":{"version":3,"mappings":"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","names":["$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY","Math","random","toString","slice","$788781baa30117fa$var$buildHeaderRows","keyMap","columnNodes","columns","seen","Map","column","parentKey","col","parent","get","has","colspan","index","length","i","splice","i1","push","set","maxLength","max","map","c","headerRows","Array","fill","colIndex","column1","item","row","rowLength","reduce","p","placeholder","type","key","value","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","row1","Symbol","iterator","$788781baa30117fa$export$596e1b2e2cf93690","$1BfjW$GridCollection","body","size","getKeys","keys","getKeyBefore","node","getKeyAfter","getFirstKey","ref","getLastKey","rows","getItem","at","idx","nodes","prev","opts","rowHeaderColumnKeys","Set","showSelectionCheckboxes","rowHeaderColumn","props","isSelectionCell","unshift","columnKeyMap","visit","isRowHeader","add","child","node1","forEach","columnCount","items","visitNode","$4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$4a0dd036d492cee4$export$907bcc6c48325fd6","selectionMode","context","$1BfjW$useMemo","children","collection","$1BfjW$useCollection","disabledKeys","selectionManager","$1BfjW$useGridState","sortDescriptor","sort","columnKey","direction","onSortChange","$312ae3b56a94a86e$var$TableHeader","getCollectionNode","Error","renderer","$1BfjW$react","Children","element","$312ae3b56a94a86e$export$f850895b287ef28e","$4ae5314bf50db1a3$var$TableBody","items1","$4ae5314bf50db1a3$export$76ccd210b9029917","$1cd244557c2f97d5$var$Column","context1","title","childColumns","childColumns1","fullNodes","count","child1","shouldInvalidate","newContext","updateContext","$1cd244557c2f97d5$export$816b5d811295e6bc","$70d70eb16ea48428$var$Row","cells","cell","some","$70d70eb16ea48428$export$b59bdbef9ce70de2","$941d1d9a6a28982a$var$Cell","$941d1d9a6a28982a$export$f6f0c3fe4ec306ea"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableCollection.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTableState.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableHeader.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableBody.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Column.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Row.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Cell.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n// const RESIZE_BUFFER_COLUMN_KEY = 'resize-buffer-column' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    // if (Array.from(nodes).some(node => node.props?.allowsResizing)) {\n    //   /*\n    //   If the table content width > table width, a horizontal scroll bar is present.\n    //   If a user tries to resize a column, making it smaller while they are scrolled to the\n    //   end of the content horizontally, it shrinks the total table content width, causing\n    //   things to snap around and breaks the resize behavior.\n\n    //   To fix this, we add a resize buffer column (aka \"spooky column\") to the end of the table.\n    //   The width of this column defaults to 0. If you try and shrink a column and the width of the\n    //   table contents > table width, then the \"spooky column\" will grow to take up the difference\n    //   so that the total table content width remains constant while you are resizing. Once you\n    //   finish resizing, the \"spooky column\" snaps back to 0.\n    //   */\n    //   let resizeBufferColumn: GridNode<T> = {\n    //     type: 'column',\n    //     key: RESIZE_BUFFER_COLUMN_KEY,\n    //     value: null,\n    //     textValue: '',\n    //     level: 0,\n    //     index: columns.length,\n    //     hasChildNodes: false,\n    //     rendered: null,\n    //     childNodes: [],\n    //     props: {\n    //       isResizeBuffer: true,\n    //       defaultWidth: 0\n    //     }\n    //   };\n    //   columns.push(resizeBufferColumn);\n    // }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AffectedColumnWidths} from './useTableColumnResizeState';\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\n// import {GridNode} from '@react-types/grid';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void\n  // /** A map of all the column widths by key. */\n  // columnWidths: MutableRefObject<Map<Key, number>>,\n  // /** Boolean for if a column is being resized. */\n  // isResizingColumn: boolean,\n  // /** Getter for column width. */\n  // getColumnWidth(key: Key): number,\n  //   /** Getter for column min width. */\n  // getColumnMinWidth(key: Key): number,\n  //   /** Getter for column max widths. */\n  // getColumnMaxWidth(key: Key): number,\n  // /** Trigger a resize and recalc. */\n  // onColumnResize: (column: GridNode<T>, width: number) => void,\n  // /** Runs at the start of resizing. */\n  // onColumnResizeStart: () => void,\n  // /** Triggers the onColumnResizeEnd prop. */\n  // onColumnResizeEnd: () => void,\n  // /** Need to be able to set the table width so that it can be used to calculate the column widths, this will trigger a recalc. */\n  // setTableWidth: (width: number) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean,\n  /** Function for determining the default width of columns. */\n  getDefaultWidth?: (props) => string | number,\n  /** Callback that is invoked during the entirety of the resize event. */\n  onColumnResize?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** Callback that is invoked when the resize event is ended. */\n  onColumnResizeEnd?: (affectedColumnWidths: AffectedColumnWidths) => void\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  // const tableColumnResizeState = useTableColumnResizeState({columns: collection.columns, getDefaultWidth: props.getDefaultWidth, onColumnResize: props.onColumnResize, onColumnResizeEnd: props.onColumnResizeEnd});\n\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n    // ...tableColumnResizeState\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"]},"metadata":{},"sourceType":"module"}