{"ast":null,"code":"function createRenderStep(runNextFrame) {\n  let toRun = [];\n  let toRunNextFrame = [];\n  let numToRun = 0;\n  let isProcessing = false;\n  let flushNextFrame = false;\n  const toKeepAlive = new WeakSet();\n  const step = {\n    schedule: function (callback) {\n      let keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      let immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      const addToCurrentFrame = immediate && isProcessing;\n      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n      if (keepAlive) toKeepAlive.add(callback);\n\n      if (buffer.indexOf(callback) === -1) {\n        buffer.push(callback);\n        if (addToCurrentFrame && isProcessing) numToRun = toRun.length;\n      }\n\n      return callback;\n    },\n    cancel: callback => {\n      const index = toRunNextFrame.indexOf(callback);\n      if (index !== -1) toRunNextFrame.splice(index, 1);\n      toKeepAlive.delete(callback);\n    },\n    process: frameData => {\n      if (isProcessing) {\n        flushNextFrame = true;\n        return;\n      }\n\n      isProcessing = true;\n      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n      toRunNextFrame.length = 0;\n      numToRun = toRun.length;\n\n      if (numToRun) {\n        for (let i = 0; i < numToRun; i++) {\n          const callback = toRun[i];\n          callback(frameData);\n\n          if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n          }\n        }\n      }\n\n      isProcessing = false;\n\n      if (flushNextFrame) {\n        flushNextFrame = false;\n        step.process(frameData);\n      }\n    }\n  };\n  return step;\n}\n\nexport { createRenderStep };","map":{"version":3,"names":["createRenderStep","runNextFrame","toRun","toRunNextFrame","numToRun","isProcessing","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","immediate","addToCurrentFrame","buffer","add","indexOf","push","length","cancel","index","splice","delete","process","frameData","i","has"],"sources":["C:/Users/Tejaswini Mahale/Desktop/boorish-earthquake-4077/hubspot/node_modules/popmotion/node_modules/framesync/dist/es/create-render-step.mjs"],"sourcesContent":["function createRenderStep(runNextFrame) {\n    let toRun = [];\n    let toRunNextFrame = [];\n    let numToRun = 0;\n    let isProcessing = false;\n    let flushNextFrame = false;\n    const toKeepAlive = new WeakSet();\n    const step = {\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        process: (frameData) => {\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            toRunNextFrame.length = 0;\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n"],"mappings":"AAAA,SAASA,gBAAT,CAA0BC,YAA1B,EAAwC;EACpC,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,cAAc,GAAG,EAArB;EACA,IAAIC,QAAQ,GAAG,CAAf;EACA,IAAIC,YAAY,GAAG,KAAnB;EACA,IAAIC,cAAc,GAAG,KAArB;EACA,MAAMC,WAAW,GAAG,IAAIC,OAAJ,EAApB;EACA,MAAMC,IAAI,GAAG;IACTC,QAAQ,EAAE,UAACC,QAAD,EAAoD;MAAA,IAAzCC,SAAyC,uEAA7B,KAA6B;MAAA,IAAtBC,SAAsB,uEAAV,KAAU;MAC1D,MAAMC,iBAAiB,GAAGD,SAAS,IAAIR,YAAvC;MACA,MAAMU,MAAM,GAAGD,iBAAiB,GAAGZ,KAAH,GAAWC,cAA3C;MACA,IAAIS,SAAJ,EACIL,WAAW,CAACS,GAAZ,CAAgBL,QAAhB;;MACJ,IAAII,MAAM,CAACE,OAAP,CAAeN,QAAf,MAA6B,CAAC,CAAlC,EAAqC;QACjCI,MAAM,CAACG,IAAP,CAAYP,QAAZ;QACA,IAAIG,iBAAiB,IAAIT,YAAzB,EACID,QAAQ,GAAGF,KAAK,CAACiB,MAAjB;MACP;;MACD,OAAOR,QAAP;IACH,CAZQ;IAaTS,MAAM,EAAGT,QAAD,IAAc;MAClB,MAAMU,KAAK,GAAGlB,cAAc,CAACc,OAAf,CAAuBN,QAAvB,CAAd;MACA,IAAIU,KAAK,KAAK,CAAC,CAAf,EACIlB,cAAc,CAACmB,MAAf,CAAsBD,KAAtB,EAA6B,CAA7B;MACJd,WAAW,CAACgB,MAAZ,CAAmBZ,QAAnB;IACH,CAlBQ;IAmBTa,OAAO,EAAGC,SAAD,IAAe;MACpB,IAAIpB,YAAJ,EAAkB;QACdC,cAAc,GAAG,IAAjB;QACA;MACH;;MACDD,YAAY,GAAG,IAAf;MACA,CAACH,KAAD,EAAQC,cAAR,IAA0B,CAACA,cAAD,EAAiBD,KAAjB,CAA1B;MACAC,cAAc,CAACgB,MAAf,GAAwB,CAAxB;MACAf,QAAQ,GAAGF,KAAK,CAACiB,MAAjB;;MACA,IAAIf,QAAJ,EAAc;QACV,KAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,QAApB,EAA8BsB,CAAC,EAA/B,EAAmC;UAC/B,MAAMf,QAAQ,GAAGT,KAAK,CAACwB,CAAD,CAAtB;UACAf,QAAQ,CAACc,SAAD,CAAR;;UACA,IAAIlB,WAAW,CAACoB,GAAZ,CAAgBhB,QAAhB,CAAJ,EAA+B;YAC3BF,IAAI,CAACC,QAAL,CAAcC,QAAd;YACAV,YAAY;UACf;QACJ;MACJ;;MACDI,YAAY,GAAG,KAAf;;MACA,IAAIC,cAAJ,EAAoB;QAChBA,cAAc,GAAG,KAAjB;QACAG,IAAI,CAACe,OAAL,CAAaC,SAAb;MACH;IACJ;EA3CQ,CAAb;EA6CA,OAAOhB,IAAP;AACH;;AAED,SAAST,gBAAT"},"metadata":{},"sourceType":"module"}