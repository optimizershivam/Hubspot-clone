{"ast":null,"code":"// src/index.ts\nvar hasSetup = false;\nvar modality = null;\nvar hasEventBeforeFocus = false;\nvar handlers = /* @__PURE__ */new Set();\nvar isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false;\n\nfunction isValidKey(event) {\n  return !(event.metaKey || !isMac && event.altKey || event.ctrlKey);\n}\n\nfunction trigger(modality2, event) {\n  handlers.forEach(handler => handler(modality2, event));\n}\n\nfunction onKeyboardEvent(event) {\n  hasEventBeforeFocus = true;\n\n  if (isValidKey(event)) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n}\n\nfunction onPointerEvent(event) {\n  modality = \"pointer\";\n\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true;\n    trigger(\"pointer\", event);\n  }\n}\n\nfunction onWindowFocus(event) {\n  if (event.target === window || event.target === document) {\n    return;\n  }\n\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\";\n    trigger(\"keyboard\", event);\n  }\n\n  hasEventBeforeFocus = false;\n}\n\nfunction onWindowBlur() {\n  hasEventBeforeFocus = false;\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\";\n}\n\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return;\n  }\n\n  const {\n    focus\n  } = HTMLElement.prototype;\n\n  HTMLElement.prototype.focus = function focusElement() {\n    hasEventBeforeFocus = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    focus.apply(this, args);\n  };\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true);\n  document.addEventListener(\"keyup\", onKeyboardEvent, true);\n  window.addEventListener(\"focus\", onWindowFocus, true);\n  window.addEventListener(\"blur\", onWindowBlur, false);\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true);\n    document.addEventListener(\"pointermove\", onPointerEvent, true);\n    document.addEventListener(\"pointerup\", onPointerEvent, true);\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true);\n    document.addEventListener(\"mousemove\", onPointerEvent, true);\n    document.addEventListener(\"mouseup\", onPointerEvent, true);\n  }\n\n  hasSetup = true;\n}\n\nfunction trackFocusVisible(fn) {\n  setupGlobalFocusEvents();\n  fn(isFocusVisible());\n\n  const handler = () => fn(isFocusVisible());\n\n  handlers.add(handler);\n  return () => {\n    handlers.delete(handler);\n  };\n}\n\nexport { trackFocusVisible };","map":{"version":3,"mappings":"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","names":["hasSetup","modality","hasEventBeforeFocus","handlers","Set","isMac","window","navigator","test","platform","event","metaKey","altKey","ctrlKey","modality2","forEach","handler","isValidKey","trigger","type","target","document","focus","HTMLElement","prototype","args","apply","addEventListener","onKeyboardEvent","onWindowFocus","onWindowBlur","PointerEvent","onPointerEvent","fn","setupGlobalFocusEvents","isFocusVisible","add","delete"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\boorish-earthquake-4077\\hubspot\\node_modules\\@zag-js\\focus-visible\\src\\index.ts"],"sourcesContent":["type Modality = \"keyboard\" | \"pointer\"\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent\ntype Handler = (modality: Modality, e: HandlerEvent) => void\ntype FocusVisibleCallback = (isFocusVisible: boolean) => void\n\nlet hasSetup = false\nlet modality: Modality | null = null\nlet hasEventBeforeFocus = false\n\nconst handlers = new Set<Handler>()\n\nconst isMac = typeof window !== \"undefined\" && window.navigator != null ? /^Mac/.test(window.navigator.platform) : false\n\nfunction isValidKey(event: KeyboardEvent) {\n  return !(event.metaKey || (!isMac && event.altKey) || event.ctrlKey)\n}\n\nfunction trigger(modality: Modality, event: HandlerEvent) {\n  handlers.forEach((handler) => handler(modality, event))\n}\n\nfunction onKeyboardEvent(event: KeyboardEvent) {\n  hasEventBeforeFocus = true\n  if (isValidKey(event)) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n}\n\nfunction onPointerEvent(event: PointerEvent | MouseEvent) {\n  modality = \"pointer\"\n  if (event.type === \"mousedown\" || event.type === \"pointerdown\") {\n    hasEventBeforeFocus = true\n    trigger(\"pointer\", event)\n  }\n}\n\nfunction onWindowFocus(event: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (event.target === window || event.target === document) {\n    return\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to keyboard modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus) {\n    modality = \"keyboard\"\n    trigger(\"keyboard\", event)\n  }\n\n  hasEventBeforeFocus = false\n}\n\nfunction onWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false\n}\n\nfunction isFocusVisible() {\n  return modality !== \"pointer\"\n}\n\nfunction setupGlobalFocusEvents() {\n  if (typeof window === \"undefined\" || hasSetup) {\n    return\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  const { focus } = HTMLElement.prototype\n  HTMLElement.prototype.focus = function focusElement(...args) {\n    hasEventBeforeFocus = true\n    focus.apply(this, args)\n  }\n\n  document.addEventListener(\"keydown\", onKeyboardEvent, true)\n  document.addEventListener(\"keyup\", onKeyboardEvent, true)\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener(\"focus\", onWindowFocus, true)\n  window.addEventListener(\"blur\", onWindowBlur, false)\n\n  if (typeof PointerEvent !== \"undefined\") {\n    document.addEventListener(\"pointerdown\", onPointerEvent, true)\n    document.addEventListener(\"pointermove\", onPointerEvent, true)\n    document.addEventListener(\"pointerup\", onPointerEvent, true)\n  } else {\n    document.addEventListener(\"mousedown\", onPointerEvent, true)\n    document.addEventListener(\"mousemove\", onPointerEvent, true)\n    document.addEventListener(\"mouseup\", onPointerEvent, true)\n  }\n\n  hasSetup = true\n}\n\nexport function trackFocusVisible(fn: FocusVisibleCallback) {\n  setupGlobalFocusEvents()\n\n  fn(isFocusVisible())\n  const handler = () => fn(isFocusVisible())\n\n  handlers.add(handler)\n  return () => {\n    handlers.delete(handler)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}