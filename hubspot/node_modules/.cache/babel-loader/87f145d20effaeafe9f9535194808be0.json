{"ast":null,"code":"import { __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\n\nvar VisualElementDragControls =\n/** @class */\nfunction () {\n  function VisualElementDragControls(visualElement) {\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  VisualElementDragControls.prototype.start = function (originEvent, _a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.snapToCursor,\n        snapToCursor = _c === void 0 ? false : _c;\n    /**\n     * Don't start dragging if this component is exiting\n     */\n\n\n    if (this.visualElement.isPresent === false) return;\n\n    var onSessionStart = function (event) {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      _this.stopAnimation();\n\n      if (snapToCursor) {\n        _this.snapToCursor(extractEventInfo(event, \"page\").point);\n      }\n    };\n\n    var onStart = function (event, info) {\n      var _a; // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n\n\n      var _b = _this.getProps(),\n          drag = _b.drag,\n          dragPropagation = _b.dragPropagation,\n          onDragStart = _b.onDragStart;\n\n      if (drag && !dragPropagation) {\n        if (_this.openGlobalLock) _this.openGlobalLock();\n        _this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n        if (!_this.openGlobalLock) return;\n      }\n\n      _this.isDragging = true;\n      _this.currentDirection = null;\n\n      _this.resolveConstraints();\n\n      if (_this.visualElement.projection) {\n        _this.visualElement.projection.isAnimationBlocked = true;\n        _this.visualElement.projection.target = undefined;\n      }\n      /**\n       * Record gesture origin\n       */\n\n\n      eachAxis(function (axis) {\n        var _a, _b;\n\n        var current = _this.getAxisMotionValue(axis).get() || 0;\n        /**\n         * If the MotionValue is a percentage value convert to px\n         */\n\n        if (percent.test(current)) {\n          var measuredAxis = (_b = (_a = _this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n\n          if (measuredAxis) {\n            var length_1 = calcLength(measuredAxis);\n            current = length_1 * (parseFloat(current) / 100);\n          }\n        }\n\n        _this.originPoint[axis] = current;\n      }); // Fire onDragStart event\n\n      onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n      (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n    };\n\n    var onMove = function (event, info) {\n      // latestPointerEvent = event\n      var _a = _this.getProps(),\n          dragPropagation = _a.dragPropagation,\n          dragDirectionLock = _a.dragDirectionLock,\n          onDirectionLock = _a.onDirectionLock,\n          onDrag = _a.onDrag; // If we didn't successfully receive the gesture lock, early return.\n\n\n      if (!dragPropagation && !_this.openGlobalLock) return;\n      var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n\n      if (dragDirectionLock && _this.currentDirection === null) {\n        _this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n        if (_this.currentDirection !== null) {\n          onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n        }\n\n        return;\n      } // Update each point with the latest position\n\n\n      _this.updateAxis(\"x\", info.point, offset);\n\n      _this.updateAxis(\"y\", info.point, offset);\n      /**\n       * Ideally we would leave the renderer to fire naturally at the end of\n       * this frame but if the element is about to change layout as the result\n       * of a re-render we want to ensure the browser can read the latest\n       * bounding box to ensure the pointer and element don't fall out of sync.\n       */\n\n\n      _this.visualElement.syncRender();\n      /**\n       * This must fire after the syncRender call as it might trigger a state\n       * change which itself might trigger a layout update.\n       */\n\n\n      onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n    };\n\n    var onSessionEnd = function (event, info) {\n      return _this.stop(event, info);\n    };\n\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart: onSessionStart,\n      onStart: onStart,\n      onMove: onMove,\n      onSessionEnd: onSessionEnd\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint()\n    });\n  };\n\n  VisualElementDragControls.prototype.stop = function (event, info) {\n    var isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    var velocity = info.velocity;\n    this.startAnimation(velocity);\n    var onDragEnd = this.getProps().onDragEnd;\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n  };\n\n  VisualElementDragControls.prototype.cancel = function () {\n    var _a, _b;\n\n    this.isDragging = false;\n\n    if (this.visualElement.projection) {\n      this.visualElement.projection.isAnimationBlocked = false;\n    }\n\n    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n    this.panSession = undefined;\n    var dragPropagation = this.getProps().dragPropagation;\n\n    if (!dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n\n    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n  };\n\n  VisualElementDragControls.prototype.updateAxis = function (axis, _point, offset) {\n    var drag = this.getProps().drag; // If we're not dragging this axis, do an early return.\n\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    var axisValue = this.getAxisMotionValue(axis);\n    var next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n\n    axisValue.set(next);\n  };\n\n  VisualElementDragControls.prototype.resolveConstraints = function () {\n    var _this = this;\n\n    var _a = this.getProps(),\n        dragConstraints = _a.dragConstraints,\n        dragElastic = _a.dragElastic;\n\n    var layout = (this.visualElement.projection || {}).layout;\n    var prevConstraints = this.constraints;\n\n    if (dragConstraints && isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(function (axis) {\n        if (_this.getAxisMotionValue(axis)) {\n          _this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this.constraints[axis]);\n        }\n      });\n    }\n  };\n\n  VisualElementDragControls.prototype.resolveRefConstraints = function () {\n    var _a = this.getProps(),\n        constraints = _a.dragConstraints,\n        onMeasureDragConstraints = _a.onMeasureDragConstraints;\n\n    if (!constraints || !isRefObject(constraints)) return false;\n    var constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    var projection = this.visualElement.projection; // TODO\n\n    if (!projection || !projection.layout) return false;\n    var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n\n    if (onMeasureDragConstraints) {\n      var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToBox(userConstraints);\n      }\n    }\n\n    return measuredConstraints;\n  };\n\n  VisualElementDragControls.prototype.startAnimation = function (velocity) {\n    var _this = this;\n\n    var _a = this.getProps(),\n        drag = _a.drag,\n        dragMomentum = _a.dragMomentum,\n        dragElastic = _a.dragElastic,\n        dragTransition = _a.dragTransition,\n        dragSnapToOrigin = _a.dragSnapToOrigin,\n        onDragTransitionEnd = _a.onDragTransitionEnd;\n\n    var constraints = this.constraints || {};\n    var momentumAnimations = eachAxis(function (axis) {\n      var _a;\n\n      if (!shouldDrag(axis, drag, _this.currentDirection)) {\n        return;\n      }\n\n      var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n\n      var bounceStiffness = dragElastic ? 200 : 1000000;\n      var bounceDamping = dragElastic ? 40 : 10000000;\n\n      var inertia = __assign(__assign({\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness: bounceStiffness,\n        bounceDamping: bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10\n      }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n\n\n      return _this.startAxisValueAnimation(axis, inertia);\n    }); // Run all animations and then resolve the new drag constraints.\n\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  };\n\n  VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n    var axisValue = this.getAxisMotionValue(axis);\n    return startAnimation(axis, axisValue, 0, transition);\n  };\n\n  VisualElementDragControls.prototype.stopAnimation = function () {\n    var _this = this;\n\n    eachAxis(function (axis) {\n      return _this.getAxisMotionValue(axis).stop();\n    });\n  };\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n\n\n  VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n    var _a, _b;\n\n    var dragKey = \"_drag\" + axis.toUpperCase();\n    var externalMotionValue = this.visualElement.getProps()[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n  };\n\n  VisualElementDragControls.prototype.snapToCursor = function (point) {\n    var _this = this;\n\n    eachAxis(function (axis) {\n      var drag = _this.getProps().drag; // If we're not dragging this axis, do an early return.\n\n\n      if (!shouldDrag(axis, drag, _this.currentDirection)) return;\n      var projection = _this.visualElement.projection;\n\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      if (projection && projection.layout) {\n        var _a = projection.layout.actual[axis],\n            min = _a.min,\n            max = _a.max;\n        axisValue.set(point[axis] - mix(min, max, 0.5));\n      }\n    });\n  };\n  /**\n   * When the viewport resizes we want to check if the measured constraints\n   * have changed and, if so, reposition the element within those new constraints\n   * relative to where it was before the resize.\n   */\n\n\n  VisualElementDragControls.prototype.scalePositionWithinConstraints = function () {\n    var _this = this;\n\n    var _a;\n\n    var _b = this.getProps(),\n        drag = _b.drag,\n        dragConstraints = _b.dragConstraints;\n\n    var projection = this.visualElement.projection;\n    if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\n     * Stop current animations as there can be visual glitching if we try to do\n     * this mid-animation\n     */\n\n    this.stopAnimation();\n    /**\n     * Record the relative position of the dragged element relative to the\n     * constraints box and save as a progress value.\n     */\n\n    var boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(function (axis) {\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      if (axisValue) {\n        var latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, _this.constraints[axis]);\n      }\n    });\n    /**\n     * Update the layout of this element and resolve the latest drag constraints\n     */\n\n    var transformTemplate = this.visualElement.getProps().transformTemplate;\n    this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\n     * For each axis, calculate the current progress of the layout axis\n     * within the new constraints.\n     */\n\n    eachAxis(function (axis) {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\n       * Calculate a new transform based on the previous box progress\n       */\n\n      var axisValue = _this.getAxisMotionValue(axis);\n\n      var _a = _this.constraints[axis],\n          min = _a.min,\n          max = _a.max;\n      axisValue.set(mix(min, max, boxProgress[axis]));\n    });\n  };\n\n  VisualElementDragControls.prototype.addListeners = function () {\n    var _this = this;\n\n    var _a;\n\n    elementDragControls.set(this.visualElement, this);\n    var element = this.visualElement.getInstance();\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n\n    var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n      var _a = _this.getProps(),\n          drag = _a.drag,\n          _b = _a.dragListener,\n          dragListener = _b === void 0 ? true : _b;\n\n      drag && dragListener && _this.start(event);\n    });\n\n    var measureDragConstraints = function () {\n      var dragConstraints = _this.getProps().dragConstraints;\n\n      if (isRefObject(dragConstraints)) {\n        _this.constraints = _this.resolveRefConstraints();\n      }\n    };\n\n    var projection = this.visualElement.projection;\n    var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n    if (projection && !projection.layout) {\n      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n      projection.updateLayout();\n    }\n\n    measureDragConstraints();\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n\n    var stopResizeListener = addDomEvent(window, \"resize\", function () {\n      return _this.scalePositionWithinConstraints();\n    });\n    /**\n     * If the element's layout changes, calculate the delta and apply that to\n     * the drag gesture's origin point.\n     */\n\n    projection.addEventListener(\"didUpdate\", function (_a) {\n      var delta = _a.delta,\n          hasLayoutChanged = _a.hasLayoutChanged;\n\n      if (_this.isDragging && hasLayoutChanged) {\n        eachAxis(function (axis) {\n          var motionValue = _this.getAxisMotionValue(axis);\n\n          if (!motionValue) return;\n          _this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n\n        _this.visualElement.syncRender();\n      }\n    });\n    return function () {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n    };\n  };\n\n  VisualElementDragControls.prototype.getProps = function () {\n    var props = this.visualElement.getProps();\n    var _a = props.drag,\n        drag = _a === void 0 ? false : _a,\n        _b = props.dragDirectionLock,\n        dragDirectionLock = _b === void 0 ? false : _b,\n        _c = props.dragPropagation,\n        dragPropagation = _c === void 0 ? false : _c,\n        _d = props.dragConstraints,\n        dragConstraints = _d === void 0 ? false : _d,\n        _e = props.dragElastic,\n        dragElastic = _e === void 0 ? defaultElastic : _e,\n        _f = props.dragMomentum,\n        dragMomentum = _f === void 0 ? true : _f;\n    return __assign(__assign({}, props), {\n      drag: drag,\n      dragDirectionLock: dragDirectionLock,\n      dragPropagation: dragPropagation,\n      dragConstraints: dragConstraints,\n      dragElastic: dragElastic,\n      dragMomentum: dragMomentum\n    });\n  };\n\n  return VisualElementDragControls;\n}();\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset, lockThreshold) {\n  if (lockThreshold === void 0) {\n    lockThreshold = 10;\n  }\n\n  var direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["__assign","invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","AnimationType","createBox","eachAxis","measurePageBox","extractEventInfo","startAnimation","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","mix","percent","calcLength","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","prototype","start","originEvent","_a","_this","_b","_c","snapToCursor","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","getProps","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","current","getAxisMotionValue","get","test","measuredAxis","layout","actual","length_1","parseFloat","animationState","setActive","Drag","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","syncRender","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","getInstance","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","delta","hasLayoutChanged","motionValue","translate","props","_d","_e","_f","direction","lockThreshold","Math","abs"],"sources":["C:/Users/Tejaswini Mahale/Desktop/Hubspot/hubspot/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { __assign } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\n\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\nvar VisualElementDragControls = /** @class */ (function () {\n    function VisualElementDragControls(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    VisualElementDragControls.prototype.start = function (originEvent, _a) {\n        var _this = this;\n        var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        if (this.visualElement.isPresent === false)\n            return;\n        var onSessionStart = function (event) {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            _this.stopAnimation();\n            if (snapToCursor) {\n                _this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        var onStart = function (event, info) {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            var _b = _this.getProps(), drag = _b.drag, dragPropagation = _b.dragPropagation, onDragStart = _b.onDragStart;\n            if (drag && !dragPropagation) {\n                if (_this.openGlobalLock)\n                    _this.openGlobalLock();\n                _this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!_this.openGlobalLock)\n                    return;\n            }\n            _this.isDragging = true;\n            _this.currentDirection = null;\n            _this.resolveConstraints();\n            if (_this.visualElement.projection) {\n                _this.visualElement.projection.isAnimationBlocked = true;\n                _this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis(function (axis) {\n                var _a, _b;\n                var current = _this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    var measuredAxis = (_b = (_a = _this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n                    if (measuredAxis) {\n                        var length_1 = calcLength(measuredAxis);\n                        current = length_1 * (parseFloat(current) / 100);\n                    }\n                }\n                _this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n        };\n        var onMove = function (event, info) {\n            // latestPointerEvent = event\n            var _a = _this.getProps(), dragPropagation = _a.dragPropagation, dragDirectionLock = _a.dragDirectionLock, onDirectionLock = _a.onDirectionLock, onDrag = _a.onDrag;\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !_this.openGlobalLock)\n                return;\n            var offset = info.offset;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && _this.currentDirection === null) {\n                _this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (_this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            _this.updateAxis(\"x\", info.point, offset);\n            _this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            _this.visualElement.syncRender();\n            /**\n             * This must fire after the syncRender call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        var onSessionEnd = function (event, info) {\n            return _this.stop(event, info);\n        };\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart: onSessionStart,\n            onStart: onStart,\n            onMove: onMove,\n            onSessionEnd: onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    };\n    VisualElementDragControls.prototype.stop = function (event, info) {\n        var isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        var velocity = info.velocity;\n        this.startAnimation(velocity);\n        var onDragEnd = this.getProps().onDragEnd;\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    };\n    VisualElementDragControls.prototype.cancel = function () {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        var dragPropagation = this.getProps().dragPropagation;\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    };\n    VisualElementDragControls.prototype.updateAxis = function (axis, _point, offset) {\n        var drag = this.getProps().drag;\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        var axisValue = this.getAxisMotionValue(axis);\n        var next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    };\n    VisualElementDragControls.prototype.resolveConstraints = function () {\n        var _this = this;\n        var _a = this.getProps(), dragConstraints = _a.dragConstraints, dragElastic = _a.dragElastic;\n        var layout = (this.visualElement.projection || {}).layout;\n        var prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis(function (axis) {\n                if (_this.getAxisMotionValue(axis)) {\n                    _this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this.constraints[axis]);\n                }\n            });\n        }\n    };\n    VisualElementDragControls.prototype.resolveRefConstraints = function () {\n        var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        var constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        var projection = this.visualElement.projection;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    };\n    VisualElementDragControls.prototype.startAnimation = function (velocity) {\n        var _this = this;\n        var _a = this.getProps(), drag = _a.drag, dragMomentum = _a.dragMomentum, dragElastic = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;\n        var constraints = this.constraints || {};\n        var momentumAnimations = eachAxis(function (axis) {\n            var _a;\n            if (!shouldDrag(axis, drag, _this.currentDirection)) {\n                return;\n            }\n            var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            var bounceStiffness = dragElastic ? 200 : 1000000;\n            var bounceDamping = dragElastic ? 40 : 10000000;\n            var inertia = __assign(__assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness: bounceStiffness, bounceDamping: bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return _this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    };\n    VisualElementDragControls.prototype.startAxisValueAnimation = function (axis, transition) {\n        var axisValue = this.getAxisMotionValue(axis);\n        return startAnimation(axis, axisValue, 0, transition);\n    };\n    VisualElementDragControls.prototype.stopAnimation = function () {\n        var _this = this;\n        eachAxis(function (axis) { return _this.getAxisMotionValue(axis).stop(); });\n    };\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    VisualElementDragControls.prototype.getAxisMotionValue = function (axis) {\n        var _a, _b;\n        var dragKey = \"_drag\" + axis.toUpperCase();\n        var externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n    };\n    VisualElementDragControls.prototype.snapToCursor = function (point) {\n        var _this = this;\n        eachAxis(function (axis) {\n            var drag = _this.getProps().drag;\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, _this.currentDirection))\n                return;\n            var projection = _this.visualElement.projection;\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                var _a = projection.layout.actual[axis], min = _a.min, max = _a.max;\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    };\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    VisualElementDragControls.prototype.scalePositionWithinConstraints = function () {\n        var _this = this;\n        var _a;\n        var _b = this.getProps(), drag = _b.drag, dragConstraints = _b.dragConstraints;\n        var projection = this.visualElement.projection;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        var boxProgress = { x: 0, y: 0 };\n        eachAxis(function (axis) {\n            var axisValue = _this.getAxisMotionValue(axis);\n            if (axisValue) {\n                var latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, _this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        var transformTemplate = this.visualElement.getProps().transformTemplate;\n        this.visualElement.getInstance().style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis(function (axis) {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            var axisValue = _this.getAxisMotionValue(axis);\n            var _a = _this.constraints[axis], min = _a.min, max = _a.max;\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    };\n    VisualElementDragControls.prototype.addListeners = function () {\n        var _this = this;\n        var _a;\n        elementDragControls.set(this.visualElement, this);\n        var element = this.visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n            var _a = _this.getProps(), drag = _a.drag, _b = _a.dragListener, dragListener = _b === void 0 ? true : _b;\n            drag && dragListener && _this.start(event);\n        });\n        var measureDragConstraints = function () {\n            var dragConstraints = _this.getProps().dragConstraints;\n            if (isRefObject(dragConstraints)) {\n                _this.constraints = _this.resolveRefConstraints();\n            }\n        };\n        var projection = this.visualElement.projection;\n        var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        var stopResizeListener = addDomEvent(window, \"resize\", function () {\n            return _this.scalePositionWithinConstraints();\n        });\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        projection.addEventListener(\"didUpdate\", (function (_a) {\n            var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged;\n            if (_this.isDragging && hasLayoutChanged) {\n                eachAxis(function (axis) {\n                    var motionValue = _this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    _this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                _this.visualElement.syncRender();\n            }\n        }));\n        return function () {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n        };\n    };\n    VisualElementDragControls.prototype.getProps = function () {\n        var props = this.visualElement.getProps();\n        var _a = props.drag, drag = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic = _e === void 0 ? defaultElastic : _e, _f = props.dragMomentum, dragMomentum = _f === void 0 ? true : _f;\n        return __assign(__assign({}, props), { drag: drag, dragDirectionLock: dragDirectionLock, dragPropagation: dragPropagation, dragConstraints: dragConstraints, dragElastic: dragElastic, dragMomentum: dragMomentum });\n    };\n    return VisualElementDragControls;\n}());\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold) {\n    if (lockThreshold === void 0) { lockThreshold = 10; }\n    var direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}