{"ast":null,"code":"import { animateStyle } from './animate-style.es.js';\nimport { getOptions } from './utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { withControls } from './utils/controls.es.js';\nimport { resolveOption } from '../utils/stagger.es.js';\n\nfunction animate(elements, keyframes) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  elements = resolveElements(elements);\n  const numElements = elements.length;\n  /**\n   * Create and start new animations\n   */\n\n  const animationFactories = [];\n\n  for (let i = 0; i < numElements; i++) {\n    const element = elements[i];\n\n    for (const key in keyframes) {\n      const valueOptions = getOptions(options, key);\n      valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);\n      const animation = animateStyle(element, key, keyframes[key], valueOptions);\n      animationFactories.push(animation);\n    }\n  }\n\n  return withControls(animationFactories, options,\n  /**\n   * TODO:\n   * If easing is set to spring or glide, duration will be dynamically\n   * generated. Ideally we would dynamically generate this from\n   * animation.effect.getComputedTiming().duration but this isn't\n   * supported in iOS13 or our number polyfill. Perhaps it's possible\n   * to Proxy animations returned from animateStyle that has duration\n   * as a getter.\n   */\n  options.duration);\n}\n\nexport { animate };","map":{"version":3,"names":["animateStyle","getOptions","resolveElements","withControls","resolveOption","animate","elements","keyframes","options","numElements","length","animationFactories","i","element","key","valueOptions","delay","animation","push","duration"],"sources":["C:/Users/Tejaswini Mahale/Desktop/Hubspot/hubspot/node_modules/@motionone/dom/dist/animate/index.es.js"],"sourcesContent":["import { animateStyle } from './animate-style.es.js';\nimport { getOptions } from './utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { withControls } from './utils/controls.es.js';\nimport { resolveOption } from '../utils/stagger.es.js';\n\nfunction animate(elements, keyframes, options = {}) {\n    elements = resolveElements(elements);\n    const numElements = elements.length;\n    /**\n     * Create and start new animations\n     */\n    const animationFactories = [];\n    for (let i = 0; i < numElements; i++) {\n        const element = elements[i];\n        for (const key in keyframes) {\n            const valueOptions = getOptions(options, key);\n            valueOptions.delay = resolveOption(valueOptions.delay, i, numElements);\n            const animation = animateStyle(element, key, keyframes[key], valueOptions);\n            animationFactories.push(animation);\n        }\n    }\n    return withControls(animationFactories, options, \n    /**\n     * TODO:\n     * If easing is set to spring or glide, duration will be dynamically\n     * generated. Ideally we would dynamically generate this from\n     * animation.effect.getComputedTiming().duration but this isn't\n     * supported in iOS13 or our number polyfill. Perhaps it's possible\n     * to Proxy animations returned from animateStyle that has duration\n     * as a getter.\n     */\n    options.duration);\n}\n\nexport { animate };\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,wBAA9B;;AAEA,SAASC,OAAT,CAAiBC,QAAjB,EAA2BC,SAA3B,EAAoD;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAChDF,QAAQ,GAAGJ,eAAe,CAACI,QAAD,CAA1B;EACA,MAAMG,WAAW,GAAGH,QAAQ,CAACI,MAA7B;EACA;AACJ;AACA;;EACI,MAAMC,kBAAkB,GAAG,EAA3B;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAApB,EAAiCG,CAAC,EAAlC,EAAsC;IAClC,MAAMC,OAAO,GAAGP,QAAQ,CAACM,CAAD,CAAxB;;IACA,KAAK,MAAME,GAAX,IAAkBP,SAAlB,EAA6B;MACzB,MAAMQ,YAAY,GAAGd,UAAU,CAACO,OAAD,EAAUM,GAAV,CAA/B;MACAC,YAAY,CAACC,KAAb,GAAqBZ,aAAa,CAACW,YAAY,CAACC,KAAd,EAAqBJ,CAArB,EAAwBH,WAAxB,CAAlC;MACA,MAAMQ,SAAS,GAAGjB,YAAY,CAACa,OAAD,EAAUC,GAAV,EAAeP,SAAS,CAACO,GAAD,CAAxB,EAA+BC,YAA/B,CAA9B;MACAJ,kBAAkB,CAACO,IAAnB,CAAwBD,SAAxB;IACH;EACJ;;EACD,OAAOd,YAAY,CAACQ,kBAAD,EAAqBH,OAArB;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIA,OAAO,CAACW,QAVW,CAAnB;AAWH;;AAED,SAASd,OAAT"},"metadata":{},"sourceType":"module"}