{"ast":null,"code":"import { mergeProps as $7CUUz$mergeProps, filterDOMProps as $7CUUz$filterDOMProps } from \"@react-aria/utils\";\nimport { useFocusable as $7CUUz$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $7CUUz$usePress } from \"@react-aria/interactions\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $d2c8e2b0480f3f34$exports = {};\n$parcel$export($d2c8e2b0480f3f34$exports, \"useToggle\", () => $d2c8e2b0480f3f34$export$cbe85ee05b554577);\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  let {\n    isDisabled = false,\n    isRequired: isRequired,\n    isReadOnly: isReadOnly,\n    value: value,\n    name: name,\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = e => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility'); // This handles focusing the input on pointer down, which Safari does not do by default.\n\n  let {\n    pressProps: pressProps\n  } = $7CUUz$usePress({\n    isDisabled: isDisabled\n  });\n  let {\n    focusableProps: focusableProps\n  } = $7CUUz$useFocusable(props, ref);\n  let interactions = $7CUUz$mergeProps(pressProps, focusableProps);\n  let domProps = $7CUUz$filterDOMProps(props, {\n    labelable: true\n  });\n  return {\n    inputProps: $7CUUz$mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange: onChange,\n      disabled: isDisabled,\n      value: value,\n      name: name,\n      type: 'checkbox',\n      ...interactions\n    })\n  };\n}\n\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;SA6BgBA,0CAAUC,OAAwBC,OAAoBC,KAAyC;EAC7G,IAAI;IACFC,UAAU,GAAG,KADX;IACgBC,YAClBA,UAFE;IAEQC,YACVA,UAHE;IAGQC,OACVA,KAJE;IAIGC,MACLA,IALE;IAKEC,UACJA,QANE;IAOF,cAAcC,SAPZ;IAQF,mBAAmBC,cARjB;IASFC,eAAe,GAAG;EAThB,IAUAX,KAVJ;;EAYA,IAAIY,QAAQ,GAAIC,CAAJ,IAAU;IACpB;IACA;IACAA,CAAC,CAACC,eAAF;IACAb,KAAK,CAACc,WAAN,CAAkBF,CAAC,CAACG,MAAF,CAASC,OAA3B;EACD,CALD;;EAOA,IAAIC,WAAW,GAAGV,QAAQ,IAAI,IAA9B;EACA,IAAIW,YAAY,GAAGV,SAAS,IAAI,IAAb,IAAqBC,cAAc,IAAI,IAA1D;EACA,IAAE,CAAGQ,WAAH,IAAc,CAAKC,YAArB,EACEC,OAAO,CAACC,IAAR,CAAa,kFAAb,EAvB2G,CA0B7G;;EACA,IAAI;IAACC;EAAD,IAAeC,eAAQ,CAAC;gBAC1BpB;EAD0B,CAAD,CAA3B;EAIA,IAAI;IAACqB;EAAD,IAAmBC,mBAAY,CAACzB,KAAD,EAAQE,GAAR,CAAnC;EACA,IAAIwB,YAAY,GAAGC,iBAAU,CAACL,UAAD,EAAaE,cAAb,CAA7B;EACA,IAAII,QAAQ,GAAGC,qBAAc,CAAC7B,KAAD,EAAQ;IAAC8B,SAAS,EAAE;EAAZ,CAAR,CAA7B;EAEA,OAAO;IACLC,UAAU,EAAEJ,iBAAU,CAACC,QAAD,EAAW;MAC/B,gBAAgBjB,eAAe,KAAK,SAApB,IAAiCqB,SADlB;MAE/B,qBAAqBhC,KAAK,CAAC,mBAAD,CAFK;MAG/B,iBAAiBA,KAAK,CAAC,eAAD,CAHS;MAI/B,iBAAiBK,UAAU,IAAI2B,SAJA;MAK/B,iBAAiB5B,UAAU,IAAI4B,SALA;gBAM/BpB,QAN+B;MAO/BqB,QAAQ,EAAE9B,UAPqB;aAQ/BG,KAR+B;YAS/BC,IAT+B;MAU/B2B,IAAI,EAAE,UAVyB;SAW5BR;IAX4B,CAAX;EADjB,CAAP;AAeD","names":["$d2c8e2b0480f3f34$export$cbe85ee05b554577","props","state","ref","isDisabled","isRequired","isReadOnly","value","name","children","ariaLabel","ariaLabelledby","validationState","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","console","warn","pressProps","$7CUUz$usePress","focusableProps","$7CUUz$useFocusable","interactions","$7CUUz$mergeProps","domProps","$7CUUz$filterDOMProps","labelable","inputProps","undefined","disabled","type"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\toggle\\dist\\packages\\@react-aria\\toggle\\src\\useToggle.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {InputHTMLAttributes, RefObject} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /**\n   * Props to be spread on the input element.\n   */\n  inputProps: InputHTMLAttributes<HTMLInputElement>\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLElement>): ToggleAria {\n  let {\n    isDisabled = false,\n    isRequired,\n    isReadOnly,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid'\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps} = usePress({\n    isDisabled\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  return {\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onChange,\n      disabled: isDisabled,\n      value,\n      name,\n      type: 'checkbox',\n      ...interactions\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}