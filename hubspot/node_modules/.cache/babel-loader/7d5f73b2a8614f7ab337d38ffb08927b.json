{"ast":null,"code":"import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.mjs';\n\nvar visualElement = function (_a) {\n  var _b = _a.treeType,\n      treeType = _b === void 0 ? \"\" : _b,\n      build = _a.build,\n      getBaseTarget = _a.getBaseTarget,\n      makeTargetAnimatable = _a.makeTargetAnimatable,\n      measureViewportBox = _a.measureViewportBox,\n      renderInstance = _a.render,\n      readValueFromInstance = _a.readValueFromInstance,\n      removeValueFromRenderState = _a.removeValueFromRenderState,\n      sortNodePosition = _a.sortNodePosition,\n      scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n  return function (_a, options) {\n    var parent = _a.parent,\n        props = _a.props,\n        presenceId = _a.presenceId,\n        blockInitialAnimation = _a.blockInitialAnimation,\n        visualState = _a.visualState,\n        shouldReduceMotion = _a.shouldReduceMotion;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var isMounted = false;\n    var latestValues = visualState.latestValues,\n        renderState = visualState.renderState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n\n    var instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n\n    var lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    var values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    var valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    var prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n\n    var baseTarget = __assign({}, latestValues); // Internal methods ========================\n\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n\n\n    var removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n\n    function render() {\n      if (!instance || !isMounted) return;\n      triggerBuild();\n      renderInstance(instance, renderState, props.style, element.projection);\n    }\n\n    function triggerBuild() {\n      build(element, renderState, latestValues, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n\n\n    function bindToMotionValue(key, value) {\n      var removeOnChange = value.onChange(function (latestValue) {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n\n    var initialMotionValues = scrapeMotionValuesFromProps(props);\n\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n\n    var isControllingVariants = checkIfControllingVariants(props);\n    var isVariantNode = checkIfVariantNode(props);\n\n    var element = __assign(__assign({\n      treeType: treeType,\n\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent: parent,\n      children: new Set(),\n\n      /**\n       *\n       */\n      presenceId: presenceId,\n      shouldReduceMotion: shouldReduceMotion,\n\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode ? new Set() : undefined,\n\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by the projection tree, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation: blockInitialAnimation,\n\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: function () {\n        return Boolean(instance);\n      },\n      mount: function (newInstance) {\n        isMounted = true;\n        instance = element.current = newInstance;\n\n        if (element.projection) {\n          element.projection.mount(newInstance);\n        }\n\n        if (isVariantNode && parent && !isControllingVariants) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n\n        values.forEach(function (value, key) {\n          return bindToMotionValue(key, value);\n        });\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n        element.setProps(props);\n      },\n\n      /**\n       *\n       */\n      unmount: function () {\n        var _a;\n\n        (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(update);\n        cancelSync.render(render);\n        valueSubscriptions.forEach(function (remove) {\n          return remove();\n        });\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        lifecycles.clearAllListeners();\n        instance = undefined;\n        isMounted = false;\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild: function (child) {\n        var _a;\n\n        var closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return function () {\n            return closestVariantNode.variantChildren.delete(child);\n          };\n        }\n      },\n      sortNodePosition: function (other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: function () {\n        return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n      },\n\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: function () {\n        return props.layoutId;\n      },\n\n      /**\n       * Returns the current instance.\n       */\n      getInstance: function () {\n        return instance;\n      },\n\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: function (key) {\n        return latestValues[key];\n      },\n      setStaticValue: function (key, value) {\n        return latestValues[key] = value;\n      },\n\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: function () {\n        return latestValues;\n      },\n\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility: function (visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable: function (target, canMutate) {\n        if (canMutate === void 0) {\n          canMutate = true;\n        }\n\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox: function () {\n        return measureViewportBox(instance, props);\n      },\n      // Motion values ========================\n\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue: function (key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue: function (key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: function (key) {\n        return values.has(key);\n      },\n\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue: function (key, defaultValue) {\n        var value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: function (callback) {\n        return values.forEach(callback);\n      },\n\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: function (key) {\n        var _a;\n\n        return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n      },\n\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget: function (key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget: function (key) {\n        if (getBaseTarget) {\n          var target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n\n        return baseTarget[key];\n      }\n    }, lifecycles), {\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build: function () {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender: function () {\n        sync.render(render, false, true);\n      },\n\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps: function (newProps) {\n        if (newProps.transformTemplate || props.transformTemplate) {\n          element.scheduleRender();\n        }\n\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: function () {\n        return props;\n      },\n      // Variants ==============================\n\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: function (name) {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: function () {\n        return props.transition;\n      },\n      getTransformPagePoint: function () {\n        return props.transformPagePoint;\n      },\n\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext: function (startAtParent) {\n        if (startAtParent === void 0) {\n          startAtParent = false;\n        }\n\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants) {\n          var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            context_1.initial = props.initial;\n          }\n\n          return context_1;\n        }\n\n        var context = {};\n\n        for (var i = 0; i < numVariantProps; i++) {\n          var name_1 = variantProps[i];\n          var prop = props[name_1];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name_1] = prop;\n          }\n        }\n\n        return context;\n      }\n    });\n\n    return element;\n  };\n};\n\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder), false);\n\nvar numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["__assign","__spreadArray","__read","sync","cancelSync","motionValue","isMotionValue","variantPriorityOrder","createLifecycles","updateMotionValuesFromProps","checkIfControllingVariants","checkIfVariantNode","isVariantLabel","visualElement","_a","_b","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","renderInstance","render","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","options","parent","props","presenceId","blockInitialAnimation","visualState","shouldReduceMotion","isMounted","latestValues","renderState","instance","lifecycles","values","Map","valueSubscriptions","prevMotionValues","baseTarget","removeFromVariantTree","triggerBuild","style","element","projection","update","notifyUpdate","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","scheduleRender","set","initialMotionValues","undefined","isControllingVariants","isVariantNode","current","depth","children","Set","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","mount","newInstance","addVariantChild","forEach","add","setProps","unmount","remove","delete","clearAllListeners","child","closestVariantNode","getClosestVariantNode","other","getInstance","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","setVisibility","visibility","target","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","syncRender","newProps","transformTemplate","updatePropListeners","getProps","getVariant","name","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getVariantContext","startAtParent","context_1","initial","context","i","numVariantProps","name_1","variantProps","prop","length"],"sources":["C:/Users/Tejaswini Mahale/Desktop/Hubspot/hubspot/node_modules/framer-motion/dist/es/render/index.mjs"],"sourcesContent":["import { __assign, __spreadArray, __read } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.mjs';\n\nvar visualElement = function (_a) {\n    var _b = _a.treeType, treeType = _b === void 0 ? \"\" : _b, build = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps = _a.scrapeMotionValuesFromProps;\n    return function (_a, options) {\n        var parent = _a.parent, props = _a.props, presenceId = _a.presenceId, blockInitialAnimation = _a.blockInitialAnimation, visualState = _a.visualState, shouldReduceMotion = _a.shouldReduceMotion;\n        if (options === void 0) { options = {}; }\n        var isMounted = false;\n        var latestValues = visualState.latestValues, renderState = visualState.renderState;\n        /**\n         * The instance of the render-specific node that will be hydrated by the\n         * exposed React ref. So for example, this visual element can host a\n         * HTMLElement, plain object, or Three.js object. The functions provided\n         * in VisualElementConfig allow us to interface with this instance.\n         */\n        var instance;\n        /**\n         * Manages the subscriptions for a visual element's lifecycle, for instance\n         * onRender\n         */\n        var lifecycles = createLifecycles();\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        var values = new Map();\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        var valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        var prevMotionValues = {};\n        /**\n         * When values are removed from all animation props we need to search\n         * for a fallback value to animate to. These values are tracked in baseTarget.\n         */\n        var baseTarget = __assign({}, latestValues);\n        // Internal methods ========================\n        /**\n         * On mount, this will be hydrated with a callback to disconnect\n         * this visual element from its parent on unmount.\n         */\n        var removeFromVariantTree;\n        /**\n         * Render the element with the latest styles outside of the React\n         * render lifecycle\n         */\n        function render() {\n            if (!instance || !isMounted)\n                return;\n            triggerBuild();\n            renderInstance(instance, renderState, props.style, element.projection);\n        }\n        function triggerBuild() {\n            build(element, renderState, latestValues, options, props);\n        }\n        function update() {\n            lifecycles.notifyUpdate(latestValues);\n        }\n        /**\n         *\n         */\n        function bindToMotionValue(key, value) {\n            var removeOnChange = value.onChange(function (latestValue) {\n                latestValues[key] = latestValue;\n                props.onUpdate && sync.update(update, false, true);\n            });\n            var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n            valueSubscriptions.set(key, function () {\n                removeOnChange();\n                removeOnRenderRequest();\n            });\n        }\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't neccessarily a breaking change,\n         * more a reflection of the test.\n         */\n        var initialMotionValues = scrapeMotionValuesFromProps(props);\n        for (var key in initialMotionValues) {\n            var value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        var isControllingVariants = checkIfControllingVariants(props);\n        var isVariantNode = checkIfVariantNode(props);\n        var element = __assign(__assign({ treeType: treeType, \n            /**\n             * This is a mirror of the internal instance prop, which keeps\n             * VisualElement type-compatible with React's RefObject.\n             */\n            current: null, \n            /**\n             * The depth of this visual element within the visual element tree.\n             */\n            depth: parent ? parent.depth + 1 : 0, parent: parent, children: new Set(), \n            /**\n             *\n             */\n            presenceId: presenceId, shouldReduceMotion: shouldReduceMotion, \n            /**\n             * If this component is part of the variant tree, it should track\n             * any children that are also part of the tree. This is essentially\n             * a shadow tree to simplify logic around how to stagger over children.\n             */\n            variantChildren: isVariantNode ? new Set() : undefined, \n            /**\n             * Whether this instance is visible. This can be changed imperatively\n             * by the projection tree, is analogous to CSS's visibility in that\n             * hidden elements should take up layout, and needs enacting by the configured\n             * render function.\n             */\n            isVisible: undefined, \n            /**\n             * Normally, if a component is controlled by a parent's variants, it can\n             * rely on that ancestor to trigger animations further down the tree.\n             * However, if a component is created after its parent is mounted, the parent\n             * won't trigger that mount animation so the child needs to.\n             *\n             * TODO: This might be better replaced with a method isParentMounted\n             */\n            manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \n            /**\n             * This can be set by AnimatePresence to force components that mount\n             * at the same time as it to mount as if they have initial={false} set.\n             */\n            blockInitialAnimation: blockInitialAnimation, \n            /**\n             * Determine whether this component has mounted yet. This is mostly used\n             * by variant children to determine whether they need to trigger their\n             * own animations on mount.\n             */\n            isMounted: function () { return Boolean(instance); }, mount: function (newInstance) {\n                isMounted = true;\n                instance = element.current = newInstance;\n                if (element.projection) {\n                    element.projection.mount(newInstance);\n                }\n                if (isVariantNode && parent && !isControllingVariants) {\n                    removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n                }\n                values.forEach(function (value, key) { return bindToMotionValue(key, value); });\n                parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n                element.setProps(props);\n            }, \n            /**\n             *\n             */\n            unmount: function () {\n                var _a;\n                (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n                cancelSync.update(update);\n                cancelSync.render(render);\n                valueSubscriptions.forEach(function (remove) { return remove(); });\n                removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n                parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n                lifecycles.clearAllListeners();\n                instance = undefined;\n                isMounted = false;\n            }, \n            /**\n             * Add a child visual element to our set of children.\n             */\n            addVariantChild: function (child) {\n                var _a;\n                var closestVariantNode = element.getClosestVariantNode();\n                if (closestVariantNode) {\n                    (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                    return function () {\n                        return closestVariantNode.variantChildren.delete(child);\n                    };\n                }\n            }, sortNodePosition: function (other) {\n                /**\n                 * If these nodes aren't even of the same type we can't compare their depth.\n                 */\n                if (!sortNodePosition || treeType !== other.treeType)\n                    return 0;\n                return sortNodePosition(element.getInstance(), other.getInstance());\n            }, \n            /**\n             * Returns the closest variant node in the tree starting from\n             * this visual element.\n             */\n            getClosestVariantNode: function () {\n                return isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n            }, \n            /**\n             * Expose the latest layoutId prop.\n             */\n            getLayoutId: function () { return props.layoutId; }, \n            /**\n             * Returns the current instance.\n             */\n            getInstance: function () { return instance; }, \n            /**\n             * Get/set the latest static values.\n             */\n            getStaticValue: function (key) { return latestValues[key]; }, setStaticValue: function (key, value) { return (latestValues[key] = value); }, \n            /**\n             * Returns the latest motion value state. Currently only used to take\n             * a snapshot of the visual element - perhaps this can return the whole\n             * visual state\n             */\n            getLatestValues: function () { return latestValues; }, \n            /**\n             * Set the visiblity of the visual element. If it's changed, schedule\n             * a render to reflect these changes.\n             */\n            setVisibility: function (visibility) {\n                if (element.isVisible === visibility)\n                    return;\n                element.isVisible = visibility;\n                element.scheduleRender();\n            }, \n            /**\n             * Make a target animatable by Popmotion. For instance, if we're\n             * trying to animate width from 100px to 100vw we need to measure 100vw\n             * in pixels to determine what we really need to animate to. This is also\n             * pluggable to support Framer's custom value types like Color,\n             * and CSS variables.\n             */\n            makeTargetAnimatable: function (target, canMutate) {\n                if (canMutate === void 0) { canMutate = true; }\n                return makeTargetAnimatable(element, target, props, canMutate);\n            }, \n            /**\n             * Measure the current viewport box with or without transforms.\n             * Only measures axis-aligned boxes, rotate and skew must be manually\n             * removed with a re-render to work.\n             */\n            measureViewportBox: function () {\n                return measureViewportBox(instance, props);\n            }, \n            // Motion values ========================\n            /**\n             * Add a motion value and bind it to this visual element.\n             */\n            addValue: function (key, value) {\n                // Remove existing value if it exists\n                if (element.hasValue(key))\n                    element.removeValue(key);\n                values.set(key, value);\n                latestValues[key] = value.get();\n                bindToMotionValue(key, value);\n            }, \n            /**\n             * Remove a motion value and unbind any active subscriptions.\n             */\n            removeValue: function (key) {\n                var _a;\n                values.delete(key);\n                (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n                valueSubscriptions.delete(key);\n                delete latestValues[key];\n                removeValueFromRenderState(key, renderState);\n            }, \n            /**\n             * Check whether we have a motion value for this key\n             */\n            hasValue: function (key) { return values.has(key); }, \n            /**\n             * Get a motion value for this key. If called with a default\n             * value, we'll create one if none exists.\n             */\n            getValue: function (key, defaultValue) {\n                var value = values.get(key);\n                if (value === undefined && defaultValue !== undefined) {\n                    value = motionValue(defaultValue);\n                    element.addValue(key, value);\n                }\n                return value;\n            }, \n            /**\n             * Iterate over our motion values.\n             */\n            forEachValue: function (callback) { return values.forEach(callback); }, \n            /**\n             * If we're trying to animate to a previously unencountered value,\n             * we need to check for it in our state and as a last resort read it\n             * directly from the instance (which might have performance implications).\n             */\n            readValue: function (key) {\n                var _a;\n                return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n            }, \n            /**\n             * Set the base target to later animate back to. This is currently\n             * only hydrated on creation and when we first read a value.\n             */\n            setBaseTarget: function (key, value) {\n                baseTarget[key] = value;\n            }, \n            /**\n             * Find the base target for a value thats been removed from all animation\n             * props.\n             */\n            getBaseTarget: function (key) {\n                if (getBaseTarget) {\n                    var target = getBaseTarget(props, key);\n                    if (target !== undefined && !isMotionValue(target))\n                        return target;\n                }\n                return baseTarget[key];\n            } }, lifecycles), { \n            /**\n             * Build the renderer state based on the latest visual state.\n             */\n            build: function () {\n                triggerBuild();\n                return renderState;\n            }, \n            /**\n             * Schedule a render on the next animation frame.\n             */\n            scheduleRender: function () {\n                sync.render(render, false, true);\n            }, \n            /**\n             * Synchronously fire render. It's prefered that we batch renders but\n             * in many circumstances, like layout measurement, we need to run this\n             * synchronously. However in those instances other measures should be taken\n             * to batch reads/writes.\n             */\n            syncRender: render, \n            /**\n             * Update the provided props. Ensure any newly-added motion values are\n             * added to our map, old ones removed, and listeners updated.\n             */\n            setProps: function (newProps) {\n                if (newProps.transformTemplate || props.transformTemplate) {\n                    element.scheduleRender();\n                }\n                props = newProps;\n                lifecycles.updatePropListeners(newProps);\n                prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n            }, getProps: function () { return props; }, \n            // Variants ==============================\n            /**\n             * Returns the variant definition with a given name.\n             */\n            getVariant: function (name) { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \n            /**\n             * Returns the defined default transition on this component.\n             */\n            getDefaultTransition: function () { return props.transition; }, getTransformPagePoint: function () {\n                return props.transformPagePoint;\n            }, \n            /**\n             * Used by child variant nodes to get the closest ancestor variant props.\n             */\n            getVariantContext: function (startAtParent) {\n                if (startAtParent === void 0) { startAtParent = false; }\n                if (startAtParent)\n                    return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n                if (!isControllingVariants) {\n                    var context_1 = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                    if (props.initial !== undefined) {\n                        context_1.initial = props.initial;\n                    }\n                    return context_1;\n                }\n                var context = {};\n                for (var i = 0; i < numVariantProps; i++) {\n                    var name_1 = variantProps[i];\n                    var prop = props[name_1];\n                    if (isVariantLabel(prop) || prop === false) {\n                        context[name_1] = prop;\n                    }\n                }\n                return context;\n            } });\n        return element;\n    };\n};\nvar variantProps = __spreadArray([\"initial\"], __read(variantPriorityOrder), false);\nvar numVariantProps = variantProps.length;\n\nexport { visualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}