{"ast":null,"code":"import { interpolate, defaultOffset } from '@motionone/utils';\nimport { calcInset } from './inset.es.js';\nimport { ScrollOffset } from './presets.es.js';\nimport { resolveOffset } from './offset.es.js';\nconst point = {\n  x: 0,\n  y: 0\n};\n\nfunction resolveOffsets(container, info, options) {\n  let {\n    offset: offsetDefinition = ScrollOffset.All\n  } = options;\n  const {\n    target = container,\n    axis = \"y\"\n  } = options;\n  const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n  const inset = target !== container ? calcInset(target, container) : point;\n  /**\n   * Measure the target and container. If they're the same thing then we\n   * use the container's scrollWidth/Height as the target, from there\n   * all other calculations can remain the same.\n   */\n\n  const targetSize = target === container ? {\n    width: container.scrollWidth,\n    height: container.scrollHeight\n  } : {\n    width: target.clientWidth,\n    height: target.clientHeight\n  };\n  const containerSize = {\n    width: container.clientWidth,\n    height: container.clientHeight\n  };\n  /**\n   * Reset the length of the resolved offset array rather than creating a new one.\n   * TODO: More reusable data structures for targetSize/containerSize would also be good.\n   */\n\n  info[axis].offset.length = 0;\n  /**\n   * Populate the offset array by resolving the user's offset definition into\n   * a list of pixel scroll offets.\n   */\n\n  let hasChanged = !info[axis].interpolate;\n  const numOffsets = offsetDefinition.length;\n\n  for (let i = 0; i < numOffsets; i++) {\n    const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n\n    if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n      hasChanged = true;\n    }\n\n    info[axis].offset[i] = offset;\n  }\n  /**\n   * If the pixel scroll offsets have changed, create a new interpolator function\n   * to map scroll value into a progress.\n   */\n\n\n  if (hasChanged) {\n    info[axis].interpolate = interpolate(defaultOffset(numOffsets), info[axis].offset);\n    info[axis].interpolatorOffsets = [...info[axis].offset];\n  }\n\n  info[axis].progress = info[axis].interpolate(info[axis].current);\n}\n\nexport { resolveOffsets };","map":{"version":3,"names":["interpolate","defaultOffset","calcInset","ScrollOffset","resolveOffset","point","x","y","resolveOffsets","container","info","options","offset","offsetDefinition","All","target","axis","lengthLabel","inset","targetSize","width","scrollWidth","height","scrollHeight","clientWidth","clientHeight","containerSize","length","hasChanged","numOffsets","i","interpolatorOffsets","progress","current"],"sources":["C:/Users/Tejaswini Mahale/Desktop/Hubspot/hubspot/node_modules/@motionone/dom/dist/gestures/scroll/offsets/index.es.js"],"sourcesContent":["import { interpolate, defaultOffset } from '@motionone/utils';\nimport { calcInset } from './inset.es.js';\nimport { ScrollOffset } from './presets.es.js';\nimport { resolveOffset } from './offset.es.js';\n\nconst point = { x: 0, y: 0 };\nfunction resolveOffsets(container, info, options) {\n    let { offset: offsetDefinition = ScrollOffset.All } = options;\n    const { target = container, axis = \"y\" } = options;\n    const lengthLabel = axis === \"y\" ? \"height\" : \"width\";\n    const inset = target !== container ? calcInset(target, container) : point;\n    /**\n     * Measure the target and container. If they're the same thing then we\n     * use the container's scrollWidth/Height as the target, from there\n     * all other calculations can remain the same.\n     */\n    const targetSize = target === container\n        ? { width: container.scrollWidth, height: container.scrollHeight }\n        : { width: target.clientWidth, height: target.clientHeight };\n    const containerSize = {\n        width: container.clientWidth,\n        height: container.clientHeight,\n    };\n    /**\n     * Reset the length of the resolved offset array rather than creating a new one.\n     * TODO: More reusable data structures for targetSize/containerSize would also be good.\n     */\n    info[axis].offset.length = 0;\n    /**\n     * Populate the offset array by resolving the user's offset definition into\n     * a list of pixel scroll offets.\n     */\n    let hasChanged = !info[axis].interpolate;\n    const numOffsets = offsetDefinition.length;\n    for (let i = 0; i < numOffsets; i++) {\n        const offset = resolveOffset(offsetDefinition[i], containerSize[lengthLabel], targetSize[lengthLabel], inset[axis]);\n        if (!hasChanged && offset !== info[axis].interpolatorOffsets[i]) {\n            hasChanged = true;\n        }\n        info[axis].offset[i] = offset;\n    }\n    /**\n     * If the pixel scroll offsets have changed, create a new interpolator function\n     * to map scroll value into a progress.\n     */\n    if (hasChanged) {\n        info[axis].interpolate = interpolate(defaultOffset(numOffsets), info[axis].offset);\n        info[axis].interpolatorOffsets = [...info[axis].offset];\n    }\n    info[axis].progress = info[axis].interpolate(info[axis].current);\n}\n\nexport { resolveOffsets };\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,aAAtB,QAA2C,kBAA3C;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,MAAMC,KAAK,GAAG;EAAEC,CAAC,EAAE,CAAL;EAAQC,CAAC,EAAE;AAAX,CAAd;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmCC,IAAnC,EAAyCC,OAAzC,EAAkD;EAC9C,IAAI;IAAEC,MAAM,EAAEC,gBAAgB,GAAGV,YAAY,CAACW;EAA1C,IAAkDH,OAAtD;EACA,MAAM;IAAEI,MAAM,GAAGN,SAAX;IAAsBO,IAAI,GAAG;EAA7B,IAAqCL,OAA3C;EACA,MAAMM,WAAW,GAAGD,IAAI,KAAK,GAAT,GAAe,QAAf,GAA0B,OAA9C;EACA,MAAME,KAAK,GAAGH,MAAM,KAAKN,SAAX,GAAuBP,SAAS,CAACa,MAAD,EAASN,SAAT,CAAhC,GAAsDJ,KAApE;EACA;AACJ;AACA;AACA;AACA;;EACI,MAAMc,UAAU,GAAGJ,MAAM,KAAKN,SAAX,GACb;IAAEW,KAAK,EAAEX,SAAS,CAACY,WAAnB;IAAgCC,MAAM,EAAEb,SAAS,CAACc;EAAlD,CADa,GAEb;IAAEH,KAAK,EAAEL,MAAM,CAACS,WAAhB;IAA6BF,MAAM,EAAEP,MAAM,CAACU;EAA5C,CAFN;EAGA,MAAMC,aAAa,GAAG;IAClBN,KAAK,EAAEX,SAAS,CAACe,WADC;IAElBF,MAAM,EAAEb,SAAS,CAACgB;EAFA,CAAtB;EAIA;AACJ;AACA;AACA;;EACIf,IAAI,CAACM,IAAD,CAAJ,CAAWJ,MAAX,CAAkBe,MAAlB,GAA2B,CAA3B;EACA;AACJ;AACA;AACA;;EACI,IAAIC,UAAU,GAAG,CAAClB,IAAI,CAACM,IAAD,CAAJ,CAAWhB,WAA7B;EACA,MAAM6B,UAAU,GAAGhB,gBAAgB,CAACc,MAApC;;EACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAApB,EAAgCC,CAAC,EAAjC,EAAqC;IACjC,MAAMlB,MAAM,GAAGR,aAAa,CAACS,gBAAgB,CAACiB,CAAD,CAAjB,EAAsBJ,aAAa,CAACT,WAAD,CAAnC,EAAkDE,UAAU,CAACF,WAAD,CAA5D,EAA2EC,KAAK,CAACF,IAAD,CAAhF,CAA5B;;IACA,IAAI,CAACY,UAAD,IAAehB,MAAM,KAAKF,IAAI,CAACM,IAAD,CAAJ,CAAWe,mBAAX,CAA+BD,CAA/B,CAA9B,EAAiE;MAC7DF,UAAU,GAAG,IAAb;IACH;;IACDlB,IAAI,CAACM,IAAD,CAAJ,CAAWJ,MAAX,CAAkBkB,CAAlB,IAAuBlB,MAAvB;EACH;EACD;AACJ;AACA;AACA;;;EACI,IAAIgB,UAAJ,EAAgB;IACZlB,IAAI,CAACM,IAAD,CAAJ,CAAWhB,WAAX,GAAyBA,WAAW,CAACC,aAAa,CAAC4B,UAAD,CAAd,EAA4BnB,IAAI,CAACM,IAAD,CAAJ,CAAWJ,MAAvC,CAApC;IACAF,IAAI,CAACM,IAAD,CAAJ,CAAWe,mBAAX,GAAiC,CAAC,GAAGrB,IAAI,CAACM,IAAD,CAAJ,CAAWJ,MAAf,CAAjC;EACH;;EACDF,IAAI,CAACM,IAAD,CAAJ,CAAWgB,QAAX,GAAsBtB,IAAI,CAACM,IAAD,CAAJ,CAAWhB,WAAX,CAAuBU,IAAI,CAACM,IAAD,CAAJ,CAAWiB,OAAlC,CAAtB;AACH;;AAED,SAASzB,cAAT"},"metadata":{},"sourceType":"module"}