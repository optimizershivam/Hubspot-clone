{"ast":null,"code":"import { useSlotId as $m1DSs$useSlotId, filterDOMProps as $m1DSs$filterDOMProps } from \"@react-aria/utils\";\nimport { focusSafely as $m1DSs$focusSafely } from \"@react-aria/focus\";\nimport { useEffect as $m1DSs$useEffect } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $40df3f8667284809$exports = {};\n$parcel$export($40df3f8667284809$exports, \"useDialog\", () => $40df3f8667284809$export$d55e7ee900f34e93);\n\nfunction $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {\n  let {\n    role = 'dialog'\n  } = props;\n  let titleId = $m1DSs$useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId; // Focus the dialog itself on mount, unless a child element is already focused.\n\n  $m1DSs$useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      $m1DSs$focusSafely(ref.current); // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          $m1DSs$focusSafely(ref.current);\n        }\n      }, 500);\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]); // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n\n  return {\n    dialogProps: { ...$m1DSs$filterDOMProps(props, {\n        labelable: true\n      }),\n      role: role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n\nexport { $40df3f8667284809$export$d55e7ee900f34e93 as useDialog };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;SA6BgBA,0CAAUC,OAAwBC,KAAyC;EACzF,IAAI;IAACC,IAAI,GAAG;EAAR,IAAoBF,KAAxB;EACA,IAAIG,OAAO,GAAGC,gBAAS,EAAvB;EACAD,OAAO,GAAGH,KAAK,CAAC,YAAD,CAAL,GAAsBK,SAAtB,GAAkCF,OAA5C,CAHyF,CAKzF;;EACAG,gBAAS,OAAO;IACd,IAAIL,GAAG,CAACM,OAAJ,IAAW,CAAKN,GAAG,CAACM,OAAJ,CAAYC,QAAZ,CAAqBC,QAAQ,CAACC,aAA9B,CAApB,EAAkE;MAChEC,kBAAW,CAACV,GAAG,CAACM,OAAL,CAAX,CADgE,CAGhE;MACA;MACA;;MACA,IAAIK,OAAO,GAAGC,UAAU,OAAO;QAC7B,IAAIJ,QAAQ,CAACC,aAAT,KAA2BT,GAAG,CAACM,OAAnC,EAA4C;UAC1CN,GAAG,CAACM,OAAJ,CAAYO,IAAZ;UACAH,kBAAW,CAACV,GAAG,CAACM,OAAL,CAAX;QACD;MACF,CALuB,EAKrB,GALqB,CAAxB;MAOA,OAAM,MAAO;QACXQ,YAAY,CAACH,OAAD,CAAZ;MACD,CAFD;IAGD;EACF,CAlBQ,EAkBN,CAACX,GAAD,CAlBM,CAAT,CANyF,CA0BzF;EACA;EACA;EACA;EACA;;EACA,OAAO;IACLe,WAAW,EAAE,KACRC,qBAAc,CAACjB,KAAD,EAAQ;QAACkB,SAAS,EAAE;MAAZ,CAAR,CADN;YAEXhB,IAFW;MAGXiB,QAAQ,EAAE,EAHC;MAIX,mBAAmBnB,KAAK,CAAC,iBAAD,CAAL,IAA4BG;IAJpC,CADR;IAOLiB,UAAU,EAAE;MACVC,EAAE,EAAElB;IADM;EAPP,CAAP;AAWD","names":["$40df3f8667284809$export$d55e7ee900f34e93","props","ref","role","titleId","$m1DSs$useSlotId","undefined","$m1DSs$useEffect","current","contains","document","activeElement","$m1DSs$focusSafely","timeout","setTimeout","blur","clearTimeout","dialogProps","$m1DSs$filterDOMProps","labelable","tabIndex","titleProps","id"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\dialog\\dist\\packages\\@react-aria\\dialog\\src\\useDialog.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/focus';\nimport {HTMLAttributes, RefObject, useEffect} from 'react';\n\ninterface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: HTMLAttributes<HTMLElement>,\n\n  /** Props for the dialog title element. */\n  titleProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<HTMLElement>): DialogAria {\n  let {role = 'dialog'} = props;\n  let titleId = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        if (document.activeElement === ref.current) {\n          ref.current.blur();\n          focusSafely(ref.current);\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}