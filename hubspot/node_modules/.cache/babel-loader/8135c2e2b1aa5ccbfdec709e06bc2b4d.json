{"ast":null,"code":"import { mix } from './mix.es.js';\nimport { noopReturn } from './noop.es.js';\nimport { fillOffset, defaultOffset } from './offset.es.js';\nimport { progress } from './progress.es.js';\nimport { getEasingForSegment } from './easing.es.js';\nimport { clamp } from './clamp.es.js';\n\nfunction interpolate(output) {\n  let input = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOffset(output.length);\n  let easing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noopReturn;\n  const length = output.length;\n  /**\n   * If the input length is lower than the output we\n   * fill the input to match. This currently assumes the input\n   * is an animation progress value so is a good candidate for\n   * moving outside the function.\n   */\n\n  const remainder = length - input.length;\n  remainder > 0 && fillOffset(input, remainder);\n  return t => {\n    let i = 0;\n\n    for (; i < length - 2; i++) {\n      if (t < input[i + 1]) break;\n    }\n\n    let progressInRange = clamp(0, 1, progress(input[i], input[i + 1], t));\n    const segmentEasing = getEasingForSegment(easing, i);\n    progressInRange = segmentEasing(progressInRange);\n    return mix(output[i], output[i + 1], progressInRange);\n  };\n}\n\nexport { interpolate };","map":{"version":3,"names":["mix","noopReturn","fillOffset","defaultOffset","progress","getEasingForSegment","clamp","interpolate","output","input","length","easing","remainder","t","i","progressInRange","segmentEasing"],"sources":["C:/Users/Tejaswini Mahale/Desktop/boorish-earthquake-4077/hubspot/node_modules/@motionone/utils/dist/interpolate.es.js"],"sourcesContent":["import { mix } from './mix.es.js';\nimport { noopReturn } from './noop.es.js';\nimport { fillOffset, defaultOffset } from './offset.es.js';\nimport { progress } from './progress.es.js';\nimport { getEasingForSegment } from './easing.es.js';\nimport { clamp } from './clamp.es.js';\n\nfunction interpolate(output, input = defaultOffset(output.length), easing = noopReturn) {\n    const length = output.length;\n    /**\n     * If the input length is lower than the output we\n     * fill the input to match. This currently assumes the input\n     * is an animation progress value so is a good candidate for\n     * moving outside the function.\n     */\n    const remainder = length - input.length;\n    remainder > 0 && fillOffset(input, remainder);\n    return (t) => {\n        let i = 0;\n        for (; i < length - 2; i++) {\n            if (t < input[i + 1])\n                break;\n        }\n        let progressInRange = clamp(0, 1, progress(input[i], input[i + 1], t));\n        const segmentEasing = getEasingForSegment(easing, i);\n        progressInRange = segmentEasing(progressInRange);\n        return mix(output[i], output[i + 1], progressInRange);\n    };\n}\n\nexport { interpolate };\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,aAApB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,gBAA1C;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,KAAT,QAAsB,eAAtB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAAwF;EAAA,IAA3DC,KAA2D,uEAAnDN,aAAa,CAACK,MAAM,CAACE,MAAR,CAAsC;EAAA,IAArBC,MAAqB,uEAAZV,UAAY;EACpF,MAAMS,MAAM,GAAGF,MAAM,CAACE,MAAtB;EACA;AACJ;AACA;AACA;AACA;AACA;;EACI,MAAME,SAAS,GAAGF,MAAM,GAAGD,KAAK,CAACC,MAAjC;EACAE,SAAS,GAAG,CAAZ,IAAiBV,UAAU,CAACO,KAAD,EAAQG,SAAR,CAA3B;EACA,OAAQC,CAAD,IAAO;IACV,IAAIC,CAAC,GAAG,CAAR;;IACA,OAAOA,CAAC,GAAGJ,MAAM,GAAG,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;MACxB,IAAID,CAAC,GAAGJ,KAAK,CAACK,CAAC,GAAG,CAAL,CAAb,EACI;IACP;;IACD,IAAIC,eAAe,GAAGT,KAAK,CAAC,CAAD,EAAI,CAAJ,EAAOF,QAAQ,CAACK,KAAK,CAACK,CAAD,CAAN,EAAWL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAhB,EAAyBD,CAAzB,CAAf,CAA3B;IACA,MAAMG,aAAa,GAAGX,mBAAmB,CAACM,MAAD,EAASG,CAAT,CAAzC;IACAC,eAAe,GAAGC,aAAa,CAACD,eAAD,CAA/B;IACA,OAAOf,GAAG,CAACQ,MAAM,CAACM,CAAD,CAAP,EAAYN,MAAM,CAACM,CAAC,GAAG,CAAL,CAAlB,EAA2BC,eAA3B,CAAV;EACH,CAVD;AAWH;;AAED,SAASR,WAAT"},"metadata":{},"sourceType":"module"}