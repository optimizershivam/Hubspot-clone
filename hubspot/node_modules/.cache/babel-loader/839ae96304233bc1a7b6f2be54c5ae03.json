{"ast":null,"code":"import { useControlledState as $b3nuO$useControlledState } from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $587d3ad58be6d31f$exports = {};\n$parcel$export($587d3ad58be6d31f$exports, \"useCheckboxGroupState\", () => $587d3ad58be6d31f$export$daff6da51032a415);\n\nfunction $587d3ad58be6d31f$export$daff6da51032a415() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let [selectedValues, setValue] = $b3nuO$useControlledState(props.value, props.defaultValue || [], props.onChange);\n  const state = {\n    value: selectedValues,\n\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      setValue(value);\n    },\n\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) setValue(selectedValues.concat(value));\n    },\n\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));\n    },\n\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));else setValue(selectedValues.concat(value));\n    }\n\n  };\n  return state;\n}\n\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };","map":{"version":3,"mappings":";;;;;;;;;;;;;;SA6CgBA,4CAA0E;EAAA,IAApDC,KAAoD,uEAAxB,EAAwB;EACxF,IAAG,CAAEC,cAAF,EAAkBC,QAAlB,IAA8BC,yBAAkB,CAACH,KAAK,CAACI,KAAP,EAAcJ,KAAK,CAACK,YAAN,IAAsB,EAApC,EAAwCL,KAAK,CAACM,QAA9C,CAAnD;EAEA,MAAMC,KAAK,GAAuB;IAChCH,KAAK,EAAEH,cADyB;;IAEhCC,QAAQ,CAACE,KAAD,EAAQ;MACd,IAAIJ,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,UAA9B,EACE;MAGFP,QAAQ,CAACE,KAAD,CAAR;IACD,CAR+B;;IAShCK,UAAU,EAAET,KAAK,CAACS,UAAN,IAAoB,KATA;IAUhCD,UAAU,EAAER,KAAK,CAACQ,UAAN,IAAoB,KAVA;;IAWhCE,UAAU,CAACN,KAAD,EAAQ;MAChB,OAAOH,cAAc,CAACU,QAAf,CAAwBP,KAAxB,CAAP;IACD,CAb+B;;IAchCQ,QAAQ,CAACR,KAAD,EAAQ;MACd,IAAIJ,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,UAA9B,EACE;MAEF,IAAE,CAAGR,cAAc,CAACU,QAAf,CAAwBP,KAAxB,CAAL,EACEF,QAAQ,CAACD,cAAc,CAACY,MAAf,CAAsBT,KAAtB,CAAD,CAAR;IAEH,CArB+B;;IAsBhCU,WAAW,CAACV,KAAD,EAAQ;MACjB,IAAIJ,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,UAA9B,EACE;MAEF,IAAIR,cAAc,CAACU,QAAf,CAAwBP,KAAxB,CAAJ,EACEF,QAAQ,CAACD,cAAc,CAACc,MAAf,CAAsBC,aAAD,IAAkBA,aAAa,KAAKZ,KAAzD,CAAD,CAAR;IAEH,CA7B+B;;IA8BhCa,WAAW,CAACb,KAAD,EAAQ;MACjB,IAAIJ,KAAK,CAACQ,UAAN,IAAoBR,KAAK,CAACS,UAA9B,EACE;MAEF,IAAIR,cAAc,CAACU,QAAf,CAAwBP,KAAxB,CAAJ,EACEF,QAAQ,CAACD,cAAc,CAACc,MAAf,CAAsBC,aAAD,IAAkBA,aAAa,KAAKZ,KAAzD,CAAD,CAAR,CADF,KAGEF,QAAQ,CAACD,cAAc,CAACY,MAAf,CAAsBT,KAAtB,CAAD,CAAR;IAEH;;EAvC+B,CAAlC;EA0CA,OAAOG,KAAP;AACD","names":["$587d3ad58be6d31f$export$daff6da51032a415","props","selectedValues","setValue","$b3nuO$useControlledState","value","defaultValue","onChange","state","isReadOnly","isDisabled","isSelected","includes","addValue","concat","removeValue","filter","existingValue","toggleValue"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\checkbox\\dist\\packages\\@react-stately\\checkbox\\src\\useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface CheckboxGroupState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n\n  const state: CheckboxGroupState = {\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    }\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}