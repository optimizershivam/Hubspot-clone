{"ast":null,"code":"import { mergeProps as $bx7SL$mergeProps, useSyncRef as $bx7SL$useSyncRef, useGlobalListeners as $bx7SL$useGlobalListeners, focusWithoutScrolling as $bx7SL$focusWithoutScrolling, isIOS as $bx7SL$isIOS, runAfterTransition as $bx7SL$runAfterTransition, useLayoutEffect as $bx7SL$useLayoutEffect, isMac as $bx7SL$isMac, useEvent as $bx7SL$useEvent, useDescription as $bx7SL$useDescription } from \"@react-aria/utils\";\nimport $bx7SL$react, { useRef as $bx7SL$useRef, useContext as $bx7SL$useContext, useState as $bx7SL$useState, useMemo as $bx7SL$useMemo, useEffect as $bx7SL$useEffect, useCallback as $bx7SL$useCallback } from \"react\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $3b117e43dc0ca95d$exports = {};\n$parcel$export($3b117e43dc0ca95d$exports, \"Pressable\", () => $3b117e43dc0ca95d$export$27c701ed9e449e99);\nvar $f6c31cce2adf654f$exports = {};\n$parcel$export($f6c31cce2adf654f$exports, \"usePress\", () => $f6c31cce2adf654f$export$45712eceda6fad21); // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\n\nlet $14c0b72509d70225$var$state = 'default';\nlet $14c0b72509d70225$var$savedUserSelect = '';\nlet $14c0b72509d70225$var$modifiedElementMap = new WeakMap();\n\nfunction $14c0b72509d70225$export$16a4697467175487(target) {\n  if ($bx7SL$isIOS()) {\n    if ($14c0b72509d70225$var$state === 'default') {\n      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    $14c0b72509d70225$var$state = 'disabled';\n  } else if (target) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nfunction $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {\n  if ($bx7SL$isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if ($14c0b72509d70225$var$state !== 'disabled') return;\n    $14c0b72509d70225$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      $bx7SL$runAfterTransition(() => {\n        // Avoid race conditions\n        if ($14c0b72509d70225$var$state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';\n          $14c0b72509d70225$var$savedUserSelect = '';\n          $14c0b72509d70225$var$state = 'default';\n        }\n      });\n    }, 300);\n  } else // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {\n      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);\n      if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;\n      if (target.getAttribute('style') === '') target.removeAttribute('style');\n      $14c0b72509d70225$var$modifiedElementMap.delete(target);\n    }\n}\n\nfunction $8a9cb279dc87e130$export$60278871457622de(event) {\n  // JAWS/NVDA with Firefox.\n  if (event.mozInputSource === 0 && event.isTrusted) return true;\n  return event.detail === 0 && !event.pointerType;\n}\n\nclass $8a9cb279dc87e130$export$905e7fc544a71f36 {\n  isDefaultPrevented() {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation() {\n    this.nativeEvent.stopPropagation();\n\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped() {\n    return false;\n  }\n\n  persist() {}\n\n  constructor(type, nativeEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target;\n    this.currentTarget = nativeEvent.currentTarget;\n    this.relatedTarget = nativeEvent.relatedTarget;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n}\n\nfunction $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {\n  let stateRef = $bx7SL$useRef({\n    isFocused: false,\n    onBlur: onBlur,\n    observer: null\n  });\n  stateRef.current.onBlur = onBlur; // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n\n  $bx7SL$useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []); // This function is called during a React onFocus event.\n\n  return $bx7SL$useCallback(e1 => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {\n      stateRef.current.isFocused = true;\n      let target = e1.target;\n\n      let onBlurHandler = e => {\n        var // For backward compatibility, dispatch a (fake) React synthetic event.\n        _current, ref;\n\n        stateRef.current.isFocused = false;\n        if (target.disabled) (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e)); // We no longer need the MutationObserver once the target is blurred.\n\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {\n        once: true\n      });\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {\n            bubbles: true\n          }));\n        }\n      });\n      stateRef.current.observer.observe(target, {\n        attributes: true,\n        attributeFilter: ['disabled']\n      });\n    }\n  }, []);\n}\n\nconst $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = $bx7SL$react.createContext(null);\n$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';\n\nfunction $f6c31cce2adf654f$var$usePressResponderContext(props) {\n  // Consume context from <PressResponder> and merge with props.\n  let context = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n\n  if (context) {\n    let {\n      register: register,\n      ...contextProps\n    } = context;\n    props = $bx7SL$mergeProps(contextProps, props);\n    register();\n  }\n\n  $bx7SL$useSyncRef(context, props.ref);\n  return props;\n}\n\nfunction $f6c31cce2adf654f$export$45712eceda6fad21(props) {\n  let {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    isPressed: isPressedProp,\n    preventFocusOnPress: preventFocusOnPress,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit,\n    allowTextSelectionOnPress: allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _,\n    ...domProps\n  } = $f6c31cce2adf654f$var$usePressResponderContext(props);\n  let propsRef = $bx7SL$useRef(null);\n  propsRef.current = {\n    onPress: onPress1,\n    onPressChange: onPressChange1,\n    onPressStart: onPressStart1,\n    onPressEnd: onPressEnd1,\n    onPressUp: onPressUp1,\n    isDisabled: isDisabled1,\n    shouldCancelOnPointerExit: shouldCancelOnPointerExit\n  };\n  let [isPressed, setPressed] = $bx7SL$useState(false);\n  let ref = $bx7SL$useRef({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = $bx7SL$useGlobalListeners();\n  let pressProps1 = $bx7SL$useMemo(() => {\n    let state = ref.current;\n\n    let triggerPressStart = (originalEvent, pointerType) => {\n      let {\n        onPressStart: onPressStart,\n        onPressChange: onPressChange,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled || state.didFirePressStart) return;\n      if (onPressStart) onPressStart({\n        type: 'pressstart',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(true);\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = function (originalEvent, pointerType) {\n      let wasPressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let {\n        onPressEnd: onPressEnd,\n        onPressChange: onPressChange,\n        onPress: onPress,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (!state.didFirePressStart) return;\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n      if (onPressEnd) onPressEnd({\n        type: 'pressend',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n      if (onPressChange) onPressChange(false);\n      setPressed(false);\n      if (onPress && wasPressed && !isDisabled) onPress({\n        type: 'press',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let triggerPressUp = (originalEvent, pointerType) => {\n      let {\n        onPressUp: onPressUp,\n        isDisabled: isDisabled\n      } = propsRef.current;\n      if (isDisabled) return;\n      if (onPressUp) onPressUp({\n        type: 'pressup',\n        pointerType: pointerType,\n        target: originalEvent.currentTarget,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let cancel = e => {\n      if (state.isPressed) {\n        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n      }\n    };\n\n    let pressProps = {\n      onKeyDown(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {\n          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n          e.stopPropagation(); // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n\n      onKeyUp(e) {\n        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');\n      },\n\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target)) return;\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled1) e.preventDefault(); // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n\n    };\n\n    let onKeyUp = e => {\n      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e)) {\n        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();\n        e.stopPropagation();\n        state.isPressed = false;\n        let target = e.target;\n        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n\n        if (state.target.contains(target) && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') state.target.click();\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = e => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n\n        if ($f6c31cce2adf654f$var$isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        } // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        state.pointerType = e.pointerType;\n        e.stopPropagation();\n\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n          if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n          triggerPressStart(e, state.pointerType);\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = e => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return; // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n\n        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);\n      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n\n\n      let onPointerMove = e => {\n        if (e.pointerId !== state.activePointerId) return;\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        }\n      };\n\n      let onPointerCancel = e => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return; // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = e => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n\n        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) return;\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onMouseUp = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);\n      };\n\n      let onMouseUp = e => {\n        // Only handle left clicks\n        if (e.button !== 0) return;\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);\n        if (!touch) return;\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n\n        if (!isDisabled1 && !preventFocusOnPress) $bx7SL$focusWithoutScrolling(e.currentTarget);\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);\n        triggerPressStart(e, state.pointerType);\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);\n        }\n      };\n\n      pressProps.onTouchEnd = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (!state.isPressed) return;\n        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);\n\n        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        e.stopPropagation();\n        if (state.isPressed) cancel(e);\n      };\n\n      let onScroll = e => {\n        if (state.isPressed && e.target.contains(state.target)) cancel({\n          currentTarget: state.target,\n          shiftKey: false,\n          ctrlKey: false,\n          metaKey: false,\n          altKey: false\n        });\n      };\n\n      pressProps.onDragStart = e => {\n        if (!e.currentTarget.contains(e.target)) return;\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n\n  $bx7SL$useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);\n    };\n  }, [allowTextSelectionOnPress]);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: $bx7SL$mergeProps(domProps, pressProps1)\n  };\n}\n\nfunction $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction $f6c31cce2adf654f$var$isValidKeyboardEvent(event) {\n  const {\n    key: key,\n    code: code,\n    target: target\n  } = event;\n  const element = target;\n  const {\n    tagName: tagName,\n    isContentEditable: isContentEditable\n  } = element;\n  const role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n\n  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key\n  !(role === 'link' && key !== 'Enter');\n}\n\nfunction $f6c31cce2adf654f$var$getTouchFromEvent(event) {\n  const {\n    targetTouches: targetTouches\n  } = event;\n  if (targetTouches.length > 0) return targetTouches[0];\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$getTouchById(event, pointerId) {\n  const changedTouches = event.changedTouches;\n\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) return touch;\n  }\n\n  return null;\n}\n\nfunction $f6c31cce2adf654f$var$createEvent(target, e) {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\nfunction $f6c31cce2adf654f$var$getPointClientRect(point) {\n  let offsetX = point.width / 2 || point.radiusX || 0;\n  let offsetY = point.height / 2 || point.radiusY || 0;\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) return false; // check if they cannot overlap on y axis\n\n  if (a.top > b.bottom || b.top > a.bottom) return false;\n  return true;\n}\n\nfunction $f6c31cce2adf654f$var$isOverTarget(point, target) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);\n  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefault(target) {\n  // We cannot prevent default if the target is a draggable element.\n  return !target.draggable;\n}\n\nfunction $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && target.type === 'submit');\n}\n\nfunction $f6c31cce2adf654f$var$isVirtualPointerEvent(event) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n  // Talkback double tap from Windows Firefox touch screen press\n  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';\n}\n\nconst $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref;\n  let newRef = $bx7SL$useRef();\n  ref = ref !== null && ref !== void 0 ? ref : newRef;\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({ ...props,\n    ref: ref\n  });\n  let child = $bx7SL$react.Children.only(children);\n  return /*#__PURE__*/$bx7SL$react.cloneElement(child, // @ts-ignore\n  {\n    ref: ref,\n    ...$bx7SL$mergeProps(child.props, pressProps)\n  });\n});\nvar $f1ab8c75478c6f73$exports = {};\n$parcel$export($f1ab8c75478c6f73$exports, \"PressResponder\", () => $f1ab8c75478c6f73$export$3351871ee4b288b8);\nconst $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/$bx7SL$react.forwardRef((_ref2, ref) => {\n  let {\n    children: children,\n    ...props\n  } = _ref2;\n  let isRegistered = $bx7SL$useRef(false);\n  let prevContext = $bx7SL$useContext($ae1eeba8b9eafd08$export$5165eccb35aaadb5);\n  let context = $bx7SL$mergeProps(prevContext || {}, { ...props,\n    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),\n\n    register() {\n      isRegistered.current = true;\n      if (prevContext) prevContext.register();\n    }\n\n  });\n  $bx7SL$useSyncRef(prevContext, ref);\n  $bx7SL$useEffect(() => {\n    if (!isRegistered.current) console.warn(\"A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.\");\n  }, []);\n  return /*#__PURE__*/$bx7SL$react.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {\n    value: context\n  }, children);\n});\nvar $a1ea59d68270f0dd$exports = {};\n$parcel$export($a1ea59d68270f0dd$exports, \"useFocus\", () => $a1ea59d68270f0dd$export$f8168d8dd8fd66e6);\n\nfunction $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {\n  let {\n    isDisabled: isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange: onFocusChange\n  } = props;\n  const onBlur = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) onBlurProp(e);\n      if (onFocusChange) onFocusChange(false);\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n  const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  const onFocus = $bx7SL$useCallback(e => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) onFocusProp(e);\n      if (onFocusChange) onFocusChange(true);\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n  return {\n    focusProps: {\n      onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,\n      onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null\n    }\n  };\n}\n\nvar $507fabe10e71c6fb$exports = {};\n$parcel$export($507fabe10e71c6fb$exports, \"isFocusVisible\", () => $507fabe10e71c6fb$export$b9b3dfddab17db27);\n$parcel$export($507fabe10e71c6fb$exports, \"getInteractionModality\", () => $507fabe10e71c6fb$export$630ff653c5ada6a9);\n$parcel$export($507fabe10e71c6fb$exports, \"setInteractionModality\", () => $507fabe10e71c6fb$export$8397ddfc504fdb9a);\n$parcel$export($507fabe10e71c6fb$exports, \"useInteractionModality\", () => $507fabe10e71c6fb$export$98e20ec92f614cfe);\n$parcel$export($507fabe10e71c6fb$exports, \"useFocusVisible\", () => $507fabe10e71c6fb$export$ffd9e5021c1fb2d6);\n$parcel$export($507fabe10e71c6fb$exports, \"useFocusVisibleListener\", () => $507fabe10e71c6fb$export$ec71b4b83ac08ec3);\nlet $507fabe10e71c6fb$var$currentModality = null;\nlet $507fabe10e71c6fb$var$changeHandlers = new Set();\nlet $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;\nlet $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\nlet $507fabe10e71c6fb$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements\n\nconst $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {\n  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);\n}\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$isValidKey(e) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || !$bx7SL$isMac() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\nfunction $507fabe10e71c6fb$var$handleKeyboardEvent(e) {\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n\n  if ($507fabe10e71c6fb$var$isValidKey(e)) {\n    $507fabe10e71c6fb$var$currentModality = 'keyboard';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handlePointerEvent(e) {\n  $507fabe10e71c6fb$var$currentModality = 'pointer';\n\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleClickEvent(e) {\n  if ($8a9cb279dc87e130$export$60278871457622de(e)) {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n  }\n}\n\nfunction $507fabe10e71c6fb$var$handleFocusEvent(e) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) return; // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n\n  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {\n    $507fabe10e71c6fb$var$currentModality = 'virtual';\n    $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);\n  }\n\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;\n}\n\nfunction $507fabe10e71c6fb$var$handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;\n  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;\n}\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\n\n\nfunction $507fabe10e71c6fb$var$setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return; // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n\n  let focus = HTMLElement.prototype.focus;\n\n  HTMLElement.prototype.focus = function () {\n    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);\n  document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n\n  window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);\n  window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);\n    document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);\n  }\n\n  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);\n}\n\nfunction $507fabe10e71c6fb$export$b9b3dfddab17db27() {\n  return $507fabe10e71c6fb$var$currentModality !== 'pointer';\n}\n\nfunction $507fabe10e71c6fb$export$630ff653c5ada6a9() {\n  return $507fabe10e71c6fb$var$currentModality;\n}\n\nfunction $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {\n  $507fabe10e71c6fb$var$currentModality = modality;\n  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);\n}\n\nfunction $507fabe10e71c6fb$export$98e20ec92f614cfe() {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  let [modality, setModality] = $bx7SL$useState($507fabe10e71c6fb$var$currentModality);\n  $bx7SL$useEffect(() => {\n    let handler = () => {\n      setModality($507fabe10e71c6fb$var$currentModality);\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, []);\n  return modality;\n}\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\n\n\nfunction $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\nfunction $507fabe10e71c6fb$export$ffd9e5021c1fb2d6() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    isTextInput: isTextInput,\n    autoFocus: autoFocus\n  } = props;\n  let [isFocusVisibleState, setFocusVisible] = $bx7SL$useState(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());\n  $507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {\n    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);\n  }, [isTextInput], {\n    isTextInput: isTextInput\n  });\n  return {\n    isFocusVisible: isFocusVisibleState\n  };\n}\n\nfunction $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {\n  $507fabe10e71c6fb$var$setupGlobalFocusEvents();\n  $bx7SL$useEffect(() => {\n    let handler = (modality, e) => {\n      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;\n      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());\n    };\n\n    $507fabe10e71c6fb$var$changeHandlers.add(handler);\n    return () => {\n      $507fabe10e71c6fb$var$changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n\nvar $9ab94262bd0047c7$exports = {};\n$parcel$export($9ab94262bd0047c7$exports, \"useFocusWithin\", () => $9ab94262bd0047c7$export$420e68273165f4ec);\n\nfunction $9ab94262bd0047c7$export$420e68273165f4ec(props) {\n  let {\n    isDisabled: isDisabled,\n    onBlurWithin: onBlurWithin,\n    onFocusWithin: onFocusWithin,\n    onFocusWithinChange: onFocusWithinChange\n  } = props;\n  let state = $bx7SL$useRef({\n    isFocusWithin: false\n  });\n  let onBlur = $bx7SL$useCallback(e => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {\n      state.current.isFocusWithin = false;\n      if (onBlurWithin) onBlurWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(false);\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);\n  let onFocus = $bx7SL$useCallback(e => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) onFocusWithin(e);\n      if (onFocusWithinChange) onFocusWithinChange(true);\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n  if (isDisabled) return {\n    focusWithinProps: {\n      onFocus: null,\n      onBlur: null\n    }\n  };\n  return {\n    focusWithinProps: {\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\n\nvar $6179b936705e76d3$exports = {};\n$parcel$export($6179b936705e76d3$exports, \"useHover\", () => $6179b936705e76d3$export$ae780daf29e6d456); // iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\n\nlet $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\nlet $6179b936705e76d3$var$hoverCount = 0;\n\nfunction $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {\n  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n\n  setTimeout(() => {\n    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction $6179b936705e76d3$var$handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();\n}\n\nfunction $6179b936705e76d3$var$setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') return;\n  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  $6179b936705e76d3$var$hoverCount++;\n  return () => {\n    $6179b936705e76d3$var$hoverCount--;\n    if ($6179b936705e76d3$var$hoverCount > 0) return;\n    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);\n  };\n}\n\nfunction $6179b936705e76d3$export$ae780daf29e6d456(props) {\n  let {\n    onHoverStart: onHoverStart,\n    onHoverChange: onHoverChange,\n    onHoverEnd: onHoverEnd,\n    isDisabled: isDisabled\n  } = props;\n  let [isHovered, setHovered] = $bx7SL$useState(false);\n  let state = $bx7SL$useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n  $bx7SL$useEffect($6179b936705e76d3$var$setupGlobalTouchEvents, []);\n  let {\n    hoverProps: hoverProps1,\n    triggerHoverEnd: triggerHoverEnd1\n  } = $bx7SL$useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n      if (onHoverStart) onHoverStart({\n        type: 'hoverstart',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(true);\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n      if (pointerType === 'touch' || !state.isHovered) return;\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) onHoverEnd({\n        type: 'hoverend',\n        target: target,\n        pointerType: pointerType\n      });\n      if (onHoverChange) onHoverChange(false);\n      setHovered(false);\n    };\n\n    let hoverProps = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = e => {\n        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = e => {\n        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = e => {\n        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');\n      };\n    }\n\n    return {\n      hoverProps: hoverProps,\n      triggerHoverEnd: triggerHoverEnd\n    };\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n  $bx7SL$useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) triggerHoverEnd1({\n      currentTarget: state.target\n    }, state.pointerType);\n  }, [isDisabled]);\n  return {\n    hoverProps: hoverProps1,\n    isHovered: isHovered\n  };\n}\n\nvar $e0b6e0b68ec7f50f$exports = {};\n$parcel$export($e0b6e0b68ec7f50f$exports, \"useInteractOutside\", () => $e0b6e0b68ec7f50f$export$872b660ac5a1ff98);\n\nfunction $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {\n  let {\n    ref: ref,\n    onInteractOutside: onInteractOutside,\n    isDisabled: isDisabled,\n    onInteractOutsideStart: onInteractOutsideStart\n  } = props;\n  let stateRef = $bx7SL$useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside: onInteractOutside,\n    onInteractOutsideStart: onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n  $bx7SL$useEffect(() => {\n    if (isDisabled) return;\n\n    let onPointerDown = e => {\n      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);\n        state.isPointerDown = true;\n      }\n    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n\n\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = e => {\n        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      }; // changing these to capture phase fixed combobox\n\n\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = e => {\n        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = e => {\n        state.ignoreEmulatedMouseEvents = true;\n\n        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {\n  if (event.button > 0) return false; // if the event target is no longer in the document\n\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n\nvar $46d819fcbaf35654$exports = {};\n$parcel$export($46d819fcbaf35654$exports, \"useKeyboard\", () => $46d819fcbaf35654$export$8f71654801c2f7cd);\n\nfunction $93925083ecbb358c$export$48d1ea6320830260(handler) {\n  if (!handler) return;\n  let shouldStopPropagation = true;\n  return e => {\n    let event = { ...e,\n\n      preventDefault() {\n        e.preventDefault();\n      },\n\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n\n    };\n    handler(event);\n    if (shouldStopPropagation) e.stopPropagation();\n  };\n}\n\nfunction $46d819fcbaf35654$export$8f71654801c2f7cd(props) {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),\n      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)\n    }\n  };\n}\n\nvar $e8a7022cf87cba2a$exports = {};\n$parcel$export($e8a7022cf87cba2a$exports, \"useMove\", () => $e8a7022cf87cba2a$export$36da96379f79f245);\n\nfunction $e8a7022cf87cba2a$export$36da96379f79f245(props) {\n  let {\n    onMoveStart: onMoveStart,\n    onMove: onMove,\n    onMoveEnd: onMoveEnd\n  } = props;\n  let state = $bx7SL$useRef({\n    didMove: false,\n    lastPosition: null,\n    id: null\n  });\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let moveProps1 = $bx7SL$useMemo(() => {\n    let moveProps = {};\n\n    let start = () => {\n      $14c0b72509d70225$export$16a4697467175487();\n      state.current.didMove = false;\n    };\n\n    let move = (originalEvent, pointerType, deltaX, deltaY) => {\n      if (deltaX === 0 && deltaY === 0) return;\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({\n          type: 'movestart',\n          pointerType: pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      onMove({\n        type: 'move',\n        pointerType: pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    let end = (originalEvent, pointerType) => {\n      $14c0b72509d70225$export$b0d6fa1ab32e3295();\n      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({\n        type: 'moveend',\n        pointerType: pointerType,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = e => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onMouseUp = e => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      moveProps.onMouseDown = e => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = e => {\n        let touch = [...e.changedTouches].findIndex(_ref3 => {\n          let {\n            identifier: identifier\n          } = _ref3;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          let {\n            pageX: pageX,\n            pageY: pageY\n          } = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: pageX,\n            pageY: pageY\n          };\n        }\n      };\n\n      let onTouchEnd = e => {\n        let touch = [...e.changedTouches].findIndex(_ref4 => {\n          let {\n            identifier: identifier\n          } = _ref4;\n          return identifier === state.current.id;\n        });\n\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n\n      moveProps.onTouchStart = e => {\n        if (e.changedTouches.length === 0 || state.current.id != null) return;\n        let {\n          pageX: pageX,\n          pageY: pageY,\n          identifier: identifier\n        } = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {\n          pageX: pageX,\n          pageY: pageY\n        };\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n        }\n      };\n\n      let onPointerUp = e => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = e.pointerType || 'mouse';\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = e => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {\n            pageX: e.pageX,\n            pageY: e.pageY\n          };\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e, deltaX, deltaY) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = e => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n  return {\n    moveProps: moveProps1\n  };\n}\n\nvar $7d0a636d7a4dcefd$exports = {};\n$parcel$export($7d0a636d7a4dcefd$exports, \"useScrollWheel\", () => $7d0a636d7a4dcefd$export$2123ff2b87c81ca);\n\nfunction $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {\n  let {\n    onScroll: onScroll,\n    isDisabled: isDisabled\n  } = props;\n  let onScrollHandler = $bx7SL$useCallback(e => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) return; // stop scrolling the page\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (onScroll) onScroll({\n      deltaX: e.deltaX,\n      deltaY: e.deltaY\n    });\n  }, [onScroll]);\n  $bx7SL$useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n\nvar $8a26561d2877236e$exports = {};\n$parcel$export($8a26561d2877236e$exports, \"useLongPress\", () => $8a26561d2877236e$export$c24ed0104d07eab9);\nconst $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;\n\nfunction $8a26561d2877236e$export$c24ed0104d07eab9(props) {\n  let {\n    isDisabled: isDisabled,\n    onLongPressStart: onLongPressStart,\n    onLongPressEnd: onLongPressEnd,\n    onLongPress: onLongPress,\n    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,\n    accessibilityDescription: accessibilityDescription\n  } = props;\n  const timeRef = $bx7SL$useRef(null);\n  let {\n    addGlobalListener: addGlobalListener,\n    removeGlobalListener: removeGlobalListener\n  } = $bx7SL$useGlobalListeners();\n  let {\n    pressProps: pressProps\n  } = $f6c31cce2adf654f$export$45712eceda6fad21({\n    isDisabled: isDisabled,\n\n    onPressStart(e1) {\n      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {\n        if (onLongPressStart) onLongPressStart({ ...e1,\n          type: 'longpressstart'\n        });\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e1.target.dispatchEvent(new PointerEvent('pointercancel', {\n            bubbles: true\n          }));\n          if (onLongPress) onLongPress({ ...e1,\n            type: 'longpress'\n          });\n          timeRef.current = null;\n        }, threshold); // Prevent context menu, which may be opened on long press on touch devices\n\n        if (e1.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {\n            once: true\n          });\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {\n            once: true\n          });\n        }\n      }\n    },\n\n    onPressEnd(e) {\n      if (timeRef.current) clearTimeout(timeRef.current);\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({ ...e,\n        type: 'longpressend'\n      });\n    }\n\n  });\n  let descriptionProps = $bx7SL$useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n  return {\n    longPressProps: $bx7SL$mergeProps(pressProps, descriptionProps)\n  };\n}\n\nexport { $3b117e43dc0ca95d$export$27c701ed9e449e99 as Pressable, $f1ab8c75478c6f73$export$3351871ee4b288b8 as PressResponder, $a1ea59d68270f0dd$export$f8168d8dd8fd66e6 as useFocus, $507fabe10e71c6fb$export$b9b3dfddab17db27 as isFocusVisible, $507fabe10e71c6fb$export$630ff653c5ada6a9 as getInteractionModality, $507fabe10e71c6fb$export$8397ddfc504fdb9a as setInteractionModality, $507fabe10e71c6fb$export$98e20ec92f614cfe as useInteractionModality, $507fabe10e71c6fb$export$ffd9e5021c1fb2d6 as useFocusVisible, $507fabe10e71c6fb$export$ec71b4b83ac08ec3 as useFocusVisibleListener, $9ab94262bd0047c7$export$420e68273165f4ec as useFocusWithin, $6179b936705e76d3$export$ae780daf29e6d456 as useHover, $e0b6e0b68ec7f50f$export$872b660ac5a1ff98 as useInteractOutside, $46d819fcbaf35654$export$8f71654801c2f7cd as useKeyboard, $e8a7022cf87cba2a$export$36da96379f79f245 as useMove, $f6c31cce2adf654f$export$45712eceda6fad21 as usePress, $7d0a636d7a4dcefd$export$2123ff2b87c81ca as useScrollWheel, $8a26561d2877236e$export$c24ed0104d07eab9 as useLongPress };","map":{"version":3,"mappings":"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","names":["$14c0b72509d70225$var$state","$14c0b72509d70225$var$savedUserSelect","$14c0b72509d70225$var$modifiedElementMap","WeakMap","$14c0b72509d70225$export$16a4697467175487","target","$bx7SL$isIOS","document","documentElement","style","webkitUserSelect","set","userSelect","$14c0b72509d70225$export$b0d6fa1ab32e3295","setTimeout","$bx7SL$runAfterTransition","has","targetOldUserSelect","get","getAttribute","removeAttribute","delete","$8a9cb279dc87e130$export$60278871457622de","event","mozInputSource","isTrusted","detail","pointerType","$8a9cb279dc87e130$export$905e7fc544a71f36","isDefaultPrevented","nativeEvent","defaultPrevented","preventDefault","stopPropagation","isPropagationStopped","persist","type","currentTarget","relatedTarget","bubbles","cancelable","eventPhase","timeStamp","$8a9cb279dc87e130$export$715c682d09d639cc","onBlur","stateRef","$bx7SL$useRef","isFocused","observer","current","$bx7SL$useLayoutEffect","state","disconnect","$bx7SL$useCallback","e1","HTMLButtonElement","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","onBlurHandler","e","_current","disabled","ref","call","addEventListener","once","MutationObserver","dispatchEvent","FocusEvent","observe","attributes","attributeFilter","$ae1eeba8b9eafd08$export$5165eccb35aaadb5","$bx7SL$react","createContext","displayName","$f6c31cce2adf654f$var$usePressResponderContext","props","context","$bx7SL$useContext","register","contextProps","$bx7SL$mergeProps","$bx7SL$useSyncRef","$f6c31cce2adf654f$export$45712eceda6fad21","onPress","onPress1","onPressChange","onPressChange1","onPressStart","onPressStart1","onPressEnd","onPressEnd1","onPressUp","onPressUp1","isDisabled","isDisabled1","isPressed","isPressedProp","preventFocusOnPress","shouldCancelOnPointerExit","allowTextSelectionOnPress","_","domProps","propsRef","setPressed","$bx7SL$useState","ignoreEmulatedMouseEvents","ignoreClickAfterPress","didFirePressStart","activePointerId","isOverTarget","addGlobalListener","removeAllGlobalListeners","$bx7SL$useGlobalListeners","pressProps1","$bx7SL$useMemo","triggerPressStart","originalEvent","shiftKey","metaKey","ctrlKey","altKey","triggerPressEnd","wasPressed","triggerPressUp","cancel","$f6c31cce2adf654f$var$createEvent","pressProps","onKeyDown","$f6c31cce2adf654f$var$isValidKeyboardEvent","contains","$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard","repeat","onKeyUp","onClick","button","$bx7SL$focusWithoutScrolling","$f6c31cce2adf654f$var$isHTMLAnchorLink","click","PointerEvent","onPointerDown","$f6c31cce2adf654f$var$isVirtualPointerEvent","$f6c31cce2adf654f$var$shouldPreventDefault","pointerId","onPointerMove","onPointerUp","onPointerCancel","onMouseDown","$f6c31cce2adf654f$var$isOverTarget","onDragStart","onMouseUp","onMouseEnter","onMouseLeave","onTouchStart","touch","$f6c31cce2adf654f$var$getTouchFromEvent","identifier","window","onScroll","onTouchMove","$f6c31cce2adf654f$var$getTouchById","onTouchEnd","onTouchCancel","$bx7SL$useEffect","tagName","hasAttribute","key","code","element","isContentEditable","role","targetTouches","length","changedTouches","i","$f6c31cce2adf654f$var$getPointClientRect","point","offsetX","width","radiusX","offsetY","height","radiusY","top","clientY","right","clientX","bottom","left","$f6c31cce2adf654f$var$areRectanglesOverlapping","a","b","rect","getBoundingClientRect","pointRect","draggable","pressure","$3b117e43dc0ca95d$export$27c701ed9e449e99","forwardRef","children","newRef","child","Children","only","cloneElement","$f1ab8c75478c6f73$export$3351871ee4b288b8","isRegistered","prevContext","console","warn","Provider","value","$a1ea59d68270f0dd$export$f8168d8dd8fd66e6","onFocus","onFocusProp","onBlurProp","onFocusChange","onSyntheticFocus","focusProps","undefined","$507fabe10e71c6fb$var$currentModality","$507fabe10e71c6fb$var$changeHandlers","Set","$507fabe10e71c6fb$var$hasSetupGlobalListeners","$507fabe10e71c6fb$var$hasEventBeforeFocus","$507fabe10e71c6fb$var$hasBlurredWindowRecently","$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS","Tab","Escape","$507fabe10e71c6fb$var$triggerChangeHandlers","modality","handler","$507fabe10e71c6fb$var$isValidKey","$bx7SL$isMac","$507fabe10e71c6fb$var$handleKeyboardEvent","$507fabe10e71c6fb$var$handlePointerEvent","$507fabe10e71c6fb$var$handleClickEvent","$507fabe10e71c6fb$var$handleFocusEvent","$507fabe10e71c6fb$var$handleWindowBlur","$507fabe10e71c6fb$var$setupGlobalFocusEvents","focus","HTMLElement","prototype","apply","arguments","readyState","$507fabe10e71c6fb$export$b9b3dfddab17db27","$507fabe10e71c6fb$export$630ff653c5ada6a9","$507fabe10e71c6fb$export$8397ddfc504fdb9a","$507fabe10e71c6fb$export$98e20ec92f614cfe","setModality","add","$507fabe10e71c6fb$var$isKeyboardFocusEvent","isTextInput","KeyboardEvent","$507fabe10e71c6fb$export$ffd9e5021c1fb2d6","autoFocus","isFocusVisibleState","setFocusVisible","$507fabe10e71c6fb$export$ec71b4b83ac08ec3","isFocusVisible","fn","deps","opts","$9ab94262bd0047c7$export$420e68273165f4ec","onBlurWithin","onFocusWithin","onFocusWithinChange","isFocusWithin","focusWithinProps","$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$hoverCount","$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents","$6179b936705e76d3$var$handleGlobalPointerEvent","$6179b936705e76d3$var$setupGlobalTouchEvents","removeEventListener","$6179b936705e76d3$export$ae780daf29e6d456","onHoverStart","onHoverChange","onHoverEnd","isHovered","setHovered","hoverProps","triggerHoverEnd","triggerHoverEnd1","triggerHoverStart","onPointerEnter","onPointerLeave","hoverProps1","$e0b6e0b68ec7f50f$export$872b660ac5a1ff98","onInteractOutside","onInteractOutsideStart","isPointerDown","$e0b6e0b68ec7f50f$var$isValidEvent","ownerDocument","$93925083ecbb358c$export$48d1ea6320830260","shouldStopPropagation","error","continuePropagation","$46d819fcbaf35654$export$8f71654801c2f7cd","keyboardProps","$e8a7022cf87cba2a$export$36da96379f79f245","onMoveStart","onMove","onMoveEnd","didMove","lastPosition","id","removeGlobalListener","moveProps1","moveProps","start","move","deltaX","deltaY","end","onMouseMove","pageX","pageY","findIndex","triggerKeyboardMove","$7d0a636d7a4dcefd$export$2123ff2b87c81ca","onScrollHandler","$bx7SL$useEvent","$8a26561d2877236e$var$DEFAULT_THRESHOLD","$8a26561d2877236e$export$c24ed0104d07eab9","onLongPressStart","onLongPressEnd","onLongPress","threshold","accessibilityDescription","timeRef","onContextMenu","clearTimeout","descriptionProps","$bx7SL$useDescription","longPressProps"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\textSelection.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\utils.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\context.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\usePress.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\Pressable.tsx","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\PressResponder.tsx","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocus.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocusVisible.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useFocusWithin.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useHover.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useInteractOutside.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\createEventHandler.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useKeyboard.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useMove.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useScrollWheel.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-aria\\selection\\node_modules\\@react-aria\\interactions\\dist\\packages\\@react-aria\\interactions\\src\\useLongPress.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {isIOS, runAfterTransition} from '@react-aria/utils';\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\n\n// For non-iOS devices, we apply user-select: none to the pressed element instead to avoid possible\n// performance issues that arise from applying and removing user-select: none to the entire page\n// (see https://github.com/adobe/react-spectrum/issues/1609).\ntype State = 'default' | 'disabled' | 'restoring';\n\n// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element\n// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually\nlet state: State = 'default';\nlet savedUserSelect = '';\nlet modifiedElementMap = new WeakMap<HTMLElement, string>();\n\nexport function disableTextSelection(target?: HTMLElement) {\n  if (isIOS()) {\n    if (state === 'default') {\n      savedUserSelect = document.documentElement.style.webkitUserSelect;\n      document.documentElement.style.webkitUserSelect = 'none';\n    }\n\n    state = 'disabled';\n  } else if (target) {\n    // If not iOS, store the target's original user-select and change to user-select: none\n    // Ignore state since it doesn't apply for non iOS\n    modifiedElementMap.set(target, target.style.userSelect);\n    target.style.userSelect = 'none';\n  }\n}\n\nexport function restoreTextSelection(target?: HTMLElement) {\n  if (isIOS()) {\n    // If the state is already default, there's nothing to do.\n    // If it is restoring, then there's no need to queue a second restore.\n    if (state !== 'disabled') {\n      return;\n    }\n\n    state = 'restoring';\n\n    // There appears to be a delay on iOS where selection still might occur\n    // after pointer up, so wait a bit before removing user-select.\n    setTimeout(() => {\n      // Wait for any CSS transitions to complete so we don't recompute style\n      // for the whole page in the middle of the animation and cause jank.\n      runAfterTransition(() => {\n        // Avoid race conditions\n        if (state === 'restoring') {\n          if (document.documentElement.style.webkitUserSelect === 'none') {\n            document.documentElement.style.webkitUserSelect = savedUserSelect || '';\n          }\n\n          savedUserSelect = '';\n          state = 'default';\n        }\n      });\n    }, 300);\n  } else {\n    // If not iOS, restore the target's original user-select if any\n    // Ignore state since it doesn't apply for non iOS\n    if (target && modifiedElementMap.has(target)) {\n      let targetOldUserSelect = modifiedElementMap.get(target);\n\n      if (target.style.userSelect === 'none') {\n        target.style.userSelect = targetOldUserSelect;\n      }\n\n      if (target.getAttribute('style') === '') {\n        target.removeAttribute('style');\n      }\n      modifiedElementMap.delete(target);\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusEvent as ReactFocusEvent, useCallback, useRef} from 'react';\nimport {useLayoutEffect} from '@react-aria/utils';\n\n// Original licensing for the following method can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/blob/3c713d513195a53788b3f8bb4b70279d68b15bcc/packages/react-interactions/events/src/dom/shared/index.js#L74-L87\n\n// Keyboards, Assistive Technologies, and element.click() all produce a \"virtual\"\n// click event. This is a method of inferring such clicks. Every browser except\n// IE 11 only sets a zero value of \"detail\" for click events that are \"virtual\".\n// However, IE 11 uses a zero value for all click events. For IE 11 we rely on\n// the quirk that it produces click events that are of type PointerEvent, and\n// where only the \"virtual\" click lacks a pointerType field.\n\nexport function isVirtualClick(event: MouseEvent | PointerEvent): boolean {\n  // JAWS/NVDA with Firefox.\n  if ((event as any).mozInputSource === 0 && event.isTrusted) {\n    return true;\n  }\n\n  return event.detail === 0 && !(event as PointerEvent).pointerType;\n}\n\nexport class SyntheticFocusEvent implements ReactFocusEvent {\n  nativeEvent: FocusEvent;\n  target: Element;\n  currentTarget: Element;\n  relatedTarget: Element;\n  bubbles: boolean;\n  cancelable: boolean;\n  defaultPrevented: boolean;\n  eventPhase: number;\n  isTrusted: boolean;\n  timeStamp: number;\n  type: string;\n\n  constructor(type: string, nativeEvent: FocusEvent) {\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEvent.target as Element;\n    this.currentTarget = nativeEvent.currentTarget as Element;\n    this.relatedTarget = nativeEvent.relatedTarget as Element;\n    this.bubbles = nativeEvent.bubbles;\n    this.cancelable = nativeEvent.cancelable;\n    this.defaultPrevented = nativeEvent.defaultPrevented;\n    this.eventPhase = nativeEvent.eventPhase;\n    this.isTrusted = nativeEvent.isTrusted;\n    this.timeStamp = nativeEvent.timeStamp;\n    this.type = type;\n  }\n\n  isDefaultPrevented(): boolean {\n    return this.nativeEvent.defaultPrevented;\n  }\n\n  preventDefault(): void {\n    this.defaultPrevented = true;\n    this.nativeEvent.preventDefault();\n  }\n\n  stopPropagation(): void {\n    this.nativeEvent.stopPropagation();\n    this.isPropagationStopped = () => true;\n  }\n\n  isPropagationStopped(): boolean {\n    return false;\n  }\n\n  persist() {}\n}\n\nexport function useSyntheticBlurEvent(onBlur: (e: ReactFocusEvent) => void) {\n  let stateRef = useRef({\n    isFocused: false,\n    onBlur,\n    observer: null as MutationObserver\n  });\n  stateRef.current.onBlur = onBlur;\n\n  // Clean up MutationObserver on unmount. See below.\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    const state = stateRef.current;\n    return () => {\n      if (state.observer) {\n        state.observer.disconnect();\n        state.observer = null;\n      }\n    };\n  }, []);\n\n  // This function is called during a React onFocus event.\n  return useCallback((e: ReactFocusEvent) => {\n    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142\n    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a\n    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.\n    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.\n    if (\n      e.target instanceof HTMLButtonElement ||\n      e.target instanceof HTMLInputElement ||\n      e.target instanceof HTMLTextAreaElement ||\n      e.target instanceof HTMLSelectElement\n    ) {\n      stateRef.current.isFocused = true;\n\n      let target = e.target;\n      let onBlurHandler = (e: FocusEvent) => {\n        stateRef.current.isFocused = false;\n\n        if (target.disabled) {\n          // For backward compatibility, dispatch a (fake) React synthetic event.\n          stateRef.current.onBlur?.(new SyntheticFocusEvent('blur', e));\n        }\n\n        // We no longer need the MutationObserver once the target is blurred.\n        if (stateRef.current.observer) {\n          stateRef.current.observer.disconnect();\n          stateRef.current.observer = null;\n        }\n      };\n\n      target.addEventListener('focusout', onBlurHandler, {once: true});\n\n      stateRef.current.observer = new MutationObserver(() => {\n        if (stateRef.current.isFocused && target.disabled) {\n          stateRef.current.observer.disconnect();\n          target.dispatchEvent(new FocusEvent('blur'));\n          target.dispatchEvent(new FocusEvent('focusout', {bubbles: true}));\n        }\n      });\n\n      stateRef.current.observer.observe(target, {attributes: true, attributeFilter: ['disabled']});\n    }\n  }, []);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PressProps} from './usePress';\nimport React, {MutableRefObject} from 'react';\n\ninterface IPressResponderContext extends PressProps {\n  register(): void,\n  ref?: MutableRefObject<HTMLElement>\n}\n\nexport const PressResponderContext = React.createContext<IPressResponderContext>(null);\nPressResponderContext.displayName = 'PressResponderContext';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {disableTextSelection, restoreTextSelection} from './textSelection';\nimport {focusWithoutScrolling, mergeProps, useGlobalListeners, useSyncRef} from '@react-aria/utils';\nimport {HTMLAttributes, RefObject, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {isVirtualClick} from './utils';\nimport {PointerType, PressEvents} from '@react-types/shared';\nimport {PressResponderContext} from './context';\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean,\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean,\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean,\n  /**\n   * Whether press events should be canceled when the pointer leaves the target while pressed.\n   * By default, this is `false`, which means if the pointer returns back over the target while\n   * still pressed, onPressStart will be fired again. If set to `true`, the press is canceled\n   * when the pointer leaves the target and onPressStart will not be fired if the pointer returns.\n   */\n  shouldCancelOnPointerExit?: boolean,\n  /** Whether text selection should be enabled on the pressable element. */\n  allowTextSelectionOnPress?: boolean\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<HTMLElement>\n}\n\ninterface PressState {\n  isPressed: boolean,\n  ignoreEmulatedMouseEvents: boolean,\n  ignoreClickAfterPress: boolean,\n  didFirePressStart: boolean,\n  activePointerId: any,\n  target: HTMLElement | null,\n  isOverTarget: boolean,\n  pointerType: PointerType,\n  userSelect?: string\n}\n\ninterface EventBase {\n  currentTarget: EventTarget,\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\nexport interface PressResult {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean,\n  /** Props to spread on the target element. */\n  pressProps: HTMLAttributes<HTMLElement>\n}\n\nfunction usePressResponderContext(props: PressHookProps): PressHookProps {\n  // Consume context from <PressResponder> and merge with props.\n  let context = useContext(PressResponderContext);\n  if (context) {\n    let {register, ...contextProps} = context;\n    props = mergeProps(contextProps, props) as PressHookProps;\n    register();\n  }\n  useSyncRef(context, props.ref);\n\n  return props;\n}\n\n/**\n * Handles press interactions across mouse, touch, keyboard, and screen readers.\n * It normalizes behavior across browsers and platforms, and handles many nuances\n * of dealing with pointer and keyboard events.\n */\nexport function usePress(props: PressHookProps): PressResult {\n  let {\n    onPress,\n    onPressChange,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    isDisabled,\n    isPressed: isPressedProp,\n    preventFocusOnPress,\n    shouldCancelOnPointerExit,\n    allowTextSelectionOnPress,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ref: _, // Removing `ref` from `domProps` because TypeScript is dumb\n    ...domProps\n  } = usePressResponderContext(props);\n  let propsRef = useRef<PressHookProps>(null);\n  propsRef.current = {onPress, onPressChange, onPressStart, onPressEnd, onPressUp, isDisabled, shouldCancelOnPointerExit};\n\n  let [isPressed, setPressed] = useState(false);\n  let ref = useRef<PressState>({\n    isPressed: false,\n    ignoreEmulatedMouseEvents: false,\n    ignoreClickAfterPress: false,\n    didFirePressStart: false,\n    activePointerId: null,\n    target: null,\n    isOverTarget: false,\n    pointerType: null\n  });\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  let pressProps = useMemo(() => {\n    let state = ref.current;\n    let triggerPressStart = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressStart, onPressChange, isDisabled} = propsRef.current;\n      if (isDisabled || state.didFirePressStart) {\n        return;\n      }\n\n      if (onPressStart) {\n        onPressStart({\n          type: 'pressstart',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(true);\n      }\n\n      state.didFirePressStart = true;\n      setPressed(true);\n    };\n\n    let triggerPressEnd = (originalEvent: EventBase, pointerType: PointerType, wasPressed = true) => {\n      let {onPressEnd, onPressChange, onPress, isDisabled} = propsRef.current;\n      if (!state.didFirePressStart) {\n        return;\n      }\n\n      state.ignoreClickAfterPress = true;\n      state.didFirePressStart = false;\n\n      if (onPressEnd) {\n        onPressEnd({\n          type: 'pressend',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n\n      if (onPressChange) {\n        onPressChange(false);\n      }\n\n      setPressed(false);\n\n      if (onPress && wasPressed && !isDisabled) {\n        onPress({\n          type: 'press',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let triggerPressUp = (originalEvent: EventBase, pointerType: PointerType) => {\n      let {onPressUp, isDisabled} = propsRef.current;\n      if (isDisabled) {\n        return;\n      }\n\n      if (onPressUp) {\n        onPressUp({\n          type: 'pressup',\n          pointerType,\n          target: originalEvent.currentTarget as HTMLElement,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    let cancel = (e: EventBase) => {\n      if (state.isPressed) {\n        if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n        state.isPressed = false;\n        state.isOverTarget = false;\n        state.activePointerId = null;\n        state.pointerType = null;\n        removeAllGlobalListeners();\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n      }\n    };\n\n    let pressProps: HTMLAttributes<HTMLElement> = {\n      onKeyDown(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target as HTMLElement)) {\n          if (shouldPreventDefaultKeyboard(e.target as Element)) {\n            e.preventDefault();\n          }\n          e.stopPropagation();\n\n          // If the event is repeating, it may have started on a different element\n          // after which focus moved to the current element. Ignore these events and\n          // only handle the first key down event.\n          if (!state.isPressed && !e.repeat) {\n            state.target = e.currentTarget as HTMLElement;\n            state.isPressed = true;\n            triggerPressStart(e, 'keyboard');\n\n            // Focus may move before the key up event, so register the event on the document\n            // instead of the same element where the key down event occurred.\n            addGlobalListener(document, 'keyup', onKeyUp, false);\n          }\n        }\n      },\n      onKeyUp(e) {\n        if (isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerPressUp(createEvent(state.target, e), 'keyboard');\n        }\n      },\n      onClick(e) {\n        if (e && !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (e && e.button === 0) {\n          e.stopPropagation();\n          if (isDisabled) {\n            e.preventDefault();\n          }\n\n          // If triggered from a screen reader or by using element.click(),\n          // trigger as if it were a keyboard click.\n          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || isVirtualClick(e.nativeEvent))) {\n            // Ensure the element receives focus (VoiceOver on iOS does not do this)\n            if (!isDisabled && !preventFocusOnPress) {\n              focusWithoutScrolling(e.currentTarget);\n            }\n\n            triggerPressStart(e, 'virtual');\n            triggerPressUp(e, 'virtual');\n            triggerPressEnd(e, 'virtual');\n          }\n\n          state.ignoreEmulatedMouseEvents = false;\n          state.ignoreClickAfterPress = false;\n        }\n      }\n    };\n\n    let onKeyUp = (e: KeyboardEvent) => {\n      if (state.isPressed && isValidKeyboardEvent(e)) {\n        if (shouldPreventDefaultKeyboard(e.target as Element)) {\n          e.preventDefault();\n        }\n        e.stopPropagation();\n\n        state.isPressed = false;\n        let target = e.target as HTMLElement;\n        triggerPressEnd(createEvent(state.target, e), 'keyboard', state.target.contains(target));\n        removeAllGlobalListeners();\n\n        // If the target is a link, trigger the click method to open the URL,\n        // but defer triggering pressEnd until onClick event handler.\n        if (state.target.contains(target) && isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') {\n          state.target.click();\n        }\n      }\n    };\n\n    if (typeof PointerEvent !== 'undefined') {\n      pressProps.onPointerDown = (e) => {\n        // Only handle left clicks, and ignore events that bubbled through portals.\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.\n        // Ignore and let the onClick handler take care of it instead.\n        // https://bugs.webkit.org/show_bug.cgi?id=222627\n        // https://bugs.webkit.org/show_bug.cgi?id=223202\n        if (isVirtualPointerEvent(e.nativeEvent)) {\n          state.pointerType = 'virtual';\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on pointer down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n          e.preventDefault();\n        }\n\n        state.pointerType = e.pointerType;\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          state.isPressed = true;\n          state.isOverTarget = true;\n          state.activePointerId = e.pointerId;\n          state.target = e.currentTarget;\n\n          if (!isDisabled && !preventFocusOnPress) {\n            focusWithoutScrolling(e.currentTarget);\n          }\n\n          if (!allowTextSelectionOnPress) {\n            disableTextSelection(state.target);\n          }\n\n          triggerPressStart(e, state.pointerType);\n\n          addGlobalListener(document, 'pointermove', onPointerMove, false);\n          addGlobalListener(document, 'pointerup', onPointerUp, false);\n          addGlobalListener(document, 'pointercancel', onPointerCancel, false);\n        }\n      };\n\n      pressProps.onMouseDown = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (e.button === 0) {\n          // Chrome and Firefox on touch Windows devices require mouse down events\n          // to be canceled in addition to pointer events, or an extra asynchronous\n          // focus event will be fired.\n          if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n            e.preventDefault();\n          }\n\n          e.stopPropagation();\n        }\n      };\n\n      pressProps.onPointerUp = (e) => {\n        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.\n        if (!e.currentTarget.contains(e.target as HTMLElement) || state.pointerType === 'virtual') {\n          return;\n        }\n\n        // Only handle left clicks\n        // Safari on iOS sometimes fires pointerup events, even\n        // when the touch isn't over the target, so double check.\n        if (e.button === 0 && isOverTarget(e, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType || e.pointerType);\n        }\n      };\n\n      // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.\n      // Use pointer move events instead to implement our own hit testing.\n      // See https://bugs.webkit.org/show_bug.cgi?id=199803\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId !== state.activePointerId) {\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(createEvent(state.target, e), state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {\n          if (isOverTarget(e, state.target)) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType);\n          } else if (state.isOverTarget) {\n            triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n          }\n\n          state.isPressed = false;\n          state.isOverTarget = false;\n          state.activePointerId = null;\n          state.pointerType = null;\n          removeAllGlobalListeners();\n          if (!allowTextSelectionOnPress) {\n            restoreTextSelection(state.target);\n          }\n        }\n      };\n\n      let onPointerCancel = (e: PointerEvent) => {\n        cancel(e);\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.\n        cancel(e);\n      };\n    } else {\n      pressProps.onMouseDown = (e) => {\n        // Only handle left clicks\n        if (e.button !== 0 || !e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent\n        // default on mouse down and handle focusing the pressable element ourselves.\n        if (shouldPreventDefault(e.currentTarget as HTMLElement)) {\n          e.preventDefault();\n        }\n\n        e.stopPropagation();\n        if (state.ignoreEmulatedMouseEvents) {\n          return;\n        }\n\n        state.isPressed = true;\n        state.isOverTarget = true;\n        state.target = e.currentTarget;\n        state.pointerType = isVirtualClick(e.nativeEvent) ? 'virtual' : 'mouse';\n\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(document, 'mouseup', onMouseUp, false);\n      };\n\n      pressProps.onMouseEnter = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = true;\n          triggerPressStart(e, state.pointerType);\n        }\n      };\n\n      pressProps.onMouseLeave = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onMouseUp = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        if (!state.ignoreEmulatedMouseEvents && e.button === 0) {\n          triggerPressUp(e, state.pointerType);\n        }\n      };\n\n      let onMouseUp = (e: MouseEvent) => {\n        // Only handle left clicks\n        if (e.button !== 0) {\n          return;\n        }\n\n        state.isPressed = false;\n        removeAllGlobalListeners();\n\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n          return;\n        }\n\n        if (isOverTarget(e, state.target)) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(createEvent(state.target, e), state.pointerType, false);\n        }\n\n        state.isOverTarget = false;\n      };\n\n      pressProps.onTouchStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        let touch = getTouchFromEvent(e.nativeEvent);\n        if (!touch) {\n          return;\n        }\n        state.activePointerId = touch.identifier;\n        state.ignoreEmulatedMouseEvents = true;\n        state.isOverTarget = true;\n        state.isPressed = true;\n        state.target = e.currentTarget;\n        state.pointerType = 'touch';\n\n        // Due to browser inconsistencies, especially on mobile browsers, we prevent default\n        // on the emulated mouse event and handle focusing the pressable element ourselves.\n        if (!isDisabled && !preventFocusOnPress) {\n          focusWithoutScrolling(e.currentTarget);\n        }\n\n        if (!allowTextSelectionOnPress) {\n          disableTextSelection(state.target);\n        }\n\n        triggerPressStart(e, state.pointerType);\n\n        addGlobalListener(window, 'scroll', onScroll, true);\n      };\n\n      pressProps.onTouchMove = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          if (!state.isOverTarget) {\n            state.isOverTarget = true;\n            triggerPressStart(e, state.pointerType);\n          }\n        } else if (state.isOverTarget) {\n          state.isOverTarget = false;\n          triggerPressEnd(e, state.pointerType, false);\n          if (propsRef.current.shouldCancelOnPointerExit) {\n            cancel(e);\n          }\n        }\n      };\n\n      pressProps.onTouchEnd = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (!state.isPressed) {\n          return;\n        }\n\n        let touch = getTouchById(e.nativeEvent, state.activePointerId);\n        if (touch && isOverTarget(touch, e.currentTarget)) {\n          triggerPressUp(e, state.pointerType);\n          triggerPressEnd(e, state.pointerType);\n        } else if (state.isOverTarget) {\n          triggerPressEnd(e, state.pointerType, false);\n        }\n\n        state.isPressed = false;\n        state.activePointerId = null;\n        state.isOverTarget = false;\n        state.ignoreEmulatedMouseEvents = true;\n        if (!allowTextSelectionOnPress) {\n          restoreTextSelection(state.target);\n        }\n        removeAllGlobalListeners();\n      };\n\n      pressProps.onTouchCancel = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        e.stopPropagation();\n        if (state.isPressed) {\n          cancel(e);\n        }\n      };\n\n      let onScroll = (e: Event) => {\n        if (state.isPressed && (e.target as HTMLElement).contains(state.target)) {\n          cancel({\n            currentTarget: state.target,\n            shiftKey: false,\n            ctrlKey: false,\n            metaKey: false,\n            altKey: false\n          });\n        }\n      };\n\n      pressProps.onDragStart = (e) => {\n        if (!e.currentTarget.contains(e.target as HTMLElement)) {\n          return;\n        }\n\n        cancel(e);\n      };\n    }\n\n    return pressProps;\n  }, [addGlobalListener, isDisabled, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]);\n\n  // Remove user-select: none in case component unmounts immediately after pressStart\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      if (!allowTextSelectionOnPress) {\n        restoreTextSelection(ref.current.target);\n      }\n    };\n  }, [allowTextSelectionOnPress]);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: mergeProps(domProps, pressProps)\n  };\n}\n\nfunction isHTMLAnchorLink(target: HTMLElement): boolean {\n  return target.tagName === 'A' && target.hasAttribute('href');\n}\n\nfunction isValidKeyboardEvent(event: KeyboardEvent): boolean {\n  const {key, code, target} = event;\n  const element = target as HTMLElement;\n  const {tagName, isContentEditable} = element;\n  const role = element.getAttribute('role');\n  // Accessibility for keyboards. Space and Enter only.\n  // \"Spacebar\" is for IE 11\n  return (\n    (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') &&\n    (tagName !== 'INPUT' &&\n      tagName !== 'TEXTAREA' &&\n      isContentEditable !== true) &&\n    // A link with a valid href should be handled natively,\n    // unless it also has role='button' and was triggered using Space.\n    (!isHTMLAnchorLink(element) || (role === 'button' && key !== 'Enter')) &&\n    // An element with role='link' should only trigger with Enter key\n    !(role === 'link' && key !== 'Enter')\n  );\n}\n\nfunction getTouchFromEvent(event: TouchEvent): Touch | null {\n  const {targetTouches} = event;\n  if (targetTouches.length > 0) {\n    return targetTouches[0];\n  }\n  return null;\n}\n\nfunction getTouchById(\n  event: TouchEvent,\n  pointerId: null | number\n): null | Touch {\n  const changedTouches = event.changedTouches;\n  for (let i = 0; i < changedTouches.length; i++) {\n    const touch = changedTouches[i];\n    if (touch.identifier === pointerId) {\n      return touch;\n    }\n  }\n  return null;\n}\n\nfunction createEvent(target: HTMLElement, e: EventBase): EventBase {\n  return {\n    currentTarget: target,\n    shiftKey: e.shiftKey,\n    ctrlKey: e.ctrlKey,\n    metaKey: e.metaKey,\n    altKey: e.altKey\n  };\n}\n\ninterface Rect {\n  top: number,\n  right: number,\n  bottom: number,\n  left: number\n}\n\ninterface EventPoint {\n  clientX: number,\n  clientY: number,\n  width?: number,\n  height?: number,\n  radiusX?: number,\n  radiusY?: number\n}\n\nfunction getPointClientRect(point: EventPoint): Rect {\n  let offsetX = (point.width / 2) || point.radiusX || 0;\n  let offsetY = (point.height / 2) || point.radiusY || 0;\n\n  return {\n    top: point.clientY - offsetY,\n    right: point.clientX + offsetX,\n    bottom: point.clientY + offsetY,\n    left: point.clientX - offsetX\n  };\n}\n\nfunction areRectanglesOverlapping(a: Rect, b: Rect) {\n  // check if they cannot overlap on x axis\n  if (a.left > b.right || b.left > a.right) {\n    return false;\n  }\n  // check if they cannot overlap on y axis\n  if (a.top > b.bottom || b.top > a.bottom) {\n    return false;\n  }\n  return true;\n}\n\nfunction isOverTarget(point: EventPoint, target: HTMLElement) {\n  let rect = target.getBoundingClientRect();\n  let pointRect = getPointClientRect(point);\n  return areRectanglesOverlapping(rect, pointRect);\n}\n\nfunction shouldPreventDefault(target: HTMLElement) {\n  // We cannot prevent default if the target is a draggable element.\n  return !target.draggable;\n}\n\nfunction shouldPreventDefaultKeyboard(target: Element) {\n  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && (target as HTMLButtonElement | HTMLInputElement).type === 'submit');\n}\n\nfunction isVirtualPointerEvent(event: PointerEvent) {\n  // If the pointer size is zero, then we assume it's from a screen reader.\n  // Android TalkBack double tap will sometimes return a event with width and height of 1\n  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.\n  // Cannot use \"event.pressure === 0\" as the sole check due to Safari pointer events always returning pressure === 0\n  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush\n  // Talkback double tap from Windows Firefox touch screen press\n  return (\n    (event.width === 0 && event.height === 0) ||\n    (event.width === 1 &&\n      event.height === 1 &&\n      event.pressure === 0 &&\n      event.detail === 0 &&\n      event.pointerType === 'mouse'\n    )\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps} from '@react-aria/utils';\nimport {PressProps, usePress} from './usePress';\nimport React, {HTMLAttributes, ReactElement, RefObject, useRef} from 'react';\n\ninterface PressableProps extends PressProps {\n  children: ReactElement<HTMLAttributes<HTMLElement>, string>\n}\n\nexport const Pressable = React.forwardRef(({children, ...props}: PressableProps, ref: RefObject<HTMLElement>) => {\n  let newRef = useRef();\n  ref = ref ?? newRef;\n  let {pressProps} = usePress({...props, ref});\n  let child = React.Children.only(children);\n  return React.cloneElement(\n    child,\n    // @ts-ignore\n    {ref, ...mergeProps(child.props, pressProps)}\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {mergeProps, useSyncRef} from '@react-aria/utils';\nimport {PressProps} from './usePress';\nimport {PressResponderContext} from './context';\nimport React, {ReactNode, RefObject, useContext, useEffect, useRef} from 'react';\n\ninterface PressResponderProps extends PressProps {\n  children: ReactNode\n}\n\nexport const PressResponder = React.forwardRef(({children, ...props}: PressResponderProps, ref: RefObject<HTMLElement>) => {\n  let isRegistered = useRef(false);\n  let prevContext = useContext(PressResponderContext);\n  let context = mergeProps(prevContext || {}, {\n    ...props,\n    ref: ref || prevContext?.ref,\n    register() {\n      isRegistered.current = true;\n      if (prevContext) {\n        prevContext.register();\n      }\n    }\n  });\n\n  useSyncRef(prevContext, ref);\n\n  useEffect(() => {\n    if (!isRegistered.current) {\n      console.warn(\n        'A PressResponder was rendered without a pressable child. ' +\n        'Either call the usePress hook, or wrap your DOM node with <Pressable> component.'\n      );\n    }\n  }, []);\n\n  return (\n    <PressResponderContext.Provider value={context}>\n      {children}\n    </PressResponderContext.Provider>\n  );\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes, useCallback} from 'react';\nimport {FocusEvents} from '@react-types/shared';\nimport {useSyntheticBlurEvent} from './utils';\n\ninterface FocusProps extends FocusEvents {\n  /** Whether the focus events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface FocusResult {\n  /** Props to spread onto the target element. */\n  focusProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the immediate target.\n * Focus events on child elements will be ignored.\n */\nexport function useFocus(props: FocusProps): FocusResult {\n  let {\n    isDisabled,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onFocusChange\n  } = props;\n\n  const onBlur: FocusProps['onBlur'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onBlurProp) {\n        onBlurProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(false);\n      }\n\n      return true;\n    }\n  }, [onBlurProp, onFocusChange]);\n\n\n  const onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n\n  const onFocus: FocusProps['onFocus'] = useCallback((e: FocusEvent) => {\n    if (e.target === e.currentTarget) {\n      if (onFocusProp) {\n        onFocusProp(e);\n      }\n\n      if (onFocusChange) {\n        onFocusChange(true);\n      }\n\n      onSyntheticFocus(e);\n    }\n  }, [onFocusChange, onFocusProp, onSyntheticFocus]);\n\n  return {\n    focusProps: {\n      onFocus: (!isDisabled && (onFocusProp || onFocusChange || onBlurProp)) ? onFocus : undefined,\n      onBlur: (!isDisabled && (onBlurProp || onFocusChange)) ? onBlur : null\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {isMac} from '@react-aria/utils';\nimport {isVirtualClick} from './utils';\nimport {useEffect, useState} from 'react';\n\ntype Modality = 'keyboard' | 'pointer' | 'virtual';\ntype HandlerEvent = PointerEvent | MouseEvent | KeyboardEvent | FocusEvent;\ntype Handler = (modality: Modality, e: HandlerEvent) => void;\ntype FocusVisibleHandler = (isFocusVisible: boolean) => void;\ninterface FocusVisibleProps {\n  /** Whether the element is a text input. */\n  isTextInput?: boolean,\n  /** Whether the element will be auto focused. */\n  autoFocus?: boolean\n}\n\ninterface FocusVisibleResult {\n  /** Whether keyboard focus is visible globally. */\n  isFocusVisible: boolean\n}\n\nlet currentModality = null;\nlet changeHandlers = new Set<Handler>();\nlet hasSetupGlobalListeners = false;\nlet hasEventBeforeFocus = false;\nlet hasBlurredWindowRecently = false;\n\n// Only Tab or Esc keys will make focus visible on text input elements\nconst FOCUS_VISIBLE_INPUT_KEYS = {\n  Tab: true,\n  Escape: true\n};\n\nfunction triggerChangeHandlers(modality: Modality, e: HandlerEvent) {\n  for (let handler of changeHandlers) {\n    handler(modality, e);\n  }\n}\n\n/**\n * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.\n */\nfunction isValidKey(e: KeyboardEvent) {\n  // Control and Shift keys trigger when navigating back to the tab with keyboard.\n  return !(e.metaKey || (!isMac() && e.altKey) || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');\n}\n\n\nfunction handleKeyboardEvent(e: KeyboardEvent) {\n  hasEventBeforeFocus = true;\n  if (isValidKey(e)) {\n    currentModality = 'keyboard';\n    triggerChangeHandlers('keyboard', e);\n  }\n}\n\nfunction handlePointerEvent(e: PointerEvent | MouseEvent) {\n  currentModality = 'pointer';\n  if (e.type === 'mousedown' || e.type === 'pointerdown') {\n    hasEventBeforeFocus = true;\n    triggerChangeHandlers('pointer', e);\n  }\n}\n\nfunction handleClickEvent(e: MouseEvent) {\n  if (isVirtualClick(e)) {\n    hasEventBeforeFocus = true;\n    currentModality = 'virtual';\n  }\n}\n\nfunction handleFocusEvent(e: FocusEvent) {\n  // Firefox fires two extra focus events when the user first clicks into an iframe:\n  // first on the window, then on the document. We ignore these events so they don't\n  // cause keyboard focus rings to appear.\n  if (e.target === window || e.target === document) {\n    return;\n  }\n\n  // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.\n  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.\n  if (!hasEventBeforeFocus && !hasBlurredWindowRecently) {\n    currentModality = 'virtual';\n    triggerChangeHandlers('virtual', e);\n  }\n\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = false;\n}\n\nfunction handleWindowBlur() {\n  // When the window is blurred, reset state. This is necessary when tabbing out of the window,\n  // for example, since a subsequent focus event won't be fired.\n  hasEventBeforeFocus = false;\n  hasBlurredWindowRecently = true;\n}\n\n/**\n * Setup global event listeners to control when keyboard focus style should be visible.\n */\nfunction setupGlobalFocusEvents() {\n  if (typeof window === 'undefined' || hasSetupGlobalListeners) {\n    return;\n  }\n\n  // Programmatic focus() calls shouldn't affect the current input modality.\n  // However, we need to detect other cases when a focus event occurs without\n  // a preceding user event (e.g. screen reader focus). Overriding the focus\n  // method on HTMLElement.prototype is a bit hacky, but works.\n  let focus = HTMLElement.prototype.focus;\n  HTMLElement.prototype.focus = function () {\n    hasEventBeforeFocus = true;\n    focus.apply(this, arguments);\n  };\n\n  document.addEventListener('keydown', handleKeyboardEvent, true);\n  document.addEventListener('keyup', handleKeyboardEvent, true);\n  document.addEventListener('click', handleClickEvent, true);\n\n  // Register focus events on the window so they are sure to happen\n  // before React's event listeners (registered on the document).\n  window.addEventListener('focus', handleFocusEvent, true);\n  window.addEventListener('blur', handleWindowBlur, false);\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerdown', handlePointerEvent, true);\n    document.addEventListener('pointermove', handlePointerEvent, true);\n    document.addEventListener('pointerup', handlePointerEvent, true);\n  } else {\n    document.addEventListener('mousedown', handlePointerEvent, true);\n    document.addEventListener('mousemove', handlePointerEvent, true);\n    document.addEventListener('mouseup', handlePointerEvent, true);\n  }\n\n  hasSetupGlobalListeners = true;\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState !== 'loading') {\n    setupGlobalFocusEvents();\n  } else {\n    document.addEventListener('DOMContentLoaded', setupGlobalFocusEvents);\n  }\n}\n\n/**\n * If true, keyboard focus is visible.\n */\nexport function isFocusVisible(): boolean {\n  return currentModality !== 'pointer';\n}\n\nexport function getInteractionModality(): Modality {\n  return currentModality;\n}\n\nexport function setInteractionModality(modality: Modality) {\n  currentModality = modality;\n  triggerChangeHandlers(modality, null);\n}\n\n/**\n * Keeps state of the current modality.\n */\nexport function useInteractionModality(): Modality {\n  setupGlobalFocusEvents();\n\n  let [modality, setModality] = useState(currentModality);\n  useEffect(() => {\n    let handler = () => {\n      setModality(currentModality);\n    };\n\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, []);\n\n  return modality;\n}\n\n/**\n * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that\n * focus visible style can be properly set.\n */\nfunction isKeyboardFocusEvent(isTextInput: boolean, modality: Modality, e: HandlerEvent) {\n  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !FOCUS_VISIBLE_INPUT_KEYS[e.key]);\n}\n\n/**\n * Manages focus visible state for the page, and subscribes individual components for updates.\n */\nexport function useFocusVisible(props: FocusVisibleProps = {}): FocusVisibleResult {\n  let {isTextInput, autoFocus} = props;\n  let [isFocusVisibleState, setFocusVisible] = useState(autoFocus || isFocusVisible());\n  useFocusVisibleListener((isFocusVisible) => {\n    setFocusVisible(isFocusVisible);\n  }, [isTextInput], {isTextInput});\n\n  return {isFocusVisible: isFocusVisibleState};\n}\n\n/**\n * Listens for trigger change and reports if focus is visible (i.e., modality is not pointer).\n */\nexport function useFocusVisibleListener(fn: FocusVisibleHandler, deps: ReadonlyArray<any>, opts?: {isTextInput?: boolean}): void {\n  setupGlobalFocusEvents();\n\n  useEffect(() => {\n    let handler = (modality: Modality, e: HandlerEvent) => {\n      if (!isKeyboardFocusEvent(opts?.isTextInput, modality, e)) {\n        return;\n      }\n      fn(isFocusVisible());\n    };\n    changeHandlers.add(handler);\n    return () => {\n      changeHandlers.delete(handler);\n    };\n  }, deps);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {FocusEvent, HTMLAttributes, useCallback, useRef} from 'react';\nimport {useSyntheticBlurEvent} from './utils';\n\ninterface FocusWithinProps {\n  /** Whether the focus within events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when the target element or a descendant receives focus. */\n  onFocusWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the target element and all descendants lose focus. */\n  onBlurWithin?: (e: FocusEvent) => void,\n  /** Handler that is called when the the focus within state changes. */\n  onFocusWithinChange?: (isFocusWithin: boolean) => void\n}\n\ninterface FocusWithinResult {\n  /** Props to spread onto the target element. */\n  focusWithinProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles focus events for the target and its descendants.\n */\nexport function useFocusWithin(props: FocusWithinProps): FocusWithinResult {\n  let {\n    isDisabled,\n    onBlurWithin,\n    onFocusWithin,\n    onFocusWithinChange\n  } = props;\n  let state = useRef({\n    isFocusWithin: false\n  });\n\n  let onBlur = useCallback((e: FocusEvent) => {\n    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again\n    // when moving focus inside the element. Only trigger if the currentTarget doesn't\n    // include the relatedTarget (where focus is moving).\n    if (state.current.isFocusWithin && !(e.currentTarget as Element).contains(e.relatedTarget as Element)) {\n      state.current.isFocusWithin = false;\n\n      if (onBlurWithin) {\n        onBlurWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(false);\n      }\n    }\n  }, [onBlurWithin, onFocusWithinChange, state]);\n\n  let onSyntheticFocus = useSyntheticBlurEvent(onBlur);\n  let onFocus = useCallback((e: FocusEvent) => {\n    if (!state.current.isFocusWithin) {\n      if (onFocusWithin) {\n        onFocusWithin(e);\n      }\n\n      if (onFocusWithinChange) {\n        onFocusWithinChange(true);\n      }\n\n      state.current.isFocusWithin = true;\n      onSyntheticFocus(e);\n    }\n  }, [onFocusWithin, onFocusWithinChange, onSyntheticFocus]);\n\n  if (isDisabled) {\n    return {\n      focusWithinProps: {\n        onFocus: null,\n        onBlur: null\n      }\n    };\n  }\n\n  return {\n    focusWithinProps: {\n      onFocus,\n      onBlur\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {HoverEvents} from '@react-types/shared';\nimport {HTMLAttributes, useEffect, useMemo, useRef, useState} from 'react';\n\nexport interface HoverProps extends HoverEvents {\n  /** Whether the hover events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface HoverResult {\n  /** Props to spread on the target element. */\n  hoverProps: HTMLAttributes<HTMLElement>,\n  isHovered: boolean\n}\n\n// iOS fires onPointerEnter twice: once with pointerType=\"touch\" and again with pointerType=\"mouse\".\n// We want to ignore these emulated events so they do not trigger hover behavior.\n// See https://bugs.webkit.org/show_bug.cgi?id=214609.\nlet globalIgnoreEmulatedMouseEvents = false;\nlet hoverCount = 0;\n\nfunction setGlobalIgnoreEmulatedMouseEvents() {\n  globalIgnoreEmulatedMouseEvents = true;\n\n  // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter\n  // with pointerType=\"mouse\" immediately after onPointerUp and before onFocus. On other\n  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in\n  // the distant future because a user previously touched the element.\n  setTimeout(() => {\n    globalIgnoreEmulatedMouseEvents = false;\n  }, 50);\n}\n\nfunction handleGlobalPointerEvent(e) {\n  if (e.pointerType === 'touch') {\n    setGlobalIgnoreEmulatedMouseEvents();\n  }\n}\n\nfunction setupGlobalTouchEvents() {\n  if (typeof document === 'undefined') {\n    return;\n  }\n\n  if (typeof PointerEvent !== 'undefined') {\n    document.addEventListener('pointerup', handleGlobalPointerEvent);\n  } else {\n    document.addEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n  }\n\n  hoverCount++;\n  return () => {\n    hoverCount--;\n    if (hoverCount > 0) {\n      return;\n    }\n\n    if (typeof PointerEvent !== 'undefined') {\n      document.removeEventListener('pointerup', handleGlobalPointerEvent);\n    } else {\n      document.removeEventListener('touchend', setGlobalIgnoreEmulatedMouseEvents);\n    }\n  };\n}\n\n/**\n * Handles pointer hover interactions for an element. Normalizes behavior\n * across browsers and platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useHover(props: HoverProps): HoverResult {\n  let {\n    onHoverStart,\n    onHoverChange,\n    onHoverEnd,\n    isDisabled\n  } = props;\n\n  let [isHovered, setHovered] = useState(false);\n  let state = useRef({\n    isHovered: false,\n    ignoreEmulatedMouseEvents: false,\n    pointerType: '',\n    target: null\n  }).current;\n\n  useEffect(setupGlobalTouchEvents, []);\n\n  let {hoverProps, triggerHoverEnd} = useMemo(() => {\n    let triggerHoverStart = (event, pointerType) => {\n      state.pointerType = pointerType;\n      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) {\n        return;\n      }\n\n      state.isHovered = true;\n      let target = event.currentTarget;\n      state.target = target;\n\n      if (onHoverStart) {\n        onHoverStart({\n          type: 'hoverstart',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(true);\n      }\n\n      setHovered(true);\n    };\n\n    let triggerHoverEnd = (event, pointerType) => {\n      state.pointerType = '';\n      state.target = null;\n\n      if (pointerType === 'touch' || !state.isHovered) {\n        return;\n      }\n\n      state.isHovered = false;\n      let target = event.currentTarget;\n      if (onHoverEnd) {\n        onHoverEnd({\n          type: 'hoverend',\n          target,\n          pointerType\n        });\n      }\n\n      if (onHoverChange) {\n        onHoverChange(false);\n      }\n\n      setHovered(false);\n    };\n\n    let hoverProps: HTMLAttributes<HTMLElement> = {};\n\n    if (typeof PointerEvent !== 'undefined') {\n      hoverProps.onPointerEnter = (e) => {\n        if (globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') {\n          return;\n        }\n\n        triggerHoverStart(e, e.pointerType);\n      };\n\n      hoverProps.onPointerLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerHoverEnd(e, e.pointerType);\n        }\n      };\n    } else {\n      hoverProps.onTouchStart = () => {\n        state.ignoreEmulatedMouseEvents = true;\n      };\n\n      hoverProps.onMouseEnter = (e) => {\n        if (!state.ignoreEmulatedMouseEvents && !globalIgnoreEmulatedMouseEvents) {\n          triggerHoverStart(e, 'mouse');\n        }\n\n        state.ignoreEmulatedMouseEvents = false;\n      };\n\n      hoverProps.onMouseLeave = (e) => {\n        if (!isDisabled && e.currentTarget.contains(e.target as HTMLElement)) {\n          triggerHoverEnd(e, 'mouse');\n        }\n      };\n    }\n    return {hoverProps, triggerHoverEnd};\n  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);\n\n  useEffect(() => {\n    // Call the triggerHoverEnd as soon as isDisabled changes to true\n    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering\n    if (isDisabled) {\n      triggerHoverEnd({currentTarget: state.target}, state.pointerType);\n    }\n  }, [isDisabled]);\n\n  return {\n    hoverProps,\n    isHovered\n  };\n}\n\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from react.\n// Original licensing for the following can be found in the\n// NOTICE file in the root directory of this source tree.\n// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions\n\nimport {RefObject, SyntheticEvent, useEffect, useRef} from 'react';\n\ninterface InteractOutsideProps {\n  ref: RefObject<Element>,\n  onInteractOutside?: (e: SyntheticEvent) => void,\n  onInteractOutsideStart?: (e: SyntheticEvent) => void,\n  /** Whether the interact outside events should be disabled. */\n  isDisabled?: boolean\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useInteractOutside(props: InteractOutsideProps) {\n  let {ref, onInteractOutside, isDisabled, onInteractOutsideStart} = props;\n  let stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n    onInteractOutside,\n    onInteractOutsideStart\n  });\n  let state = stateRef.current;\n  state.onInteractOutside = onInteractOutside;\n  state.onInteractOutsideStart = onInteractOutsideStart;\n\n  useEffect(() => {\n    if (isDisabled) {\n      return;\n    }\n\n    let onPointerDown = (e) => {\n      if (isValidEvent(e, ref) && state.onInteractOutside) {\n        if (state.onInteractOutsideStart) {\n          state.onInteractOutsideStart(e);\n        }\n        state.isPointerDown = true;\n      }\n    };\n\n    // Use pointer events if available. Otherwise, fall back to mouse and touch events.\n    if (typeof PointerEvent !== 'undefined') {\n      let onPointerUp = (e) => {\n        if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      // changing these to capture phase fixed combobox\n      document.addEventListener('pointerdown', onPointerDown, true);\n      document.addEventListener('pointerup', onPointerUp, true);\n\n      return () => {\n        document.removeEventListener('pointerdown', onPointerDown, true);\n        document.removeEventListener('pointerup', onPointerUp, true);\n      };\n    } else {\n      let onMouseUp = (e) => {\n        if (state.ignoreEmulatedMouseEvents) {\n          state.ignoreEmulatedMouseEvents = false;\n        } else if (state.isPointerDown && state.onInteractOutside && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      let onTouchEnd = (e) => {\n        state.ignoreEmulatedMouseEvents = true;\n        if (state.onInteractOutside && state.isPointerDown && isValidEvent(e, ref)) {\n          state.isPointerDown = false;\n          state.onInteractOutside(e);\n        }\n      };\n\n      document.addEventListener('mousedown', onPointerDown, true);\n      document.addEventListener('mouseup', onMouseUp, true);\n      document.addEventListener('touchstart', onPointerDown, true);\n      document.addEventListener('touchend', onTouchEnd, true);\n\n      return () => {\n        document.removeEventListener('mousedown', onPointerDown, true);\n        document.removeEventListener('mouseup', onMouseUp, true);\n        document.removeEventListener('touchstart', onPointerDown, true);\n        document.removeEventListener('touchend', onTouchEnd, true);\n      };\n    }\n  }, [ref, state, isDisabled]);\n}\n\nfunction isValidEvent(event, ref) {\n  if (event.button > 0) {\n    return false;\n  }\n\n  // if the event target is no longer in the document\n  if (event.target) {\n    const ownerDocument = event.target.ownerDocument;\n    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(event.target);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {BaseEvent} from '@react-types/shared';\nimport {SyntheticEvent} from 'react';\n\n/**\n * This function wraps a React event handler to make stopPropagation the default, and support continuePropagation instead.\n */\nexport function createEventHandler<T extends SyntheticEvent>(handler: (e: BaseEvent<T>) => void): (e: T) => void {\n  if (!handler) {\n    return;\n  }\n\n  let shouldStopPropagation = true;\n  return (e: T) => {\n    let event: BaseEvent<T> = {\n      ...e,\n      preventDefault() {\n        e.preventDefault();\n      },\n      isDefaultPrevented() {\n        return e.isDefaultPrevented();\n      },\n      stopPropagation() {\n        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');\n      },\n      continuePropagation() {\n        shouldStopPropagation = false;\n      }\n    };\n\n    handler(event);\n\n    if (shouldStopPropagation) {\n      e.stopPropagation();\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {createEventHandler} from './createEventHandler';\nimport {HTMLAttributes} from 'react';\nimport {KeyboardEvents} from '@react-types/shared';\n\nexport interface KeyboardProps extends KeyboardEvents {\n  /** Whether the keyboard events should be disabled. */\n  isDisabled?: boolean\n}\n\ninterface KeyboardResult {\n  /** Props to spread onto the target element. */\n  keyboardProps: HTMLAttributes<HTMLElement>\n}\n\n/**\n * Handles keyboard interactions for a focusable element.\n */\nexport function useKeyboard(props: KeyboardProps): KeyboardResult {\n  return {\n    keyboardProps: props.isDisabled ? {} : {\n      onKeyDown: createEventHandler(props.onKeyDown),\n      onKeyUp: createEventHandler(props.onKeyUp)\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {disableTextSelection, restoreTextSelection}  from './textSelection';\nimport {MoveEvents, PointerType} from '@react-types/shared';\nimport React, {HTMLAttributes, useMemo, useRef} from 'react';\nimport {useGlobalListeners} from '@react-aria/utils';\n\ninterface MoveResult {\n  /** Props to spread on the target element. */\n  moveProps: HTMLAttributes<HTMLElement>\n}\n\ninterface EventBase {\n  shiftKey: boolean,\n  ctrlKey: boolean,\n  metaKey: boolean,\n  altKey: boolean\n}\n\n/**\n * Handles move interactions across mouse, touch, and keyboard, including dragging with\n * the mouse or touch, and using the arrow keys. Normalizes behavior across browsers and\n * platforms, and ignores emulated mouse events on touch devices.\n */\nexport function useMove(props: MoveEvents): MoveResult {\n  let {onMoveStart, onMove, onMoveEnd} = props;\n\n  let state = useRef<{\n    didMove: boolean,\n    lastPosition: {pageX: number, pageY: number} | null,\n    id: number | null\n  }>({didMove: false, lastPosition: null, id: null});\n\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let moveProps = useMemo(() => {\n    let moveProps: HTMLAttributes<HTMLElement> = {};\n\n    let start = () => {\n      disableTextSelection();\n      state.current.didMove = false;\n    };\n    let move = (originalEvent: EventBase, pointerType: PointerType, deltaX: number, deltaY: number) => {\n      if (deltaX === 0 && deltaY === 0) {\n        return;\n      }\n\n      if (!state.current.didMove) {\n        state.current.didMove = true;\n        onMoveStart?.({\n          type: 'movestart',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n      onMove({\n        type: 'move',\n        pointerType,\n        deltaX: deltaX,\n        deltaY: deltaY,\n        shiftKey: originalEvent.shiftKey,\n        metaKey: originalEvent.metaKey,\n        ctrlKey: originalEvent.ctrlKey,\n        altKey: originalEvent.altKey\n      });\n    };\n    let end = (originalEvent: EventBase, pointerType: PointerType) => {\n      restoreTextSelection();\n      if (state.current.didMove) {\n        onMoveEnd?.({\n          type: 'moveend',\n          pointerType,\n          shiftKey: originalEvent.shiftKey,\n          metaKey: originalEvent.metaKey,\n          ctrlKey: originalEvent.ctrlKey,\n          altKey: originalEvent.altKey\n        });\n      }\n    };\n\n    if (typeof PointerEvent === 'undefined') {\n      let onMouseMove = (e: MouseEvent) => {\n        if (e.button === 0) {\n          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n      let onMouseUp = (e: MouseEvent) => {\n        if (e.button === 0) {\n          end(e, 'mouse');\n          removeGlobalListener(window, 'mousemove', onMouseMove, false);\n          removeGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n      moveProps.onMouseDown = (e: React.MouseEvent) => {\n        if (e.button === 0) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          addGlobalListener(window, 'mousemove', onMouseMove, false);\n          addGlobalListener(window, 'mouseup', onMouseUp, false);\n        }\n      };\n\n      let onTouchMove = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          let {pageX, pageY} = e.changedTouches[touch];\n          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX, pageY};\n        }\n      };\n      let onTouchEnd = (e: TouchEvent) => {\n        let touch = [...e.changedTouches].findIndex(({identifier}) => identifier === state.current.id);\n        if (touch >= 0) {\n          end(e, 'touch');\n          state.current.id = null;\n          removeGlobalListener(window, 'touchmove', onTouchMove);\n          removeGlobalListener(window, 'touchend', onTouchEnd);\n          removeGlobalListener(window, 'touchcancel', onTouchEnd);\n        }\n      };\n      moveProps.onTouchStart = (e: React.TouchEvent) => {\n        if (e.changedTouches.length === 0 || state.current.id != null) {\n          return;\n        }\n\n        let {pageX, pageY, identifier} = e.changedTouches[0];\n        start();\n        e.stopPropagation();\n        e.preventDefault();\n        state.current.lastPosition = {pageX, pageY};\n        state.current.id = identifier;\n        addGlobalListener(window, 'touchmove', onTouchMove, false);\n        addGlobalListener(window, 'touchend', onTouchEnd, false);\n        addGlobalListener(window, 'touchcancel', onTouchEnd, false);\n      };\n    } else {\n      let onPointerMove = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n\n          // Problems with PointerEvent#movementX/movementY:\n          // 1. it is always 0 on macOS Safari.\n          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS\n          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n        }\n      };\n\n      let onPointerUp = (e: PointerEvent) => {\n        if (e.pointerId === state.current.id) {\n          let pointerType = (e.pointerType || 'mouse') as PointerType;\n          end(e, pointerType);\n          state.current.id = null;\n          removeGlobalListener(window, 'pointermove', onPointerMove, false);\n          removeGlobalListener(window, 'pointerup', onPointerUp, false);\n          removeGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n\n      moveProps.onPointerDown = (e: React.PointerEvent) => {\n        if (e.button === 0 && state.current.id == null) {\n          start();\n          e.stopPropagation();\n          e.preventDefault();\n          state.current.lastPosition = {pageX: e.pageX, pageY: e.pageY};\n          state.current.id = e.pointerId;\n          addGlobalListener(window, 'pointermove', onPointerMove, false);\n          addGlobalListener(window, 'pointerup', onPointerUp, false);\n          addGlobalListener(window, 'pointercancel', onPointerUp, false);\n        }\n      };\n    }\n\n    let triggerKeyboardMove = (e: EventBase, deltaX: number, deltaY: number) => {\n      start();\n      move(e, 'keyboard', deltaX, deltaY);\n      end(e, 'keyboard');\n    };\n\n    moveProps.onKeyDown = (e) => {\n      switch (e.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, -1, 0);\n          break;\n        case 'Right':\n        case 'ArrowRight':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 1, 0);\n          break;\n        case 'Up':\n        case 'ArrowUp':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, -1);\n          break;\n        case 'Down':\n        case 'ArrowDown':\n          e.preventDefault();\n          e.stopPropagation();\n          triggerKeyboardMove(e, 0, 1);\n          break;\n      }\n    };\n\n    return moveProps;\n  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);\n\n  return {moveProps};\n}\n","/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {RefObject, useCallback} from 'react';\nimport {ScrollEvents} from '@react-types/shared';\nimport {useEvent} from '@react-aria/utils';\n\nexport interface ScrollWheelProps extends ScrollEvents {\n  /** Whether the scroll listener should be disabled. */\n  isDisabled?: boolean\n}\n\n// scroll wheel needs to be added not passively so it's cancelable, small helper hook to remember that\nexport function useScrollWheel(props: ScrollWheelProps, ref: RefObject<HTMLElement>): void {\n  let {onScroll, isDisabled} = props;\n  let onScrollHandler = useCallback((e) => {\n    // If the ctrlKey is pressed, this is a zoom event, do nothing.\n    if (e.ctrlKey) {\n      return;\n    }\n\n    // stop scrolling the page\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (onScroll) {\n      onScroll({deltaX: e.deltaX, deltaY: e.deltaY});\n    }\n  }, [onScroll]);\n\n  useEvent(ref, 'wheel', isDisabled ? null : onScrollHandler);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {HTMLAttributes, useRef} from 'react';\nimport {LongPressEvent} from '@react-types/shared';\nimport {mergeProps, useDescription, useGlobalListeners} from '@react-aria/utils';\nimport {usePress} from './usePress';\n\ninterface LongPressProps {\n  /** Whether long press events should be disabled. */\n  isDisabled?: boolean,\n  /** Handler that is called when a long press interaction starts. */\n  onLongPressStart?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when a long press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onLongPressEnd?: (e: LongPressEvent) => void,\n  /**\n   * Handler that is called when the threshold time is met while\n   * the press is over the target.\n   */\n  onLongPress?: (e: LongPressEvent) => void,\n  /**\n   * The amount of time in milliseconds to wait before triggering a long press.\n   * @default 500ms\n   */\n  threshold?: number,\n  /**\n   * A description for assistive techology users indicating that a long press\n   * action is available, e.g. \"Long press to open menu\".\n   */\n  accessibilityDescription?: string\n}\n\ninterface LongPressResult {\n  /** Props to spread on the target element. */\n  longPressProps: HTMLAttributes<HTMLElement>\n}\n\nconst DEFAULT_THRESHOLD = 500;\n\n/**\n * Handles long press interactions across mouse and touch devices. Supports a customizable time threshold,\n * accessibility description, and normalizes behavior across browsers and devices.\n */\nexport function useLongPress(props: LongPressProps): LongPressResult {\n  let {\n    isDisabled,\n    onLongPressStart,\n    onLongPressEnd,\n    onLongPress,\n    threshold = DEFAULT_THRESHOLD,\n    accessibilityDescription\n  } = props;\n\n  const timeRef = useRef(null);\n  let {addGlobalListener, removeGlobalListener} = useGlobalListeners();\n\n  let {pressProps} = usePress({\n    isDisabled,\n    onPressStart(e) {\n      if (e.pointerType === 'mouse' || e.pointerType === 'touch') {\n        if (onLongPressStart) {\n          onLongPressStart({\n            ...e,\n            type: 'longpressstart'\n          });\n        }\n\n        timeRef.current = setTimeout(() => {\n          // Prevent other usePress handlers from also handling this event.\n          e.target.dispatchEvent(new PointerEvent('pointercancel', {bubbles: true}));\n          if (onLongPress) {\n            onLongPress({\n              ...e,\n              type: 'longpress'\n            });\n          }\n          timeRef.current = null;\n        }, threshold);\n\n        // Prevent context menu, which may be opened on long press on touch devices\n        if (e.pointerType === 'touch') {\n          let onContextMenu = e => {\n            e.preventDefault();\n          };\n\n          addGlobalListener(e.target, 'contextmenu', onContextMenu, {once: true});\n          addGlobalListener(window, 'pointerup', () => {\n            // If no contextmenu event is fired quickly after pointerup, remove the handler\n            // so future context menu events outside a long press are not prevented.\n            setTimeout(() => {\n              removeGlobalListener(e.target, 'contextmenu', onContextMenu);\n            }, 30);\n          }, {once: true});\n        }\n      }\n    },\n    onPressEnd(e) {\n      if (timeRef.current) {\n        clearTimeout(timeRef.current);\n      }\n\n      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {\n        onLongPressEnd({\n          ...e,\n          type: 'longpressend'\n        });\n      }\n    }\n  });\n\n  let descriptionProps = useDescription(onLongPress && !isDisabled ? accessibilityDescription : null);\n\n  return {\n    longPressProps: mergeProps(pressProps, descriptionProps)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}