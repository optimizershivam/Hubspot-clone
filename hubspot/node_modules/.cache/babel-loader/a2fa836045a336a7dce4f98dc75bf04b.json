{"ast":null,"code":"import { __rest, __assign, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n  return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\n\n\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\n\nfunction parseCSSVariable(current) {\n  var match = cssVariableRegex.exec(current);\n  if (!match) return [,];\n\n  var _a = __read(match, 3),\n      token = _a[1],\n      fallback = _a[2];\n\n  return [token, fallback];\n}\n\nvar maxDepth = 4;\n\nfunction getVariableValue(current, element, depth) {\n  if (depth === void 0) {\n    depth = 1;\n  }\n\n  invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\".concat(current, \"\\\". This may indicate a circular fallback dependency.\"));\n\n  var _a = __read(parseCSSVariable(current), 2),\n      token = _a[0],\n      fallback = _a[1]; // No CSS variable detected\n\n\n  if (!token) return; // Attempt to read this CSS variable off the element\n\n  var resolved = window.getComputedStyle(element).getPropertyValue(token);\n\n  if (resolved) {\n    return resolved.trim();\n  } else if (isCSSVariable(fallback)) {\n    // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n    return getVariableValue(fallback, element, depth + 1);\n  } else {\n    return fallback;\n  }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\n\n\nfunction resolveCSSVariables(visualElement, _a, transitionEnd) {\n  var _b;\n\n  var target = __rest(_a, []);\n\n  var element = visualElement.getInstance();\n  if (!(element instanceof Element)) return {\n    target: target,\n    transitionEnd: transitionEnd\n  }; // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n  // only if they change but I think this reads clearer and this isn't a performance-critical path.\n\n  if (transitionEnd) {\n    transitionEnd = __assign({}, transitionEnd);\n  } // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n\n\n  visualElement.forEachValue(function (value) {\n    var current = value.get();\n    if (!isCSSVariable(current)) return;\n    var resolved = getVariableValue(current, element);\n    if (resolved) value.set(resolved);\n  }); // Cycle through every target property and resolve CSS variables. Currently\n  // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n\n  for (var key in target) {\n    var current = target[key];\n    if (!isCSSVariable(current)) continue;\n    var resolved = getVariableValue(current, element);\n    if (!resolved) continue; // Clone target if it hasn't already been\n\n    target[key] = resolved; // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n    // CSS variable. This will ensure that after the animation the component will reflect\n    // changes in the value of the CSS variable.\n\n    if (transitionEnd) (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;\n  }\n\n  return {\n    target: target,\n    transitionEnd: transitionEnd\n  };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };","map":{"version":3,"names":["__rest","__assign","__read","invariant","isCSSVariable","value","startsWith","cssVariableRegex","parseCSSVariable","current","match","exec","_a","token","fallback","maxDepth","getVariableValue","element","depth","concat","resolved","window","getComputedStyle","getPropertyValue","trim","resolveCSSVariables","visualElement","transitionEnd","_b","target","getInstance","Element","forEachValue","get","set","key"],"sources":["C:/Users/Tejaswini Mahale/Desktop/Hubspot/hubspot/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs"],"sourcesContent":["import { __rest, __assign, __read } from 'tslib';\nimport { invariant } from 'hey-listen';\n\nfunction isCSSVariable(value) {\n    return typeof value === \"string\" && value.startsWith(\"var(--\");\n}\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\nfunction parseCSSVariable(current) {\n    var match = cssVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    var _a = __read(match, 3), token = _a[1], fallback = _a[2];\n    return [token, fallback];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element, depth) {\n    if (depth === void 0) { depth = 1; }\n    invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\".concat(current, \"\\\". This may indicate a circular fallback dependency.\"));\n    var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    var resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        return resolved.trim();\n    }\n    else if (isCSSVariable(fallback)) {\n        // The fallback might itself be a CSS variable, in which case we attempt to resolve it too.\n        return getVariableValue(fallback, element, depth + 1);\n    }\n    else {\n        return fallback;\n    }\n}\n/**\n * Resolve CSS variables from\n *\n * @internal\n */\nfunction resolveCSSVariables(visualElement, _a, transitionEnd) {\n    var _b;\n    var target = __rest(_a, []);\n    var element = visualElement.getInstance();\n    if (!(element instanceof Element))\n        return { target: target, transitionEnd: transitionEnd };\n    // If `transitionEnd` isn't `undefined`, clone it. We could clone `target` and `transitionEnd`\n    // only if they change but I think this reads clearer and this isn't a performance-critical path.\n    if (transitionEnd) {\n        transitionEnd = __assign({}, transitionEnd);\n    }\n    // Go through existing `MotionValue`s and ensure any existing CSS variables are resolved\n    visualElement.forEachValue(function (value) {\n        var current = value.get();\n        if (!isCSSVariable(current))\n            return;\n        var resolved = getVariableValue(current, element);\n        if (resolved)\n            value.set(resolved);\n    });\n    // Cycle through every target property and resolve CSS variables. Currently\n    // we only read single-var properties like `var(--foo)`, not `calc(var(--foo) + 20px)`\n    for (var key in target) {\n        var current = target[key];\n        if (!isCSSVariable(current))\n            continue;\n        var resolved = getVariableValue(current, element);\n        if (!resolved)\n            continue;\n        // Clone target if it hasn't already been\n        target[key] = resolved;\n        // If the user hasn't already set this key on `transitionEnd`, set it to the unresolved\n        // CSS variable. This will ensure that after the animation the component will reflect\n        // changes in the value of the CSS variable.\n        if (transitionEnd)\n            (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : (transitionEnd[key] = current);\n    }\n    return { target: target, transitionEnd: transitionEnd };\n}\n\nexport { cssVariableRegex, parseCSSVariable, resolveCSSVariables };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}