{"ast":null,"code":"import $1DoQa$intlmessageformat from \"intl-messageformat\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $d6fd23bc337660df$exports = {};\n$parcel$export($d6fd23bc337660df$exports, \"MessageDictionary\", () => $d6fd23bc337660df$export$64839e615120df17);\n\nclass $d6fd23bc337660df$export$64839e615120df17 {\n  getStringForLocale(key, locale) {\n    let strings = this.messages[locale];\n\n    if (!strings) {\n      strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n\n  constructor(messages) {\n    let defaultLocale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n    // Clone messages so we don't modify the original object.\n    this.messages = { ...messages\n    };\n    this.defaultLocale = defaultLocale;\n  }\n\n}\n\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings) {\n  let defaultLocale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en-US';\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n\n  let language = $d6fd23bc337660df$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) return strings[key];\n  } // Nothing close, use english.\n\n\n  return strings[defaultLocale];\n}\n\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split('-')[0];\n}\n\nvar $972eb555d604f491$exports = {};\n$parcel$export($972eb555d604f491$exports, \"MessageFormatter\", () => $972eb555d604f491$export$526ebc05ff964723);\n\nclass $972eb555d604f491$export$526ebc05ff964723 {\n  format(key, variables) {\n    let message = this.cache[key];\n\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      message = new $1DoQa$intlmessageformat(msg, this.locale);\n      this.cache[key] = message;\n    }\n\n    let varCopy;\n    if (variables) varCopy = Object.keys(variables).reduce((acc, key) => {\n      acc[key] = variables[key] == null ? false : variables[key];\n      return acc;\n    }, {});\n    return message.format(varCopy);\n  }\n\n  constructor(locale, messages) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n}\n\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary, $972eb555d604f491$export$526ebc05ff964723 as MessageFormatter };","map":{"version":3,"mappings":"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","names":["$d6fd23bc337660df$export$64839e615120df17","getStringForLocale","key","locale","strings","messages","$d6fd23bc337660df$var$getStringsForLocale","defaultLocale","string","Error","language","$d6fd23bc337660df$var$getLanguage","startsWith","Intl","Locale","split","$972eb555d604f491$export$526ebc05ff964723","format","variables","message","cache","msg","$1DoQa$intlmessageformat","varCopy","Object","keys","reduce","acc"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\MessageDictionary.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@internationalized\\message\\dist\\packages\\@internationalized\\message\\src\\MessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type LocalizedStrings = {\n  [lang: string]: {\n    [key: string]: string\n  }\n};\n\n/**\n * Stores a mapping of localized strings. Can be used to find the\n * closest available string for a given locale.\n */\nexport class MessageDictionary {\n  private messages: LocalizedStrings;\n  private defaultLocale: string;\n\n  constructor(messages: LocalizedStrings, defaultLocale: string = 'en-US') {\n    // Clone messages so we don't modify the original object.\n    this.messages = {...messages};\n    this.defaultLocale = defaultLocale;\n  }\n\n  getStringForLocale(key: string, locale: string) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n\n    let string = strings[key];\n    if (!string) {\n      throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    }\n\n    return string;\n  }\n}\n\nfunction getStringsForLocale(locale: string, strings: LocalizedStrings, defaultLocale = 'en-US') {\n  // If there is an exact match, use it.\n  if (strings[locale]) {\n    return strings[locale];\n  }\n\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = getLanguage(locale);\n  if (strings[language]) {\n    return strings[language];\n  }\n\n  for (let key in strings) {\n    if (key.startsWith(language + '-')) {\n      return strings[key];\n    }\n  }\n\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\n\nfunction getLanguage(locale: string) {\n  // @ts-ignore\n  if (Intl.Locale) {\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  }\n\n  return locale.split('-')[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormatXMLElementFn, PrimitiveType} from 'intl-messageformat/src/formatters';\nimport IntlMessageFormat from 'intl-messageformat';\nimport {MessageDictionary} from './MessageDictionary';\n\n/**\n * Formats ICU Message strings to create localized strings from a MessageDictionary.\n */\nexport class MessageFormatter {\n  private locale: string;\n  private messages: MessageDictionary;\n  private cache: {[key: string]: IntlMessageFormat};\n\n  constructor(locale: string, messages: MessageDictionary) {\n    this.locale = locale;\n    this.messages = messages;\n    this.cache = {};\n  }\n\n  format<T = void>(key: string, variables: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined) {\n    let message = this.cache[key];\n    if (!message) {\n      let msg = this.messages.getStringForLocale(key, this.locale);\n      if (!msg) {\n        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n      }\n\n      message = new IntlMessageFormat(msg, this.locale);\n      this.cache[key] = message;\n    }\n    let varCopy: Record<string, PrimitiveType | T | FormatXMLElementFn<T, string | T | (string | T)[]>> | undefined;\n    if (variables) {\n      varCopy = Object.keys(variables).reduce((acc, key) => {\n        acc[key] = variables[key] == null ? false : variables[key];\n        return acc;\n      }, {});\n    }\n\n    return message.format(varCopy);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}