{"ast":null,"code":"import { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $7af3f5b51489e0b5$exports = {};\n$parcel$export($7af3f5b51489e0b5$exports, \"useMultipleSelectionState\", () => $7af3f5b51489e0b5$export$253fe78d46329472);\n\nclass $e40ea825a81a3709$export$52baac22726c72bf extends Set {\n  constructor(keys, anchorKey, currentKey) {\n    super(keys);\n\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n\n}\n\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n\n  for (let item of setA) {\n    if (!setB.has(item)) return false;\n  }\n\n  return true;\n}\n\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  let {\n    selectionMode = 'none',\n    disallowEmptySelection: disallowEmptySelection,\n    allowDuplicateSelectionEvents: allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props; // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n\n  let isFocusedRef = $Qsto2$useRef(false);\n  let [, setFocused] = $Qsto2$useState(false);\n  let focusedKeyRef = $Qsto2$useRef(null);\n  let childFocusStrategyRef = $Qsto2$useRef(null);\n  let [, setFocusedKey] = $Qsto2$useState(null);\n  let selectedKeysProp = $Qsto2$useMemo(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = $Qsto2$useMemo(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = $Qsto2$useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);\n  let disabledKeysProp = $Qsto2$useMemo(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = $Qsto2$useState(selectionBehaviorProp); // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace'); // If the selectionBehavior prop changes, update the state as well.\n\n  let lastSelectionBehavior = $Qsto2$useRef(selectionBehaviorProp);\n  $Qsto2$useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n\n    setFocusedKey(k) {\n      let childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n\n    selectedKeys: selectedKeys,\n\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);\n    },\n\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\n\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new $e40ea825a81a3709$export$52baac22726c72bf(selection);\n}\n\nvar $d496c0a20b6e58ec$exports = {};\n$parcel$export($d496c0a20b6e58ec$exports, \"SelectionManager\", () => $d496c0a20b6e58ec$export$6c8a5aaad13c9852);\n\nclass $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {\n  /**\n  * The type of selection that is allowed in the collection.\n  */\n  get selectionMode() {\n    return this.state.selectionMode;\n  }\n  /**\n  * Whether the collection allows empty selection.\n  */\n\n\n  get disallowEmptySelection() {\n    return this.state.disallowEmptySelection;\n  }\n  /**\n  * The selection behavior for the collection.\n  */\n\n\n  get selectionBehavior() {\n    return this.state.selectionBehavior;\n  }\n  /**\n  * Sets the selection behavior for the collection.\n  */\n\n\n  setSelectionBehavior(selectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n  /**\n  * Whether the collection is currently focused.\n  */\n\n\n  get isFocused() {\n    return this.state.isFocused;\n  }\n  /**\n  * Sets whether the collection is focused.\n  */\n\n\n  setFocused(isFocused) {\n    this.state.setFocused(isFocused);\n  }\n  /**\n  * The current focused key in the collection.\n  */\n\n\n  get focusedKey() {\n    return this.state.focusedKey;\n  }\n  /** Whether the first or last child of the focused key should receive focus. */\n\n\n  get childFocusStrategy() {\n    return this.state.childFocusStrategy;\n  }\n  /**\n  * Sets the focused key.\n  */\n\n\n  setFocusedKey(key, childFocusStrategy) {\n    this.state.setFocusedKey(key, childFocusStrategy);\n  }\n  /**\n  * The currently selected keys in the collection.\n  */\n\n\n  get selectedKeys() {\n    return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n  }\n  /**\n  * The raw selection value for the collection.\n  * Either 'all' for select all, or a set of keys.\n  */\n\n\n  get rawSelection() {\n    return this.state.selectedKeys;\n  }\n  /**\n  * Returns whether a key is selected.\n  */\n\n\n  isSelected(key) {\n    if (this.state.selectionMode === 'none') return false;\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n  }\n  /**\n  * Whether the selection is empty.\n  */\n\n\n  get isEmpty() {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n  /**\n  * Whether all items in the collection are selected.\n  */\n\n\n  get isSelectAll() {\n    if (this.isEmpty) return false;\n    if (this.state.selectedKeys === 'all') return true;\n    if (this._isSelectAll != null) return this._isSelectAll;\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey() {\n    let first = null;\n\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n    }\n\n    return first === null || first === void 0 ? void 0 : first.key;\n  }\n\n  get lastSelectedKey() {\n    let last = null;\n\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n    }\n\n    return last === null || last === void 0 ? void 0 : last.key;\n  }\n\n  get disabledKeys() {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior() {\n    return this.state.disabledBehavior;\n  }\n  /**\n  * Extends the selection to the given key.\n  */\n\n\n  extendSelection(toKey) {\n    if (this.selectionMode === 'none') return;\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n    let selection; // Only select the one key if coming from a select all.\n\n    if (this.state.selectedKeys === 'all') selection = new $e40ea825a81a3709$export$52baac22726c72bf([toKey], toKey, toKey);else {\n      let selectedKeys = this.state.selectedKeys;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);\n\n      for (let key1 of this.getKeyRange(toKey, anchorKey)) if (this.canSelectItem(key1)) selection.add(key1);\n    }\n    this.state.setSelectedKeys(selection);\n  }\n\n  getKeyRange(from, to) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  getKeyRangeInternal(from, to) {\n    let keys = [];\n    let key = from;\n\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n      if (key === to) return keys;\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  getKey(key) {\n    let item = this.collection.getItem(key);\n    if (!item) // ¯\\_(ツ)_/¯\n      return key; // If cell selection is allowed, just return the key.\n\n    if (item.type === 'cell' && this.allowsCellSelection) return key; // Find a parent item to select\n\n    while (item.type !== 'item' && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n\n    if (!item || item.type !== 'item') return null;\n    return item.key;\n  }\n  /**\n  * Toggles whether the given key is selected.\n  */\n\n\n  toggleSelection(key) {\n    if (this.selectionMode === 'none') return;\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) return;\n    let keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n    if (this.disallowEmptySelection && keys.size === 0) return;\n    this.state.setSelectedKeys(keys);\n  }\n  /**\n  * Replaces the selection with only the given key.\n  */\n\n\n  replaceSelection(key) {\n    if (this.selectionMode === 'none') return;\n    key = this.getKey(key);\n    if (key == null) return;\n    let selection = this.canSelectItem(key) ? new $e40ea825a81a3709$export$52baac22726c72bf([key], key, key) : new $e40ea825a81a3709$export$52baac22726c72bf();\n    this.state.setSelectedKeys(selection);\n  }\n  /**\n  * Replaces the selection with the given keys.\n  */\n\n\n  setSelectedKeys(keys) {\n    if (this.selectionMode === 'none') return;\n    let selection = new $e40ea825a81a3709$export$52baac22726c72bf();\n\n    for (let key of keys) {\n      key = this.getKey(key);\n\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') break;\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  getSelectAllKeys() {\n    let keys = [];\n\n    let addKeys = key => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') keys.push(key); // Add child keys. If cell selection is allowed, then include item children too.\n\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) addKeys([...item.childNodes][0].key);\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n  /**\n  * Selects all items in the collection.\n  */\n\n\n  selectAll() {\n    if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n  }\n  /**\n  * Removes all keys from the selection.\n  */\n\n\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());\n  }\n  /**\n  * Toggles between select all and an empty selection.\n  */\n\n\n  toggleSelectAll() {\n    if (this.isSelectAll) this.clearSelection();else this.selectAll();\n  }\n\n  select(key, e) {\n    if (this.selectionMode === 'none') return;\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n    } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);else this.replaceSelection(key);\n  }\n  /**\n  * Returns whether the current selection is equal to the given selection.\n  */\n\n\n  isSelectionEqual(selection) {\n    if (selection === this.state.selectedKeys) return true; // Check if the set of keys match.\n\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) return false;\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) return false;\n    }\n\n    for (let key2 of selectedKeys) {\n      if (!selection.has(key2)) return false;\n    }\n\n    return true;\n  }\n\n  canSelectItem(key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n    let item = this.collection.getItem(key);\n    if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n    return true;\n  }\n\n  isDisabled(key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n\n  constructor(collection, state, options) {\n    this.collection = collection;\n    this.state = state;\n    var ref;\n    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n    this._isSelectAll = null;\n  }\n\n}\n\nvar $63d397230baf7bd4$exports = {};\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"mappings":"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","names":["$e40ea825a81a3709$export$52baac22726c72bf","Set","keys","anchorKey","currentKey","$7af3f5b51489e0b5$var$equalSets","setA","setB","size","item","has","$7af3f5b51489e0b5$export$253fe78d46329472","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","selectionBehavior","selectionBehaviorProp","disabledBehavior","isFocusedRef","$Qsto2$useRef","setFocused","$Qsto2$useState","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","$Qsto2$useMemo","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","setSelectedKeys","$Qsto2$useControlledState","onSelectionChange","disabledKeysProp","disabledKeys","setSelectionBehavior","lastSelectionBehavior","$Qsto2$useEffect","current","isFocused","f","focusedKey","childFocusStrategy","k","selection","defaultValue","$d496c0a20b6e58ec$export$6c8a5aaad13c9852","state","key","getSelectAllKeys","rawSelection","isSelected","getKey","canSelectItem","isEmpty","isSelectAll","_isSelectAll","allKeys","every","firstSelectedKey","first","collection","getItem","index","lastSelectedKey","last","extendSelection","toKey","replaceSelection","getKeyRange","delete","key1","add","from","to","fromItem","toItem","getKeyRangeInternal","type","allowsCellSelection","push","getKeyAfter","parentKey","toggleSelection","addKeys","hasChildNodes","childNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll","select","e","pointerType","isSelectionEqual","key2","isDisabled","options","ref"],"sources":["C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\selection\\dist\\packages\\@react-stately\\selection\\src\\Selection.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\selection\\dist\\packages\\@react-stately\\selection\\src\\useMultipleSelectionState.ts","C:\\Users\\Tejaswini Mahale\\Desktop\\Hubspot\\hubspot\\node_modules\\@react-stately\\selection\\dist\\packages\\@react-stately\\selection\\src\\SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    this.state.setFocusedKey(key, childFocusStrategy);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}