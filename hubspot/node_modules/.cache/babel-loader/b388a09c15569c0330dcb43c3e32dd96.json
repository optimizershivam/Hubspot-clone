{"ast":null,"code":"import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n  if (options === void 0) {\n    options = {\n      passive: true\n    };\n  }\n\n  target.addEventListener(eventName, handler, options);\n  return function () {\n    return target.removeEventListener(eventName, handler);\n  };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\n\n\nfunction useDomEvent(ref, eventName, handler, options) {\n  useEffect(function () {\n    var element = ref.current;\n\n    if (handler && element) {\n      return addDomEvent(element, eventName, handler, options);\n    }\n  }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };","map":{"version":3,"names":["useEffect","addDomEvent","target","eventName","handler","options","passive","addEventListener","removeEventListener","useDomEvent","ref","element","current"],"sources":["C:/Users/Tejaswini Mahale/Desktop/Hubspot/hubspot/node_modules/framer-motion/dist/es/events/use-dom-event.mjs"],"sourcesContent":["import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler, options) {\n    if (options === void 0) { options = { passive: true }; }\n    target.addEventListener(eventName, handler, options);\n    return function () { return target.removeEventListener(eventName, handler); };\n}\n/**\n * Attaches an event listener directly to the provided DOM element.\n *\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\n * event handlers.\n *\n * ```jsx\n * const ref = useRef(null)\n *\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\n *\n * return <div ref={ref} />\n * ```\n *\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\n * @param eventName - Name of the event you want listen for.\n * @param handler - Function to fire when receiving the event.\n * @param options - Options to pass to `Event.addEventListener`.\n *\n * @public\n */\nfunction useDomEvent(ref, eventName, handler, options) {\n    useEffect(function () {\n        var element = ref.current;\n        if (handler && element) {\n            return addDomEvent(element, eventName, handler, options);\n        }\n    }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0D;EACtD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG;MAAEC,OAAO,EAAE;IAAX,CAAV;EAA8B;;EACxDJ,MAAM,CAACK,gBAAP,CAAwBJ,SAAxB,EAAmCC,OAAnC,EAA4CC,OAA5C;EACA,OAAO,YAAY;IAAE,OAAOH,MAAM,CAACM,mBAAP,CAA2BL,SAA3B,EAAsCC,OAAtC,CAAP;EAAwD,CAA7E;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,WAAT,CAAqBC,GAArB,EAA0BP,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,EAAuD;EACnDL,SAAS,CAAC,YAAY;IAClB,IAAIW,OAAO,GAAGD,GAAG,CAACE,OAAlB;;IACA,IAAIR,OAAO,IAAIO,OAAf,EAAwB;MACpB,OAAOV,WAAW,CAACU,OAAD,EAAUR,SAAV,EAAqBC,OAArB,EAA8BC,OAA9B,CAAlB;IACH;EACJ,CALQ,EAKN,CAACK,GAAD,EAAMP,SAAN,EAAiBC,OAAjB,EAA0BC,OAA1B,CALM,CAAT;AAMH;;AAED,SAASJ,WAAT,EAAsBQ,WAAtB"},"metadata":{},"sourceType":"module"}