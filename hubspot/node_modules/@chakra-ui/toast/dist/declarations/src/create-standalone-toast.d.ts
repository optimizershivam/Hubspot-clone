import { ColorMode, useChakra } from "@chakra-ui/system";
import * as React from "react";
import { ToastProviderProps } from "./toast.provider";
import { UseToastOptions } from "./use-toast";
export interface CreateStandAloneToastParam extends Partial<ReturnType<typeof useChakra> & {
    setColorMode: (value: ColorMode) => void;
    defaultOptions: UseToastOptions;
}>, Omit<ToastProviderProps, "children"> {
}
export declare const defaultStandaloneParam: CreateStandAloneToastParam & Required<Omit<CreateStandAloneToastParam, keyof ToastProviderProps>>;
/**
 * Create a toast
 */
export declare function createStandaloneToast({ theme, colorMode, toggleColorMode, setColorMode, defaultOptions, motionVariants, toastSpacing, component, }?: CreateStandAloneToastParam): {
    ToastContainer: () => JSX.Element;
    toast: {
        (options?: UseToastOptions | undefined): import("@chakra-ui/react").ToastId;
        update(id: import("@chakra-ui/react").ToastId, options: Omit<UseToastOptions, "id">): void;
        promise<Result extends unknown, Err extends Error = Error>(promise: Promise<Result>, options: {
            success: import("@chakra-ui/utils").MaybeFunction<{
                title?: React.ReactNode;
                position?: import("@chakra-ui/react").ToastPosition | undefined;
                id?: import("@chakra-ui/react").ToastId | undefined;
                colorScheme?: string | undefined;
                variant?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
                size?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
                orientation?: "horizontal" | "vertical" | undefined;
                styleConfig?: import("@chakra-ui/utils").Dict<any> | undefined;
                icon?: React.ReactNode;
                description?: React.ReactNode;
                render?: ((props: import("@chakra-ui/react").RenderProps) => React.ReactNode) | undefined;
                duration?: number | null | undefined;
                onCloseComplete?: (() => void) | undefined;
                isClosable?: boolean | undefined;
                containerStyle?: React.CSSProperties | undefined;
            }, [Result]>;
            error: import("@chakra-ui/utils").MaybeFunction<{
                title?: React.ReactNode;
                position?: import("@chakra-ui/react").ToastPosition | undefined;
                id?: import("@chakra-ui/react").ToastId | undefined;
                colorScheme?: string | undefined;
                variant?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
                size?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
                orientation?: "horizontal" | "vertical" | undefined;
                styleConfig?: import("@chakra-ui/utils").Dict<any> | undefined;
                icon?: React.ReactNode;
                description?: React.ReactNode;
                render?: ((props: import("@chakra-ui/react").RenderProps) => React.ReactNode) | undefined;
                duration?: number | null | undefined;
                onCloseComplete?: (() => void) | undefined;
                isClosable?: boolean | undefined;
                containerStyle?: React.CSSProperties | undefined;
            }, [Err]>;
            loading: {
                title?: React.ReactNode;
                position?: import("@chakra-ui/react").ToastPosition | undefined;
                id?: import("@chakra-ui/react").ToastId | undefined;
                colorScheme?: string | undefined;
                variant?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
                size?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
                orientation?: "horizontal" | "vertical" | undefined;
                styleConfig?: import("@chakra-ui/utils").Dict<any> | undefined;
                icon?: React.ReactNode;
                description?: React.ReactNode;
                render?: ((props: import("@chakra-ui/react").RenderProps) => React.ReactNode) | undefined;
                duration?: number | null | undefined;
                onCloseComplete?: (() => void) | undefined;
                isClosable?: boolean | undefined;
                containerStyle?: React.CSSProperties | undefined;
            };
        }): void;
        closeAll: (options?: import("@chakra-ui/react").CloseAllToastsOptions | undefined) => void;
        close: (id: import("@chakra-ui/react").ToastId) => void;
        isActive: (id: import("@chakra-ui/react").ToastId) => boolean;
    };
};
//# sourceMappingURL=create-standalone-toast.d.ts.map