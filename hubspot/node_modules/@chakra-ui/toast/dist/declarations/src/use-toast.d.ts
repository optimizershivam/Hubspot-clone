import type { AlertStatus } from "@chakra-ui/alert";
import { ThemingProps } from "@chakra-ui/system";
import * as React from "react";
import type { RenderProps, ToastId, ToastOptions } from "./toast.types";
import { ToastPosition } from "./toast.placement";
export interface UseToastOptions extends ThemingProps<"Alert"> {
    /**
     * The placement of the toast
     *
     * @default "bottom"
     */
    position?: ToastPosition;
    /**
     * The delay before the toast hides (in milliseconds)
     * If set to `null`, toast will never dismiss.
     *
     * @default 5000 ( = 5000ms )
     */
    duration?: ToastOptions["duration"];
    /**
     * Render a component toast component.
     * Any component passed will receive 2 props: `id` and `onClose`.
     */
    render?(props: RenderProps): React.ReactNode;
    /**
     * The title of the toast
     */
    title?: React.ReactNode;
    /**
     * The description of the toast
     */
    description?: React.ReactNode;
    /**
     * If `true`, toast will show a close button
     */
    isClosable?: boolean;
    /**
     * The status of the toast.
     */
    status?: AlertStatus;
    /**
     * A custom icon that will be displayed by the toast.
     */
    icon?: React.ReactNode;
    /**
     * The `id` of the toast.
     *
     * Mostly used when you need to prevent duplicate.
     * By default, we generate a unique `id` for each toast
     */
    id?: ToastId;
    /**
     * Callback function to run side effects after the toast has closed.
     */
    onCloseComplete?: () => void;
    /**
     * Optional style overrides for the container wrapping the toast component.
     */
    containerStyle?: React.CSSProperties;
}
/**
 * React hook used to create a function that can be used
 * to show toasts in an application.
 */
export declare function useToast(defaultOptions?: UseToastOptions): {
    (options?: UseToastOptions | undefined): ToastId;
    update(id: ToastId, options: Omit<UseToastOptions, "id">): void;
    promise<Result extends unknown, Err extends Error = Error>(promise: Promise<Result>, options: {
        success: import("@chakra-ui/utils").MaybeFunction<{
            title?: React.ReactNode;
            position?: ToastPosition | undefined;
            id?: ToastId | undefined;
            colorScheme?: string | undefined;
            variant?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
            size?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
            orientation?: "horizontal" | "vertical" | undefined;
            styleConfig?: import("@chakra-ui/utils").Dict<any> | undefined;
            icon?: React.ReactNode;
            description?: React.ReactNode;
            render?: ((props: RenderProps) => React.ReactNode) | undefined;
            duration?: number | null | undefined;
            onCloseComplete?: (() => void) | undefined;
            isClosable?: boolean | undefined;
            containerStyle?: React.CSSProperties | undefined;
        }, [Result]>;
        error: import("@chakra-ui/utils").MaybeFunction<{
            title?: React.ReactNode;
            position?: ToastPosition | undefined;
            id?: ToastId | undefined;
            colorScheme?: string | undefined;
            variant?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
            size?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
            orientation?: "horizontal" | "vertical" | undefined;
            styleConfig?: import("@chakra-ui/utils").Dict<any> | undefined;
            icon?: React.ReactNode;
            description?: React.ReactNode;
            render?: ((props: RenderProps) => React.ReactNode) | undefined;
            duration?: number | null | undefined;
            onCloseComplete?: (() => void) | undefined;
            isClosable?: boolean | undefined;
            containerStyle?: React.CSSProperties | undefined;
        }, [Err]>;
        loading: {
            title?: React.ReactNode;
            position?: ToastPosition | undefined;
            id?: ToastId | undefined;
            colorScheme?: string | undefined;
            variant?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
            size?: import("@chakra-ui/system").ResponsiveValue<string> | undefined;
            orientation?: "horizontal" | "vertical" | undefined;
            styleConfig?: import("@chakra-ui/utils").Dict<any> | undefined;
            icon?: React.ReactNode;
            description?: React.ReactNode;
            render?: ((props: RenderProps) => React.ReactNode) | undefined;
            duration?: number | null | undefined;
            onCloseComplete?: (() => void) | undefined;
            isClosable?: boolean | undefined;
            containerStyle?: React.CSSProperties | undefined;
        };
    }): void;
    closeAll: (options?: import("./toast.types").CloseAllToastsOptions | undefined) => void;
    close: (id: ToastId) => void;
    isActive: (id: ToastId) => boolean;
};
export default useToast;
//# sourceMappingURL=use-toast.d.ts.map